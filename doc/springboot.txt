http://blog.javachen.com/2016/02/22/profile-usage-in-spring-boot.html  通过不同的profile，可以有对应的资源文件application-{profile}.properties。例如，application-dev.properties   
http://blog.javachen.com/2016/02/22/devtools-in-spring-boot.html   DevTools in Spring Boot
http://blog.javachen.com/2016/02/19/spring-boot-auto-configuration.html   
第一部分里面没有spring.profiles 属性，所以Boot会将其作为 default profile
如果启动类在根包下面，则你可以在该类上添加@ComponentScan注解而不需要添加任何参数，Spring Boot会在根包下面搜索注有@Component, @Service, @Repository, @Controller注解的所有类，并将他们注册为Spring Beans，否则，你需要在@ComponentScan注解上定义basePackages或者其他属性。
@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})   --debug开关启动应用，这将会记录一个自动配置的报告并输出到控制台。

mapperHelper.processConfiguration(sqlSessionFactory.getConfiguration()); // 通用mapper
sqlSessionFactory.getConfiguration().addInterceptor(interceptor);  // 分页
https://github.com/johntostring/spring-boot-shiro
https://patrickgrimard.io/2016/01/18/spring-boot-devtools-first-look/
http://yukinami.github.io/2016/05/28/%E7%94%A8Spring-Test%E8%BF%9B%E8%A1%8C%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/    用Spring Test进行页面的功能测试

security
http://www.baeldung.com/securing-a-restful-web-service-with-spring-security
http://icodeit.org/2016/05/about-session-and-security-api-1/  thoughtworks
http://haycco.ren/2016/08/21/%E5%88%9B%E5%BB%BARESTful%E9%A3%8E%E6%A0%BC%E5%92%8C%E5%9F%BA%E4%BA%8Etoken%E6%96%B9%E5%BC%8F%E9%AA%8C%E8%AF%81%E7%9A%84Spring%20Boot%E5%BA%94%E7%94%A8/
http://www.codesandnotes.be/2014/10/31/restful-authentication-using-spring-security-on-spring-boot-and-jquery-as-a-web-client/
http://www.svlada.com/jwt-token-authentication-with-spring-boot/


http://spring.io/blog/2016/04/15/testing-improvements-in-spring-boot-1-4  @RunWith(SpringRunner.class) @SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)
csrf 解决的方法就是使用Synchronizer Token Pattern。这个方案确保每个请求，除了session的cookies值，还需要发送一个预先生成的随机值作为请求参数。 http://yukinami.github.io/2016/02/14/Spring-Security-CSRF/
spring Boot 使用事务非常简单，首先使用注解 @EnableTransactionManagement 开启事务支持后，然后在访问数据库的Service方法上添加注解 @Transactional 便可。
在声明事务时，只需要通过value属性指定配置的事务管理器名即可，例如：@Transactional(value="transactionManagerPrimary")
READ_COMMITTED：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。
REPEATABLE_READ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别可以防止脏读和不可重复读。
NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于REQUIRED。
http://didispace.com/springboottransactional/
这里我们对不可重复读和幻读加以区分：不可重复读指事务原先所读到的数据被修改或删除了，不可重复读取；而幻读则指事务在执行相同查询时读到了新增加的数据，读到幻象般出现的数据。
Serializable 相当于锁定表, Read Repeatable 相当于锁定扫描的每一行
http://www.dengshenyu.com/java/spring/2016/12/03/spring-database-transaction.html   Spring数据库事务


http://sail-y.github.io/2016/03/22/Spring-cloud%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5-%E4%B8%89/  docker
http://sail-y.github.io/2016/03/21/Spring-cloud%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5-%E4%BA%8C/  mongodb
http://www.dengshenyu.com/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/2016/05/24/websocket.html  Spring与WebSocket
http://blog.didispace.com/categories/Spring-Boot/
https://github.com/cloudera/htrace
https://github.com/Netflix/ribbon
https://github.com/Netflix/exhibitor
http://www.infoq.com/cn/news/2013/02/netflix-opensource
http://netflix.github.io/
http://cloud.spring.io/spring-cloud-sleuth/

Stream已经支持Kafka/Rabbit MQ/Redis/Gemfire  http://blog.spring-cloud.io/blog/sc-stream.html
http://blog.spring-cloud.io/blog/sc-config.html  SpringCloud 分布式配置

Hadoop 2.6的新特性包含了Trace功能，一个类似于Google Dapper的分布式跟踪工具，为Hadoop系列应用提供请求跟踪和性能分析。在2.7中支持了Apache version of HTrace。并且，HTrace也集成到了HBase中，HBase 1.0.0使用Apache 3.1.0 release。
http://blog.csdn.net/hustsselbj/article/details/46603809
 
PID，当前进程ID{LOG_FILE}，Spring Boot配置文件（application.properties|.yml）中logging.file的值 ${LOG_PATH}, Spring Boot配置文件中logging.path的值 http://blog.csdn.net/catoop/article/details/50501714
logging.level.root=WARN
logging.level.org.springframework=DEBUG

http://blog.didispace.com/spring-statemachine/  使用Spring StateMachine框架实现状态机


自动化测试、持续集成与自动化部署是向微服务架构大规模迁移前必须补偿的技术欠债。
在实施微服务改造前，建议先行搭建好运营支撑平台，平台至少提供微服务的编译、集成、打包、部署、配置等工作；如果有能力建议采用PaaS平台，解决微服务从开发到运行的全生命周期管理，同时提供异构环境管理、容器资源隔离与互通、服务伸缩漂移、服务升级与回退、服务熔断与降级、服务注册与发现。
制定微服务开发规范（包括技术架构，Spring Boot+Motan+etcd+RESTEasy+Elasticsearch+Docker+Kubernetes是我们的技术架构选型）
微服务拆分之后，最大的挑战来自于运维、监控、故障处理
http://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&mid=2659597920&idx=1&sn=ab11a7a319d8f0ee1031168ca37314d0#rd

http://my.oschina.net/wangnian/blog/661389   SpringBoot之redis
brew tap pivotal/tap切换到Pivotal仓库中，然后执行brew install springboot命令
注意：使用.yml时，属性名的值和冒号中间必须有空格，如name: Isea533正确，name:Isea533就是错的。
spring会从classpath下的/config目录或者classpath的根目录查找application.properties或application.yml。
http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#using-boot-importing-xml-configuration  @Configuration  @ImportResource
http://blog.csdn.net/isea533/article/details/50449907    Spring MVC 从4.2版本开始增加了对CORS的支持，可以配置全局的规则，也可以使用@CrossOrigin注解进行细粒度的配置。
http://start.spring.io/
https://spring.io/blog/2014/03/07/deploying-spring-boot-applications
http://www.tianmaying.com/tutorial/deploy-spring-boot-application  部署Spring Boot应用      @Profile("dev")  spring.profiles.active=dev
http://blog.javachen.com/2016/02/22/profile-usage-in-spring-boot.html   你可以使用spring.profiles.active来设置哪些profile被激活。spring.profiles.include属性用来设置无条件的激活哪些profile。
https://qbgbook.gitbooks.io/spring-boot-reference-guide-zh/content/IX.%20%E2%80%98How-to%E2%80%99%20guides/74.1.%20Create%20a%20deployable%20war%20file.html    创建一个可部署的war文件
http://geowarin.github.io/understanding-spring-boot.html
https://blog.coding.net/blog/Spring-Boot
http://9leg.com/spring/2015/02/12/spring-propertysource-value-annotations-example.html  Spring的@PropertySource和@Value注解例子
http://docs.daocloud.io/java-docker/docker-java-spring-boot
http://www.infoq.com/cn/news/2015/03/develop-tool-spring-cloud
http://blog.javachen.com/2016/02/22/devtools-in-spring-boot.html
http://blog.csdn.net/wh_ouyangshuang/article/details/48174963    Spring Boot热启动
http://blog.csdn.net/wh_ouyangshuang/article/details/48048111    监控和管理生产环境spring boot actuator 
http://blog.csdn.net/wh_ouyangshuang/article/details/48031063    spring cloud config
http://www.infoq.com/cn/articles/Next-Generation-Session-Management-with-Spring-Session
http://www.jayway.com/2015/05/31/scaling-out-with-spring-session/  
@EnableRedisHttpSession
application.properties中可以对redis的参数进行控制：
spring.redis.host=localhost
#spring.redis.password=secret
spring.redis.port=6379

@Retryable(maxAttempts=10,value=RuntimeException.class,backoff = @Backoff(delay = 10000,multiplier=2))
 


http://blog.csdn.net/hengyunabc/article/details/19006911
https://zookeeper.apache.org/doc/trunk/zookeeperReconfig.html   zookeeper 3.5.0 reload config
https://github.com/Netflix/exhibitor/wiki/Configuration-UI

spring zookeeper
http://therore.net/distributed-configuration-with-zookeeper-curator-and-spring-cloud-config/
https://github.com/alfredodiaz/kata-zookeeper
https://segmentfault.com/a/1190000004356362
http://www.cnblogs.com/skyblog/category/774535.html

https://github.com/weekface/zipkin-deploy  

https://programmaticponderings.wordpress.com/2016/02/15/diving-deeper-into-getting-started-with-spring-cloud/
http://m.blog.csdn.net/article/details?id=50594480


http://samchu.logdown.com/posts/617636-akka-cluster-example  akka cluster

http://bbs.chinaunix.net/thread-4175287-1-1.html
HBase 如果是采用默认参数，那么对于大批量的随机读性能是完全不够的，需要对随机读进行针对性优化才能有很大的性能提升。例如 HBase 参数调优，在 MR 中通过采取全局排序的方式变随机读为顺序读、数据聚合、RowKey 设计、表预先切分、客户端使用参数调优、大批写使用 Bulk Load 、中间数据和小表使用文件替代等多种具体的优化手段。
在 HBase 使用过程中，为了避免踩坑，吴磊提醒大家注意三点：第一，重视运维；第二，及时关注官方动态；第三，在使用一些新特性时需要谨慎对待。
每个 MapReduce 任务内部，Shuffle 两端的数据都要在本地磁盘上暂存， IO 开销比较大，这也是为什么 MapReduce 任务设计中，有效的利用 Combiner 能够大幅度提高任务运行速度的一个原因 (另一个更重要的原因是 Combiner 减少了需要 Shuffle 的数据量， 从而大大减少了网络 IO)。
http://mp.weixin.qq.com/s?__biz=MjM5NDQ4MTcwMA==&mid=400019663&idx=2&sn=fcabbc79aa73bf1f1661317e323ebe90&3rd=MzA3MDU4NTYzMw==&scene=6#rd
