http://www.cnblogs.com/sunada2005/p/4739312.html
在mybatis中，”${xxx}”这样格式的参数会直接参与sql编译，从而不能避免注入攻击。但涉及到动态表名和列名时，只能使用“${xxx}”这样的参数格式，所以，这样的参数需要我们在代码中手工进行处理来防止注入。
结论：在编写mybatis的映射语句时，尽量采用“#{xxx}”这样的格式。若不得不使用“${xxx}”这样的参数，要手工地做好过滤工作，来防止sql注入攻击。
#{xxx}，使用的是PreparedStatement，会有类型转换，所以比较安全；
${xxx}，使用字符串拼接，可以SQL注入；
like查询不小心会有漏动，正确写法如下：
Mysql: select * from t_user where name like concat('%', #{name}, '%')      
Oracle: select * from t_user where name like '%' || #{name} || '%'      
SQLServer: select * from t_user where name like '%' + #{name} + '%'

http://www.cnblogs.com/yjmyzz/p/sharding-jdbc-turotial.html
https://github.com/yjmyzz/spring-mybatis-multidatasource
https://github.com/abel533/Mybatis-Spring/

https://yq.aliyun.com/articles/47349?spm=5176.100239.blogrightarea47348.29.iXyFRk   Hibernate 性能优化法则
启用 Hibernate 数据统计策略，用来做优化前后的数据对比。
将 hibernate.generate_statistics置为true，日志级别org.hibernate.stat置为DEBUG，Hibernate 会收集内部统计数据，比如查询的性能、缓存命中情况等。


http://wiki.jikexueyuan.com/project/mybatis-in-action/code-generation-tool.html
http://zacard.net/2015/09/09/mybatis-generator/
http://blog.csdn.net/isea533/article/details/50359390
http://samchu.logdown.com/posts/280094-mybatis-and-springboot-integration
https://yq.aliyun.com/articles/5831  Spring Boot MyBatis 通用Mapper插件集成
http://7player.cn/2015/08/30/%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91%E5%9F%BA%E4%BA%8Espringboot-mybatis%E5%AE%9E%E7%8E%B0springmvc-web%E9%A1%B9%E7%9B%AE/
https://segmentfault.com/a/1190000004275305
http://wuyishch.github.io/2016/01/14/SpringBoot%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BASpring%E5%BA%94%E7%94%A8/
https://github.com/abelmyba533/Mapper
https://github.com/pagehelper/Mybatis-PageHelper


@Transactional(propagation = Propagation.REQUIRED, readOnly = false, rollbackFor = Exception.class)

SELECT counter_field FROM child_codes FOR UPDATE;
UPDATE child_codes SET counter_field = counter_field + 1;
如果事务A先获得了某行的写共享锁，那么事务B就必须等待事务A commit或者roll back之后才可以访问行数据。

@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
 DefaultTransactionDefinition def = new DefaultTransactionDefinition();
 def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
 TransactionStatus status = transactionManager.getTransaction(def);
transactionManager.commit(status);
transactionManager.rollback(status);
http://openwares.net/java/spring_mybatis_transaction.html


http://haohaoxuexi.iteye.com/blog/1338557
http://zhuyuehua.iteye.com/blog/1717525
    <select id="findUserListByIdList" parameterType="java.util.ArrayList" resultType="User">
		select * from user user
		<where>
			user.ID in (
               <foreach item="guard" index="index" collection="list"	separator=","> #{guard} </foreach>
			)
		</where>
	</select> 