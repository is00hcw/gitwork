http://rerun.me/
https://blog.yuanbin.me/posts/2015/08/Akka-Notes-Actor-Messaging.html
http://www.algorithmdog.com/akka-usage-getstarted    Akka 使用系列之一: 快速入门
https://github.com/billryan/akka_notes
http://blog.jasonding.top/2016/08/08/Developer%20Kits/%E4%BD%BF%E7%94%A8maven%E6%9E%84%E5%BB%BAscala%E9%A1%B9%E7%9B%AE/
创建Maven工程，勾选右侧的Create from archetype选项，然后选中下方的scala-archetype-simple选项   右键Project，点击Add FrameWork Support，在打开的栏框中添加Scala支持
a.apply(x)则可以简化为a(x)  a.update(x,y)简化为a(x)=y

http://www.jianshu.com/p/d4f426ad11ba   java与scala混合编程打包
http://www.slideshare.net/fujohnwang/scala-thegoodparts
http://afoo.me/posts/2015-07-21-scala-developers-springboot-guide.html   Scala开发者的SpringBoot快速入门指南
https://my.oschina.net/yangbajing/blog/717763  写给Java程序员的Scala入门教程
https://github.com/helloscala/spring-boot-scala
https://github.com/yangbajing/play-seed  
https://my.oschina.net/yangbajing/blog/756191  Java/Scala互操作实践 1：基础操作

https://my.oschina.net/yangbajing/blog/107745  sbt  https://github.com/CSUG/real_world_scala/blob/master/02_sbt.markdown
http://colobu.com/2016/01/04/Scala-magic-functions/   Scala 魔法函数
http://colobu.com/2015/07/02/Scala-Collections-Tips-and-Tricks/



http://ibruce.info/2014/12/02/hello-colossus/   微服务框架 Colossus
http://ibruce.info/2014/10/23/zookeeper/ 

http://docs.scala-lang.org/cheatsheets/
http://colobu.com/2015/02/26/simple-scala-akka-actor-examples/
http://alvinalexander.com/scala/simple-akka-actors-remote-example
http://colobu.com/2015/01/14/Scala-Quick-Start-for-Java-Programmers/
http://colobu.com/2015/07/02/Scala-Collections-Tips-and-Tricks/
https://github.com/spray/spray-template/
http://my.oschina.net/FengJ/blog/228272
http://www.ibm.com/developerworks/cn/java/j-jvmc5/index.html  使用 Akka 执行异步操作


http://doc.mbalib.com/view/0dcb54987f65e5c7ee26e6db00398e26.html  akka微服务实践
https://my.oschina.net/yangbajing/blog/536205  Akka实战：构建REST风格的微服务
http://www.cnblogs.com/xinsheng/p/4615515.html  akka cluster 初体验
https://my.oschina.net/FengJ/blog/228272  Spray.io搭建Rest服务
http://www.smartjava.org/content/first-steps-rest-spray-and-scala
https://github.com/DanielaSfregola/quiz-management-service/
Akka Http是一个完整的server和client端HTTP开发栈，基于akka-actor他akka-stream。


默认加载classpath下的application.conf,application.json和application.properties文件。通过ConfigFactory.load()加载。只能加载src/main/resources目录下的application.conf文件
val c = ConfigFactory.parseFile(new File("*****.conf"))


http://www.tuicool.com/articles/U3Abe2A  sbt加速下载
http://my.oschina.net/u/915967/blog/146746
https://github.com/mpeltonen/sbt-idea
resolvers += "Sonatype snapshots" at "https://oss.sonatype.org/content/repositories/snapshots/"
addSbtPlugin("com.github.mpeltonen" % "sbt-idea" % "1.7.0-SNAPSHOT")
sbt gen-idea

addSbtPlugin("com.earldouglas" % "xsbt-web-plugin" % "0.9.0") 启动web服务器
addSbtPlugin("com.github.mpeltonen" % "sbt-idea" % "1.7.0-SNAPSHOT")前面提到的sbt-idea插件

http://blog.csdn.net/oopsoom/article/details/38363369?utm_source=tuicool     scala eclipse sbt 应用程序开发
https://github.com/typesafehub/sbteclipse
https://github.com/mpeltonen/sbt-idea
addSbtPlugin("com.github.mpeltonen" % "sbt-idea" % "1.6.0")
addSbtPlugin("com.typesafe.sbteclipse" % "sbteclipse-plugin" % "4.0.0")
新建变量名：SBT_OPTS，值为 -Dsbt.global.base=E:\sbt_ivy\.sbt -Dsbt.ivy.home=E:\sbt_ivy\.ivy2
http://blog.csdn.net/suqier1314520/article/details/41775905
http://8liang.cn/intellijidea-install-scala-plugin-create-with-sbt-project/
http://twitter.github.io/scala_school/zh_cn/basics.html
http://twitter.github.io/scala_school/zh_cn/coll2.html

https://www.cs.helsinki.fi/u/wikla/OTS/Sisalto/examples/
http://learnxinyminutes.com/docs/scala/
http://twitter.github.io/scala_school/zh_cn/index.html
http://twitter.github.io/effectivescala/index-cn.html
http://jasonding1354.github.io/2015/05/26/Scala/%E3%80%90Scala%E3%80%91Scala%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%88%9D%E6%8E%A2/
http://jasonding1354.github.io/2015/06/26/Scala/%E3%80%90Akka%E3%80%91Actor%E6%A8%A1%E5%9E%8B%E6%8E%A2%E7%B4%A2/   akka模型
一个Actor是一个容器，它包含了 状态，行为，一个邮箱，子Actor和一个监管策略。所有这些包含在一个Actor Reference里。
http://jasonding1354.github.io/2015/05/28/Spark/%E3%80%90Spark%E3%80%91%E9%85%8D%E7%BD%AESpark%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83/  sbt

http://scalatutorials.com/tour/
https://github.com/adambard/learnxinyminutes-docs

http://www.csdn.net/article/1970-01-01/2822770
https://github.com/spray/spray
https://github.com/wandoulabs/spray-socketio
http://akka.io/downloads/

http://ibruce.info/2014/04/06/hello-spray/
http://ibruce.info/2014/05/20/hello-akka/
http://ibruce.info/2014/12/02/hello-colossus/
http://my.oschina.net/u/580483/blog/119754
http://www.gtan.com/akka_doc/
http://www.iteblog.com/archives/1156

http://netcomm.iteye.com/blog/2080440  Gossip协议


http://my.oschina.net/FengJ/blog/228272
http://my.oschina.net/FengJ/blog/261224  spring
http://pivotallabs.com/spring-4-mvc-scala/

http://beike.iteye.com/blog/1575296  sbt
http://my.oschina.net/u/580483/blog/104091
http://www.scala-sbt.org/release/docs/Community-Plugins.html
SBT有个工作目录（默认位于${user.home}/.sbt）
SBT是利用Apache Ivy来管理依赖的，于是又有一个ivy缓存目录（默认位于${user.home}/.ivy2）
只需在环境变量中添加一个变量SBT_OPTS，值为 -Dsbt.global.base=D:\dev\sbt\.sbt -Dsbt.ivy.home=D:\dev\sbt\.ivy2
https://github.com/mpeltonen/sbt-idea
https://github.com/typesafehub/sbteclipse

Scala for Java Developers
http://pan.baidu.com/s/1mg3hRDm

http://www.importnew.com/3240.html
var willKnowLater:String = _     // default value
val first :: rest = List(1, 2, 3)  // 分解

 val 声明是不可变的，var 声明是可修改的
// 三个双引号可以使字符串跨越多行，并包含引号
字符串改写：留意前缀 "s"     s"My second daughter is ${a(0) - a(2)} years old."
def functionName(args...): ReturnType = { body... }    return 关键字的省略。 在 Scala 中， 函数代码块最后一条表达式就是返回值。 
匿名函数是这样的：(x:Int) => x * x
val sq: Int => Int = x => x * x
val addOne: Int => Int = _ + 1
val a = Array(1, 2, 3, 5, 8, 13)  // a(0)
val m = Map("fork" -> "tenedor", "spoon" -> "cuchara", "knife" -> "cuchillo")   // m("fork")
(a, 2, "three")  // 要读取元组的元素，使用 _._n，n是从1开始的元素索引
Scala 文件允许的顶级结构是：  - objects classes case classes traits
构造器参数在类名后声明，初始化在类结构体中完成。class Dog(br: String) {  // 构造器代码在此
抽象方法是没有方法体的方法。
"object" 关键字创造一种类型和该类型的单例。 注意 case 类不需要使用 "new" 关键字
List(1, 2, 3) map (x => x + 10)
// 如果匿名函数只有一个参数可以用下划线作为变量
List(1, 2, 3) map (_ + 10)
List(1, 2, 3) filter (_ > 2) // List(3)
aListOfNumbers foreach (x => println(x))
aListOfNumbers foreach println
// For 推导式   for { n <- s } yield sq(n)
// 导入所有子包  import scala.collection.immutable._
// 一条语句导入多个类 import scala.collection.immutable.{List, Map}
for(line <- Source.fromFile("myfile.txt").getLines())

Scala不能定义静态成员，而是代之定义单例对象(singleton object)。以object关键字定义。单例对象不带参数，而类可以。因为单例对象不是用new关键字实例化的，所以没机会传递给它实例化参数。每个单例对象都被实现为虚拟类(synthetic class)的实例
当单例对象与某个类共享同一个名称时，它就被称为是这个类的伴生对象(companion object)。类和它的伴生对象必须定义在同一个源文件中。类被称为是这个单例对象的伴生类(companion class)。类和它的伴生对象可以互相访问其私有成员。
我们通常将伴生对象作为工厂使用。
http://jasonding1354.github.io/2015/05/26/Scala/%E3%80%90Scala%E3%80%91%E5%8D%95%E4%BE%8B%E5%AF%B9%E8%B1%A1%E4%B8%8E%E4%BC%B4%E7%94%9F%E5%AF%B9%E8%B1%A1/


http://zhangyi.gitbooks.io/akka-in-action/content/actor.html
http://blog.csdn.net/pengyanhong/article/details/17112177   
http://www.nyankosama.com/2015/04/03/java-goroutine/

https://pavelfatin.com/scala-collections-tips-and-tricks/
http://zhuanlan.zhihu.com/guagua/20087542

FileBasedMailbox – backed by a journaling transaction log on the local file system
RedisBasedMailbox – backed by Redis
ZooKeeperBasedMailbox – backed by ZooKeeper
MongoBasedMailbox – backed by MongoDB
http://doc.akka.io/docs/akka/2.0/modules/durable-mailbox.html

Lookup : used to look up an actor on a remote node with actorSelection(path)
Creation : used to create an actor on a remote node with actorOf(Props(...), actorName)

akka
http://blog.madhukaraphatak.com/simple-akka-remote-example/
http://www.csdn.net/article/2014-12-17/2823174
https://github.com/comsysto/akka-lab
http://rerun.me/2014/09/19/akka-notes-actor-messaging-1/
http://www.sharkdtu.com/archives/278
http://www.csdn.net/article/2014-12-17/2823174
http://zhuanlan.zhihu.com/guagua/20009659
http://udn.yyuap.com/doc/akka-doc-cn/2.3.6/scala/book/chapter2/05_actor_references_paths_and_addresses.html

metrics
http://colobu.com/2014/08/08/Metrics-and-Spring-Integration/
http://wuchong.me/blog/2015/08/01/getting-started-with-metrics/
https://github.com/grafana/grafana
http://hanzheng.github.io/tech/2014/11/06/monitor-massive-jvm-cluster.html
http://metrics.dropwizard.io/3.1.0/getting-started/
http://jerrypeng.me/2014/07/04/server-side-java-monitoring-ganglia/
https://github.com/Netflix/servo

cluster
https://tersesystems.com/2014/06/25/akka-clustering/
http://blog.kamkor.me/Akka-Cluster-Load-Balancing/
http://kamon.io/integrations/akka/actor-router-and-dispatcher-metrics/
http://www.cakesolutions.net/teamblogs/akka-clustering-and-remoting-the-experiment
http://doc.akka.io/docs/akka/snapshot/scala/cluster-usage.html
http://www.typesafe.com/activator/template/akka-sample-cluster-scala
https://tersesystems.com/2014/06/25/akka-clustering/
http://www.warski.org/blog/2014/11/clustering-reactmq-with-akka-cluster/

def main(args: Array[String])
system.scheduler.scheduleOnce
val config = context.system.settings.config
ConfigFactory.parseString("akka.scheduler.tickduration= 1ms")
akka://System@host:port/user/Plane/Controls/
if (doesNotExist == context.actorFor("/user/this/actor/does/not/exist") )
override def preStart(): Unit ={
override def postStop(): Unit ={
override val supervisionStrategy = OneForOneStrategy(5, 1 minute) {
context.watch(context.actorOf(Props[SomeOtherActor]))
akka.actor.defaultdispatcher.throughput = 20
provider = "akka.remote.RemoteActorRefProvider"
transport = "akka.remote.netty.NettyRemoteTransport"

Await.result(future, timeout.duration).asInstanceOf[PiApproximation]
implicit val timeout = Timeout(3 seconds) 
val echo = system.actorOf(Props[EchoActor], "echo1")
val future = echo.ask("some message")
future.onComplete { 
       case Failure(_)   => //handle failure 
       case Success(msg) => //handle success 
}
Await.ready(future, timeout.duration)

val dispatcherId = CallingThreadDispatcher.Id
val props = Props[Greeter].withDispatcher(dispatcherId) 

system.eventStream.subscribe(testActor, classOf[UnhandledMessage])
greeter ! "World"
expectMsg(UnhandledMessage("World", system.deadLetters, greeter))

case game @ Game(_, tickets) =>
     nextAgent ! game.copy(tickets = tickets.tail)

An actor can be stopped using the stop method on the ActorSystem and ActorContext objects, or by sending a PoisonPill message to an actor.
The preStart ,preRestart , postRestart and postStop hooks enable an actor to initialize and cleanup state and control and restore its state after a crash.
The top level actors in an application are created under the /user path and supervised by the user guardian . 
Every actor has a default supervisor strategy which can be overridden by implementing the supervisorStrategy method. There are two predefined strategies available in the SupervisorStrategy object; the defaultStrategy and the stoppingStrategy
The OneForOneStrategy determines that child actors will not share the same fate, only the crashed child will be decided upon by the Decider. The other option is to use an AllForOneStrategy which uses the same decision for all
child actors even if only one crashed.

A Future is a placeholder for a function result that will be available at some point in the future.
The future { ...} is shorthand for a call to the apply method on the Future object with the code block as its only argument, Future.apply(codeblock).
you need to provide an implicit ExecutionContext to use futures.  import scala.concurrent.Implicits.global   The ExecutionContext is an abstraction for executing tasks on some thread pooling implementation.
ExecutionContext uses a if it is allowed according ForkJoinPool to security policy and otherwise falls back to a ThreadPoolExecutor.

for((route, advice) <- futureRoute.zip(futurePublicTransport); travelAdvice = TravelAdvice(route, advice) ) yield info.copy(travelAdvice = Some(travelAdvice))

requestContext.complete(StatusCodes.OK, events)
self ! PoisonPill

_system.actorOf(Props[MsgEchoActor].withDispatcher("my-dispatcher"))  // fork join pool， mailbox
val router = system.actorOf(Props[MyActor].withRouter(RoundRobinRouter(nrOfInstances = 5)) , name = "myRouterActor")

One-For-One strategy means the supervision strategy is applied only to the failed child. 
All-For-One strategy means that the supervision strategy is applied to all the actor siblings as well
akka.actor.OneForOneStrategy akka.actor.AllForOneStrategy 
decider: This is the function defined where the Throwable are mapped to the directives that allow us to specify the actions – resume(), restart(), stop(), or escalate()


val myActor = system.actorOf(Props(new MyActor(10)), name = "myActor")
The call-by-name block passes a code within the block to the callee. Each time the callee accesses the parameter, the code block is executed and the value is calculated.
def callByName[T](block: => T) = {}  
def callByValue[T](block: T) = {}
http://www.jianshu.com/p/93eefcb61d4f    val定义值时，会做call-by-value操作，def则会做call-by-name操作。
http://sighingnow.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/scala_coursera_notes.html   Scala 公开课笔记

def selectDynamic(fieldName: String)   动态调用未知方法

List size和元素不变，head tail ，  ListBuffer可变
Array size不变，元素可变， Vector不变， ArrayBuffer可变
An IndexedSeq indicates that random access of elements is efficient
A LinearSeq implies that the collection can be efficiently split into head and tail components


kafka      gradle idea    gradle eclipse
http://blog.csdn.net/hengyunabc/article/details/44158617  kafka manager安装
http://www.bubuko.com/infodetail-695974.html              
http://www.yrom.net/blog/2015/02/07/change-gradle-maven-repo-url/
http://www.geekcome.com/content-10-2336-1.html
gradle cleanIdea idea
 MAVEN_OPTS="-Xmx2g -XX:MaxPermSize=512M -XX:ReservedCodeCacheSize=512m"
 
http://www.infoq.com/cn/articles/scala-technology/  快速了解Scala技术栈
http://my.oschina.net/jingxing05/blog/290567?p=1
http://alvinalexander.com/scala/simple-scala-akka-actor-examples-hello-world-actors
http://code.csdn.net/news/2823174
http://www.reactive.io/tips/2014/03/28/getting-started-with-actor-based-programming-using-scala-and-akka/


libraryDependencies ++= Seq
addSbtPlugin("com.github.mpeltonen" % "sbt-idea" % "1.6.0")
http://segmentfault.com/a/1190000002484978  sbt
def main(args: Array[String]) {

List不变集合 实现类scala.Nil class and scala.::   操作合并::, 添加元素:+
case f :: s :: rest => List(f, s)
The expression 10 to 20 is 10.to(20)
catch { case e: IllegalArgumentException => e.getMessage }
def this() = this("127.0.0.1", 27017)3
def age_=(newAge: Int) = _age = newAge
To specify a top-level package you have to use _root_
put your package object in a separate file, called package.scala


spring
http://www.typesafe.com/activator/template/akka-scala-spring
https://github.com/ouertani/akka-scala-spring
http://www.tuicool.com/articles/uMZn6fI
http://my.oschina.net/fir01/blog/509893?fromerr=6PFUPJO6