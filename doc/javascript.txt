http://www.webpackbin.com/
http://www.es6fiddle.net/
http://www.typescriptlang.org/play/

npm install -g generator-webpack-es6-cssnext
npm install es6-promise whatwg-fetch --save
npm install --save isomorphic-fetch es6-promise
https://segmentfault.com/a/1190000006095018
npm install -g create-react-app

https://segmentfault.com/a/1190000006178770  入门 Webpack，看这篇就够了
webpack --progress --colors --watch  --display-error-details
webpack-dev-server --progress --colors

http://www.ruanyifeng.com/blog/2016/11/javascript.html   JavaScript 全栈工程师培训教程 
https://github.com/ruanyf/jstraining


View 就是 React 组件，而 Model 是 flux 中的 store。 Store 就是一个存储数据的对象，它会在 dispatch上注册自己感兴趣的事件。Dispatcher 是flux提供的一个全局的事件分发器，而 action 其实就是自定义的事件而已。
React的好处，比如说它的虚拟DOM可以被高效的渲染，比如说它的组件化使得项目结构非常清晰，代码复用非常容易，比如说它的数据管理机制也能让你清晰的知晓数据的状态
https://segmentfault.com/a/1190000004133844   《Head First JavaScript》读书笔记
https://zhangwang1990.gitbooks.io/reactenlightenment/content/%E5%88%9D%E6%8E%A2React.html  https://segmentfault.com/a/1190000006720893  reactjs系列
class HelloMessage extends React.Component
const HelloMessage = (props) => <div>Hello {props.name}</div>;
https://segmentfault.com/a/1190000006685370

react
https://my.oschina.net/chkui/blog/789871  React由0到1
https://zhangwang1990.gitbooks.io/reactenlightenment/content/react_props.html
http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html  React 技术栈系列教程
https://github.com/ruanyf/react-babel-webpack-boilerplate
http://www.ruanyifeng.com/blog/javascript/
http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html  Redux 入门教程
Reducer 是一个函数，它接受 Action 和当前 State 作为参数，返回一个新的 State。 store.dispatch方法会触发 Reducer 的自动执行。为此，Store 需要知道 Reducer 函数，做法就是在生成 Store 的时候，将 Reducer 传入createStore方法。
Reducer 函数最重要的特征是，它是一个纯函数。也就是说，只要是同样的输入，必定得到同样的输出。
return Object.assign({}, state, { thingToChange });  // 或者  return { ...state, ...newState };
const { type, payload } = action;
import { createStore } from 'redux';
let { subscribe, dispatch, getState } = createStore(reducer);

npm run新建的这个 Shell，会将当前目录的node_modules/.bin子目录加入PATH变量
npm run install的默认值是node-gyp rebuild，前提是项目根目录下有binding.gyp文件。
npm restart是npm run stop && npm run restart && npm run start的简写
通过npm_package_前缀，npm 脚本可以拿到package.json里面的字段。   console.log(process.env.npm_package_name); 通过环境变量process.env对象，拿到package.json的字段值。如果是 Bash 脚本，可以用$npm_package_name和$npm_package_version取到这两个值。
npm 脚本还可以通过npm_config_前缀，拿到 npm 的配置变量，即npm config get xxx命令返回的值。  http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html
npm 模块仓库提供了一个查询服务，叫做 registry 。以 npmjs.org 为例，它的查询服务网址是 https://registry.npmjs.org/ 。这个网址后面跟上模块名，就会得到一个 JSON 对象，里面是该模块所有版本的信息。比如，访问 https://registry.npmjs.org/react，就会看到 react 模块所有版本的信息。
http://www.ruanyifeng.com/blog/2016/01/npm-install.html


babel http://www.ruanyifeng.com/blog/2016/01/babel.html

typescript
http://blog.csdn.net/lihongxun945/article/details/49999049  
interface  implements @Injectable()   var name:string;
Component 是Angular2的核心，相当于Angular1 中 Directive 和 Controller 的合体。 TypeScript 可以简单理解为 ES6 + Annotation + 强类型。
bootstrap(AppComponent, [HeroService]);其实这是一个简写，[HeroService] 等价于 [provide(HeroService, {useClass:HeroService})]; 也就是默认用同名的类来提供。
Pipe 是一个数据处理管道。主要作用就是对数据输出的时候进行一些格式化处理。{{ birthday | date | uppercase}}
https://github.com/lightningtgc/awesome-ng2

javascript OO
https://segmentfault.com/a/1190000002900676#articleHeader3    javascript OO  函数（constructor）、原型（prototype）、原型链（prototype chain）
prototype是函数的一个属性（每个函数都有一个prototype属性），这个属性是一个指针，指向一个对象。它是显示修改对象的原型的属性。
__proto__是一个对象拥有的内置属性（请注意：prototype是函数的内置属性，__proto__是对象的内置属性），是JS内部使用寻找原型链的属性。
每个被new实例化的对象都会包含一个__proto__ 属性，它是对构造函数 prototype 的引用。
所有构造器/函数的__proto__都指向Function.prototype，它是一个空函数（Empty function） 所有构造器都继承了Function.prototype的属性及方法。如length、call、apply、bind（ES5）。
在JS里，万物皆对象。方法（Function）是对象，方法的原型(Function.prototype)是对象。 所有对象的__proto__都指向其构造器的prototype    
总结：1.对象有属性__proto__,指向该对象的构造函数的原型对象。2.方法除了有属性__proto__,还有属性prototype，prototype指向该方法的原型对象。 
https://www.zhihu.com/question/34183746/answer/58068402
对象的内部原型(__proto__)和构造器的原型（prototype）的关系。  __proto__（隐式原型）与prototype（显式原型） 大多数浏览器都支持通过__proto__来访问。ES5中有了对于这个内置属性标准的Get方法Object.getPrototypeOf(). 
每一个函数在创建之后都会拥有一个名为prototype的属性，这个属性指向函数的原型对象。 显式原型的作用：用来实现基于原型的继承与属性的共享。
隐式原型指向创建这个对象的函数(constructor)的prototype 隐式原型的作用：构成原型链，同样用于实现基于原型的继承。 举个例子，当我们访问obj这个对象中的x属性时，如果在obj中找不到，那么就会沿着__proto__依次查找。
JS中对象被创建的方式，一眼看过去似乎有三种方式：（1）对象字面量的方式 （2）new 的方式 （3）ES5中的Object.create() 但是我认为本质上只有一种方式，也就是通过new来创建。
既然是构造函数那么它就是Function（）的实例，因此也就指向Function.prototype,比如 Object.__proto__ === Function.prototype
Array.prototype.__proto__ === Object.prototype //true，或者也可以这么理解，所有的内建对象都是由Object()创建而来。

Each constructor is a function that has a property named “prototype” that is used to implement prototype-based inheritance and shared properties
Every object created by a constructor has an implicit reference (called the object’s prototype) to the value of its constructor’s “prototype”

Object.__proto__ === Function.prototype  // true
console.log(Foo.prototype.constructor === Foo); // true
console.log(typeof Function.prototype) // function
console.log(Function.prototype.__proto__ === Object.prototype) // true   这说明所有的构造器也都是一个普通JS对象，同时它也继承了Object.prototype上的所有方法：toString、valueOf、hasOwnProperty等。
Object.prototype.__proto__ === null  // true


es6 (generator/yeild)   es7 ( async/await)
ES6将一个文件视为一个模块，上面的模块通过 export 向外输出了一个变量。一个模块也可以同时往外面输出多个变量。 export {name, age};   import {name, age} from './test.js'
https://segmentfault.com/a/1190000002904199#articleHeader4



http://www.oschina.net/news/77853/how-about-learn-javascript-at-2016   在 2016 年学 JavaScript 是一种什么样的体验
https://github.com/hustcc/onfire.js/blob/master/README_zh.md  事件发布订阅

type="text/defered-script"   http://www.tuicool.com/articles/VzINj2f

当浏览器遇到 JavaScript 时，它可能不知道这里的 JS 是否要改变 DOM。因此，它不得不假定它会改变，然后它阻止渲染，直到 JavaScript 完成了执行过程。如果增加了 async 标签，相当于向浏览器保证，该 JS 对于页面不是关键的，因此浏览器可以继续渲染，而不必等待 JS 执行完成。
这就是 TTFB (Time To First Byte) 注1 的由来。当浏览器发起一个页面请求时，它就处于等待响应的状态。TTFB 代表了它需要多长时间才能收到第一个响应的字节。这个时间不但代表了你的服务器产生响应所需要的时间，而且意味着经过线缆传输所需要的时间。

http://qmuiteam.com/web/index.html  腾讯ui
http://www.oschina.net/p/eruda   手机网页前端调试面板 Eruda
http://bookshadow.com/weblog/2014/09/26/jquery-blockui-js-introduction/    https://github.com/malsup/blockui  弹出层 遮盖
http://layer.layui.com/  弹出层
http://amazeui.org/getting-started/collections  开源方案
https://imququ.com/post/letsencrypt-certificate.html  Let's Encrypt，免费好用的 HTTPS 证书
http://www.jianshu.com/p/b3cc964c983d   Apache 中启用 HTTP/2
https://imququ.com/post/intro-to-nghttp2.html  使用 nghttp2 调试 HTTP/2 流量
http://codethoughts.info/javascript/2015/09/13/getting-started-with-vue-js/   Vue.js 初体验
http://codethoughts.info/javascript/2015/08/23/react-js-hands-on/   React.js 初体验
http://codethoughts.info/javascript/2015/07/18/javascript-bdd-with-mocha-chai-sinon/   用 Mocha/Chai/Sinon 测试 JavaScript 代码
另外一个比较流行的 JavaScript BDD测试框架是Jasmine。它的思路和 Mocha 不同，是一个完备的测试框架，内置了断言库，Mock/Stub 等高级功能

http://www.alloyteam.com/2016/03/es6-front-end-developers-will-have-to-know-the-top-ten-properties/   前端开发者不得不知的ES6十大特性  
https://github.com/azat-co/cheatsheets/tree/master/es6

http://www.javascripture.com/Date     api参考
http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html  XMLHttpRequest Level 2 使用指南

http://z42.readthedocs.org/zh/latest/frontend/html.html#id4
https://github.com/amazeui/starter-kit  
http://framework7.taobao.org/  
http://www.idangero.us/template7/#.Vm6IxOx96_4  模板
https://github.com/twbs/ratchet/     http://cnratchet.com/components/
http://m.sui.taobao.org/getting-started/  http://m.sui.taobao.org/demos/
http://dev.dcloud.net.cn/mui/

http://h5.baidu.com/user  百度搞的h5工具   易企秀或者兔展

目前比较流行组件规范有 AMD 、CommonJs 和 UMD 三种, AMD 和 UMD 居多，而我们的选择是 CommonJs 规范与 node.js 保持一致。 因为它最简单，且实用，学习成本最低。
http://davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd/
http://web.jobbole.com/81941/  web component
http://www.w3ctech.com/topic/109

像素对比比较出名的工具是PhantomCSS。 PhantomCSS结合了 Casperjs截图和ResembleJs 图像对比分析。
http://fex.baidu.com/blog/2015/07/front-end-test/   前端自动化测试探索
http://fex.baidu.com/blog/2014/05/light-component/   跨端组件实践 - 移动时代的前端
http://www.alloyteam.com/2016/05/super-small-web-gesture-library-alloyfinger-released/   手势库
http://www.alloyteam.com/2016/05/mobile-web-development-debugging-tools-alloylever-introduced/   移动web开发调试工具AlloyLever介绍
https://github.com/WechatFE/vConsole

test
http://www.oschina.net/p/dagger  Dagger是网易杭州研究院QA团队开发的一个轻量级、运行稳定的WebUI自动化测试框架，主要基于Selenium及TestNg可以认为是对Selenium进行二次封装的一个框架

加密库
http://www.oschina.net/p/crypto-js
https://github.com/travist/jsencrypt
https://github.com/bitwiseshiftleft/sjcl

chrome
http://www.xuanfengge.com/chrome-developer-debugging-tool-tool-tips.html
http://wiki.jikexueyuan.com/project/chrome-devtools/command-line-api-reference.html
在 console 中输入代码的最后一行加上 //@ sourceURL=filename.js, 会在 Scripts 面板中有个叫 filename.js 的文件, 然后他就和外部 js 文件一样了，又可以断点调试了（如果没发现，可以再调试面板中CTRL+O，输入文件名即可）。
copy(str) 复制 str 到剪切板, 在断点时复制变量时有用
monitorEvents(object[, types])/unmonitorEvents(object[, types]) 当 object 上 types 事件发生时在 console 中输出 event 对象
$$('figure') // Returns an array of all figure elements in the document.
$x('html/body/p') // Returns an array of all paragraphs in the document body.
console.count(label)  这个函数输出 count()在同一行用同一个标签调用的次数。
console.timeStamp([label])这个方法在记录期间增加了一个事件到时间轴。这可以让你直观地在时间戳上关联生成的代码到其他事件上
console.trace(object) 输出从这个方法被调用的那个点的栈追踪路径，包括在 Javascript 源代码中指向特定行的链接。
monitor(function)当这个方法被调用时，一个消息被输出到控制台，来表示函数名和函数被调用时传入的参数。
inspect(object/function)在恰当的面板中打开并选择指定元素或指定对象
getEventListeners(object)返回注册在指定对象上的注册的事件监听器。


zepto  zepto中并没有fadeIn和fadeOut
http://www.cnblogs.com/yexiaochai/p/4219523.html
http://github.e-sites.nl/zeptobuilder/
http://blog.csdn.net/whu_zhangmin/article/details/41863905   npm编译打包自定义的zepto模块
http://blog.csdn.net/whu_zhangmin/article/details/41845343  click 事件有 200~300 ms 的延迟，为了更快的响应，最好用 Zepto 提供的 tap 事件
:text :checkbox :first 等等在 jQuery 里面很常用的选择器，Zepto 不支持！原因很简单，jQuery 通过自己编写的 sizzle 引擎来支持 CSS 选择器，而 Zepto 是直接通过浏览器提供的document.querySelectorAll 接口


http://www.sitepoint.com/jquery-custom-events/ http://blogs.sitepointstatic.com/examples/tech/custom-events/jquery.html
$(document).on("newMessage", newMessageHandler);
$.event.trigger({type: "newMessage",	message: msg,	time: new Date() });

http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html  原型
http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html
$("#result").load(form.attr("action"), form.serialize());

http://my.oschina.net/oneapmofficial/blog/516923  监控
https://github.com/BetterJS/badjs-report    js上报
http://phpor.net/blog/post/1130
var t = document.createElement('img');
var e_info=encodeURIComponent(msg+'|_|'+url+'|_|'+line+'|_|'+window.navigator.userAgent);
t.src = 'http://badjs.qq.com/cgi-bin/js_report?bid=104&mid=195279&msg='+e_info+'&v='+Math.random();

https://github.com/clappr/clappr  播放器
https://github.com/matthieua/WOW  动画
http://touch.code.baidu.com/    touch
https://github.com/atom/electron  跨平台desktop
https://github.com/flatiron/director#client-side-routing  director.js实现的前端路由 http://www.tuicool.com/articles/QBFfYjb
https://imququ.com/post/cross-origin-resource-sharing.html  跨域数据交互解决方案
https://imququ.com/post/promises-when-js.html   异步编程：When.js快速上手
http://isux.tencent.com/play-with-html5-optimize.html  玩转HTML5移动页面(优化篇)
http://web.jobbole.com/84285/#comment-95949   使用Flexible实现手淘H5页面的终端适配
http://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions
https://github.com/amfe/article/issues/5  写给前端面试者
http://www.cnblogs.com/Wayou/p/html5_web_api_queryselector.html   HTML5向Web API新引入了document.querySelector以及document.querySelectorAll


如果你设置cookie的时候，设定了cookie的访问域名为一个顶级域名，则可以达到几个子域名共享cookie的效果。
有些重要信息，如用户的唯一标识，建议给这些cookie字段加上HttpOnly标识。加上了这个标识的话，我们的客户端js是无法读到与写入加了标识的cookie字段的，这样非常安全。
如果设定了cookie的超时时间的话，那么cookie将在到期的时候失效。如果没有设定，那么cookie就是session级别的啦。 cookie的session是，在未关闭浏览器的情况下，所有的tab级别的页面或新开，或刷新，均属于一个session
建议存储一些同步访问页面的时候必须要被带到服务端的信息。比如，网站的用户登录信息。这个是在访问时必须要在服务端获取的信息，所以种在cookie里面很必要。
不同于cookie，sessionStorage的访问限制更高一些，只有当前设定sessionStorage的域下才能访问，而且不同的两个tab之间不能互通。  证明sessionStorage里面的session，并不同于cookie，是以tab为级别的session。
http://mp.weixin.qq.com/s?__biz=MzIwNjQwMzUwMQ==&mid=2247484013&idx=1&sn=270295c8a6fe604d22e71d8087297d35#rd

阿里
http://thx.github.io/
https://github.com/thx/chartx  https://github.com/canvax/canvax
https://github.com/thx/RAP  可视化接口管理工具 通过分析接口结构，动态生成模拟数据，校验真实接口正确性
http://d2forum.alibaba-inc.com/assets/ppt/%E6%8B%A5%E7%BF%A0%E5%B1%B1%E5%BA%84/%E9%9C%8D%E9%9B%8D-%E6%8E%A5%E5%8F%A3%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7RAP.pdf?spm=a26qs.7821685.0.0.suRWEQ&file=%E9%9C%8D%E9%9B%8D-%E6%8E%A5%E5%8F%A3%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7RAP.pdf

<head>中要添加如下内容：<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
来保证页面会按照设备的宽度进行渲染而不是使用虚拟画布。然后便可以使用响应式设计的相关技术，弹性盒子、媒体查询等，让页面适应设备宽度显示。

var foo = (12.4 / 4.13) | 0;//结果为3
var bar = ~~(12.4 / 4.13);//结果为3
!!将一个值方便快速转化为布尔值 !!window===true 
http://www.cnblogs.com/Wayou/p/things_you_dont_know_about_frontend.html  前端不为人知的一面--前端冷知识集锦
http://www.cnblogs.com/jscode/archive/2013/04/27/3572239.html   HTML5新特性之文件和二进制数据的操作


apply([thisObj[,argArray]])
bind的作用：改变了上下文的this   bind的返回值是函数
call([thisObj[,arg1[, arg2[,   [,.argN]]]]])
如果你在一个函数前面带上 new 关键字来调用，那么 js 会创建一个 prototype 属性是此函数的一个新对象，同时在调用这个函数的时候，把 this 绑定到这个新对象上。
在js 里，每个函数都有一个公共的 prototype —— Function，而这个原型自带有好几个属性和方法，其中就有这里困惑的 bind、call、apply 方法。
bind() 函数的参数跟 call() 一致，第一个参数也是绑定 this 的值，后面接受传递给函数的不定参数。 
 在未给出指定thisArg对象的情况下，null与undefined下this指向是全局对象，将是JS执行环境的全局变量。浏览器中是window，其它环境（如node）则是global。。ES5严格模式（ie6/7/8/9除外）则不再揣测，给call/apply传入的任何参数不再转换。
http://www.codeceo.com/article/javascript-bind-call-apply.html
http://www.cnblogs.com/snandy/archive/2012/03/01/2373243.html

Timeline面板提供两种查看方式：横条的是"事件模式"（Event Mode），显示重新渲染的各种事件所耗费的时间；竖条的是"帧模式"（Frame Mode），显示每一帧的时间耗费在哪里。
我们可以使用window.requestAnimationFrame()，让读操作和写操作分离，把所有的写操作放到下一次重新渲染。
window.requestIdleCallback()它指定只有当一帧的末尾有空闲时间，才会执行回调函数。只有当前帧的运行时间小于16.66ms时，函数fn才会执行。
它还可以接受第二个参数，表示指定的毫秒数。如果在指定 的这段时间之内，每一帧都没有空闲时间，那么函数fn将会强制执行。requestIdleCallback(fn, 5000);
http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html
http://www.mmtrix.com/evaluate/phone/testid/c197a02e111d7d859b9da1bc301c1056
undefined和null在if语句中，都会被自动转为false，相等运算符甚至直接报告两者相等。  http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html

http://blog.csdn.net/accountwcx/article/details/23523851   Base64编码将3个Byte共24Bit从高到低重新拆分成4部分每部分6Bit，分别为0x0~0x3f，对应字符为A~Z和a~z和0-9和+/，共64个。
Base64在谷歌、火狐浏览器都已经实现，调用方式很简单，window.atob是解码函数，把Base64编码转成字符串。window.btoa是编码函数，把字符串编码成Base64。不过谷歌和火狐浏览器实现的base64编码不支持中文
在众多Base64编码实现中，CryptoJS是最高效和全面的，CryptosJS是一个标准和安全的JavaScript加密算法库，实现了MD5、SHA、AES、DES、Base64等加密，其代码放在Google上托管，项目地址是https://code.google.com/p/crypto-js/。当然CryptoJS的Base64对中文也没有很好的支持。
http://qianduanblog.com/post/js-learning-34-en-decodeuri-en-decodeuricomponent-un-escape-btoa-atob.html
http://segmentfault.com/a/1190000000425169    ArrayBuffer



http://isux.tencent.com/css3/tools.html   css动画预览
http://code.ciaoca.com/jquery/lazyload/    延迟加载图片
https://github.com/callmecavs/layzr.js
http://alloyteam.github.io/Spirit/modules/Standard/index.html  移动开发规范概述
https://github.com/AlloyTeam/Mars
http://www.gbtags.com/gb/share/3701.htm  
http://www.mexiqq.com/2014/07/17/localForage%E2%80%94%E2%80%94%E8%BD%BB%E6%9D%BE%E5%AE%9E%E7%8E%B0-Web-%E7%A6%BB%E7%BA%BF%E5%AD%98%E5%82%A8/    localForage  离线存储

https://lifesinger.wordpress.com/2011/07/24/online-local-debug/  在线本地调试大观
http://isux.tencent.com/h5-performance.html  移动H5前端性能优化指南
http://www.alloyteam.com/2014/03/front-end-data-monitoring/  错误监控上报
http://www.75team.com/archives/170 
http://fex.baidu.com/blog/2014/05/build-performance-monitor-in-7-days/
https://lifesinger.wordpress.com/2011/09/23/bigrender-for-taobao-item/   bigrender

http://blog.codinglabs.org/articles/how-web-analytics-data-collection-system-work.html  网站统计中的数据收集原理及实现

http://segmentfault.com/a/1190000002804472   github上值得关注的前端项目
http://heeroluo.net/article/detail/111  了解模块化开发
http://caibaojian.com/handlebars-js.html
http://heeroluo.net/article/detail/112/monitor-events-through-developer-tools  monitorEvents(document.body, 'click');
通过 seajs.cache，可以查阅当前模块系统中的所有模块信息。比如，打开 seajs.org，然后在 WebKit Developer Tools 的 Console 面板中输入 seajs.cache， https://github.com/seajs/seajs/issues/263

http://segmentfault.com/a/1190000002494005  backbone  hello world
http://segmentfault.com/a/1190000002386651

http://toutiao.com/i5361810651/?group_flags=0  手机网站开发注意事项

console.log(typeof myFunc === "function");
function isArray(value) {return Object.prototype.toString.call(value) === "[object Array]";}
Array.isArray() method is implemented in Internet Explorer 9+, Firefox 4+, Safari5+, Opera 10.5+, and Chrome.
if ("count" in object)
if (object.hasOwnProperty("related"))  // Good for all non-DOM objects

http://www.idangero.us/sliders/swiper/api.php
http://www.jqcool.net/jquery-swiper.html

http://docs.mobiscroll.com/2-14-3/

bower
使用bower init 命令来创建bower.json文件
我们可以用下面的命令安装twitter bootstrap并更新bower.json文件：
$ bower install bootstrap --save
http://segmentfault.com/a/1190000000349555
http://blog.fens.me/nodejs-bower-intro/

特效
https://github.com/paulkinzett/toolbar
http://nick-jonas.github.io/threesixtyjs/ 
https://github.com/marcuswestin/store.js

angularjs
http://segmentfault.com/blog/news/1190000000350125
http://blog.csdn.net/dc_726/article/details/17010325   图灵AngularJS入门教程

best pratice
http://www.ituring.com.cn/article/64950    给JavaScript初学者的24条最佳实践
http://www.ituring.com.cn/article/25069   前端开发技术的发展

Grunt是基于Node.js的项目构建工具
http://tgideas.qq.com/webplat/info/news_version3/804/808/811/m579/201307/216460.shtml


Yeoman则直接给我们提供了一套完全自动化的工具，集合Grunt、bower、yo，自动编译压缩、处理图片、livereload等等
http://www.jianshu.com/p/47aa09a2910d
http://www.css88.com/archives/4931

模板引擎
http://www.cnblogs.com/kissdodog/archive/2013/09/03/3299174.html   TrimPath
http://tangram.baidu.com/BaiduTemplate/
https://github.com/aui/artTemplate

logger
http://log4javascript.org/docs/quickstart.html
http://www.cnblogs.com/gossip/p/3845011.html

异步
http://www.ruanyifeng.com/blog/2011/10/javascript_loading.html
http://blog.csdn.net/ma_jiang/article/details/7529584
http://wonko.com/post/painless_javascript_lazy_loading_with_lazyload
http://www.cnblogs.com/zhengyun_ustc/archive/2013/05/09/frontendoptimize.html
http://libs.useso.com/js/lazyload/2.0.3/lazyload-min.js
http://libs.useso.com/js/jquery.lazyload/1.9.1/jquery.lazyload.min.js


function loadFrame(openId){
	var fr = $("#deviceFrame");
	fr.load(function() { 
		$(this).height($(this).contents().height()); 
	});
	fr.attr("src", "http://xxxx?openid=" + openId) ;
	fr.show();
}

你可能会经常使用$(document).ready();或者$(function(){})，这都是使用了DOMContentLoaded事件。

http://caibaojian.com/jquery1-9-tutorial.html  jquery1.9删除的browser,live,die,sub,toggle的替换方法

http://www.csdn.net/article/2013-07-09/2816161  mobile framework
http://www.tuicool.com/articles/m63a2qU

http://ued.qunar.com/mobile/guide/mobile/2014/10/27/mobile-fe-dev-local-debugg.html  debug mobile
http://ued.qunar.com/mobile/guide/mobile/2014/10/27/mobile-fe-dev-remote-debugg.html

pjax
https://github.com/defunkt/jquery-pjax
http://www.welefen.com/use-ajax-and-pushstate.html
http://www.welefen.com/pjax-for-ajax-and-pushstate.html


单页面 Single Page Applications (SPAs) 
http://www.idangero.us/framework7/#.VYAwNdyqo7I
https://github.com/is00hcw/mobilebone
http://durandaljs.com/get-started.html   


http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html    MVC，MVP 和 MVVM 的图示
http://www.codeceo.com/article/10-best-javascript-lib-2015.html   
http://www.oschina.net/translate/event-based-programming-what-async-has-over-sync   基于事件的 JavaScript 编程：异步与同步
中介者模式 ， postal.js 库中用的即是这种方式     另外一些基于中介者模式传送消息的库有 amplify, PubSubJS, and radio.js。 
http://www.css88.com/archives/5656   盘点JavaScript里好用的原生API 

错误上报
http://www.css88.com/archives/5014   error
http://rapheal.sinaapp.com/2014/11/06/javascript-error-monitor/
http://developer.51cto.com/art/201508/488836.htm
https://github.com/fex-team/alogs


性能与监控
http://blog.jobbole.com/54495/   45个实用的JavaScript技巧、窍门和最佳实践
http://blog.csdn.net/it_man/article/details/12843295    览器的加载与页面性能优化
http://segmentfault.com/a/1190000000695819
http://tapir-dream.github.io/berserkJS/
http://wenku.baidu.com/link?url=pdnLT5YkjP3D-aMUgebdxKLSm0ZA_Zx7BlPGyDG8yTGgjSv0WICz07hPhz1wRSy7PLki2sHTmKgrKtzqNdbFVavAjwG-9NX-MBHMSyK7gDy
http://vdisk.weibo.com/s/Des0SwUIlPVp
http://fex.baidu.com/blog/2014/05/front_end-data/  
http://fex.baidu.com/blog/2014/03/fis-optimize/
http://fex.baidu.com/blog/2014/05/build-performance-monitor-in-7-days/
https://github.com/fex-team/interview-questions
http://blog.csdn.net/samxx8/article/details/30050513


coffeescript
http://coffee-script.org/
https://coffeescript-cookbook.github.io/


https://imququ.com/post/browser-doctor.html  一个浏览器诊断小工具

画图工具
http://www.devtalking.com/articles/gojs-simple-diagram/
http://gojs.net/latest/samples/index.html
http://c3js.org/examples.html

颜色选择
https://bgrins.github.io/spectrum/
https://github.com/PitPik/colorPicker  http://www.dematte.at/colorPicker/
http://raphaeljs.com/picker/
http://mjolnic.com/bootstrap-colorpicker/
http://johndyer.name/photoshop-like-javascript-color-picker/
https://www.script-tutorials.com/html5-color-picker-canvas/     把图片画到canvas 然后取像素值
http://www.bitrepository.com/color-pickers.html
https://github.com/ambethia/hsl-color-picker
https://github.com/DavidDurman/FlexiColorPicker


var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);

长连接 服务器推送  
http://my.oschina.net/jb2011/blog/716376
Comet技术实现模型1：基于 AJAX 的长轮询（long-polling）方式 。 使用 AJAX 实现“服务器推”与传统的 AJAX 应用不同之处在于：
服务器端会阻塞请求直到有数据传递或超时才返回。
客户端 JavaScript 响应处理函数会在处理完服务器返回的信息后，再次发出请求，重新建立连接。
当客户端处理接收的数据、重新建立连接时，服务器端可能有新的数据到达；这些信息会被服务器端保存直到客户端重新建立连接，客户端会一次把当前服务器端所有的信息取回。
Comet技术实现模型2：基于 Iframe 及 htmlfile 的流（streaming）方式
iframe 是很早就存在的一种 HTML 标记， 通过在 HTML 页面里嵌入一个隐蔵帧，然后将这个隐蔵帧的 SRC 属性设为对一个长连接的请求，服务器端就能源源不断地往客户端输入数据。