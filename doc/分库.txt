https://github.com/sogou-biztech/compass  Compass是搜狗商业平台研发部开发的一套轻量级的分布式数据库访问框架，支持单库、主从库读写分离、分库分表、从库负载均衡和HA等使用场景，并且在框架层面提供了主从反延迟策略。
http://www.csdn.net/article/2015-05-20/2824727-java

http://www.infoq.com/cn/articles/exploration-of-distributed-mysql-cluster-scheme   分布式MySQL集群方案的探索与思考
http://www.francissoung.com/2015/10/12/Mysql%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E6%96%B9%E6%A1%88/     用merge存储引擎来实现分表  
MyISAM 引擎提供 MERGE 表特性，可以通过创建 MERGE 表简化分表联立 MERGE 表适合的场景是：在创建表的初期，预测到随着业务、数据的增长，会在某一时刻分表，于是当表数据达到该阈值（如200W）之后，使用 INSERT_METHOD=LAST 创建 MERGE 表及新表
这样，新的数据将全部存入 MERGE 表，达到 200W 数据后再创建新的表，并通过 alter table 语句将新表加入到 MERGE 表的 UNION 列表中
http://chuansong.me/n/2757320   http://geek.csdn.net/news/detail/62793   深度解读海量数据存储和访问下的水平分库&去IOE
http://www.infoq.com/cn/articles/yupoo-partition-database

http://www.cnblogs.com/tommyli/p/3767362.html   一种可以避免数据迁移的分库分表scale-out扩容方式
所以在满足基本业务功能的前提下，分库分表方案应该尽量避免的两个问题： 1. 数据迁移 2. 热点    （自增主键，外键约束）
如果更进一步数据库的设计和部署上能做到每个表一个硬盘，那么扩容的过程只要把原有机器的某一块硬盘拔下来，
插入到新的机器上，就完成整表搬迁了！可以大大缩短停机时间。

https://yq.aliyun.com/articles/38883?spm=5176.100238.yqhn2.18.deC6O8    阿里云分布式关系型数据库DRDS解析
https://yq.aliyun.com/articles/217?spm=5176.blog38860.yqblogcon1.17.LzCdIM    OceanBase如何支撑支付宝双十一14万/秒笔交易
https://yq.aliyun.com/articles/38860?spm=5176.100238.yqhn2.17.deC6O8   金融级海量数据库OceanBase
OceanBase提供了一种服务，在中间设置了一层OBProxy，主要是表分区信息、位置信息等。当要做某一个查询的时候，根据查询条件会自动化地将请求分发到OceanBase集群的特定节点上，这样就保证了路由是最短的。比如通常的应用场景有两种，一种是获取单条的记录，另一种是获取一批记录。OceanBase在内存里面维持两套索引，一个是Hash索引，一个是Btree索引，分别对应处理这两种不同的请求。同时，内存数据结构都是设计成无锁的。为此，OceanBase引入了Paxos协议，每一笔事务，主库执行完成后，要同步到半数以上库(包括主库自身)，例如3个库中的2个库，或者5个库中的3个库，事务才成功。


http://grepcode.com/file/repo1.maven.org/maven2/org.apache.marmotta/kiwi-triplestore/3.2.1/org/apache/marmotta/kiwi/generator/SnowflakeIDGenerator.java
http://itindex.net/detail/53406-twitter-id-%E7%AE%97%E6%B3%95  IdWorker java代码
http://darktea.github.io/notes/2013/12/08/Unique-ID
https://github.com/LableOrg/java-uniqueid
https://github.com/noctarius/snowcast
http://engineering.intenthq.com/2015/03/icicle-distributed-id-generation-with-redis-lua/
http://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&mid=403837240&idx=1&sn=ae9f2bf0cc5b0f68f9a2213485313127&scene=21
http://blog.ddup.us/2012/05/24/id-generation-in-distributed-environment/
SnowFlake 41bit留给毫秒时间，10bit给MachineID，也就是机器要预先配置，剩下12位留给Sequence。
微博使用了秒级的时间，用了30bit，Sequence 用了15位，理论上可以搞定3.2w/s的速度。用4bit来区分IDC，也就是可以支持16个 IDC，对于核心机房来说够了。剩下的有2bit 用来区分业务，由于当前发号服务是机房中心式的，1bit 来区分热备。是的，也没有用满64bit。

http://gao-xianglong.iteye.com/blog/2019729  tddl
http://itindex.net/detail/54369-%E9%87%8F%E7%BA%A7-mysql-sharding
http://www.lanindex.com/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%EF%BC%88consistent-hash%EF%BC%89%E7%9A%84%E9%BB%91%E7%A7%91%E6%8A%80/  一致性哈希(Jump Consistent Hash)
大约小十年前，MySQL在ANSI SQL标准上做了一个非标准的“REPLACE INTO”扩展。虽然后来有“INSERT ON DUPLICATE KEY UPDATE”更好的解决了这类问题，但REPLACE INTO现在仍然能用。


http://my.oschina.net/tinyframework/blog/194551?fromerr=36qUpJ7x
http://my.oschina.net/tinyframework/blog/347176
http://www.tinygroup.org/confluence/pages/viewpage.action?pageId=4456794
https://yq.aliyun.com/articles/40177?spm=5176.blog42646.yqblogcon1.13.7y4uNf
https://yq.aliyun.com/articles/40195?spm=5176.blog42646.yqblogcon1.14.y6TxCo


http://hekailiang.github.io/cloud-config/
