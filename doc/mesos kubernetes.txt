https://github.com/Dataman-Cloud/Mesos-CN
http://www.mesoscn.cn/
 
http://blog.dataman-inc.com/shurenyun-mesos-151/   数人云总架构师解读Mesos1.0.0
https://blog.tutum.co/2014/12/02/docker-and-s6-my-new-favorite-process-supervisor/  docker s6进程管理
http://www.youruncloud.com/apphouse.html  一篇文章看CNTV的容器化探索和平台搭建  
http://dockone.io/article/1091  Docker在乐视的实践之路
AppHouse为国内首家免费企业级私有镜像仓库，以安全可靠简单易用为导向

VMware公司最近开源了企业级Registry项目Harbor，由VMware中国研发的团队负责开发。Harbor项目是帮助用户迅速搭建一个企业级的registry 服务。它以Docker公司开源的registry为基础，提供了管理UI, 基于角色的访问控制(Role Based Access Control)，AD/LDAP集成、以及审计日志(Audit logging) 等企业用户需求的功能，同时还原生支持中文
http://mt.sohu.com/20160331/n443025063.shtml  Harbor的每个组件都是以Docker 容器的形式构建的，因此很自然地，我们使用Docker Compose来对它进行部署。
在源代码中(https://github.com/vmware/harbor), 用于部署Harbor的Docker Compose 模板位于 /Deployer/docker-compose.yml由5个容器组成：
Proxy: 由Nginx 服务器构成的反向代理。
Registry:由Docker官方的开源registry 镜像构成的容器实例。
UI: 即架构中的core services, 构成此容器的代码是Harbor项目的主体。
Mysql: 由官方MySql镜像构成的数据库容器。
Log: 运行着rsyslogd的容器，通过log-driver的形式收集其他容器的日志。
https://www.ustack.com/blog/docker/?utm_source=tuicool&utm_medium=referral

思科容器管理平台 Mantl 团队的认可。Mantl 也是基于 Mesos 和 Docker 打造的，并在 Github 上开源。Mantl 为用户提供了部署微服务平台所需的所有基础设施组件，通过将这些组件良好地配合运行，使用户免于编写用于整合这些组件的代码。
http://www.infoq.com/cn/news/2016/03/cisco-mantl-microservices?utm_campaign=infoq_content


Apache Mesos由四个组件组成，分别是Mesos-master，mesos-slave，framework和executor。
http://ju.outofmemory.cn/entry/273672

http://www.itdadao.com/articles/c15a190632p0.html
https://mesosphere.com/blog/2014/07/17/mesosphere-package-repositories/
关闭防火墙
sudo systemctl stop firewalld
sudo systemctl disable firewalld

安装docker
sudo yum update
curl -sSL https://get.docker.com/ | sh

安装常用软件包
yum install git lrzsz wget elinks nc -y
添加yum源   （所有主机，安装其中一个即可）
rpm -Uvh http://repos.mesosphere.io/el/7/noarch/RPMS/mesosphere-el-repo-7-1.noarch.rpm
rpm -Uvh http://repos.mesosphere.io/el/7/noarch/RPMS/mesosphere-el-repo-7-2.noarch.rpm
rpm -Uvh http://repos.mesosphere.io/el/7/noarch/RPMS/mesosphere-el-repo-7-3.noarch.rpm

yum -y install mesos marathon chronos mesosphere-zookeeper 

http://www.mesoscn.cn/document/Marathon/Marathon.html
http://dockone.io/article/136
http://weibo.com/ttarticle/p/show?id=2309403961010531757162  
http://www.chengweiyang.cn/%E7%88%B1%E5%A5%87%E8%89%BAMesos%E5%AE%9E%E8%B7%B5.pdf  爱奇艺Mesos实践.pdf



Mesos内核运行在每一个机器上，同时通过 API 为各种应用提供跨数据中心和云的资源管理调度能力。
使用 ZooKeeper 实现 Master 和 Slave 的容错。    使用 Linux 容器实现本地任务隔离。    多资源调度能力（内存，CPU、磁盘、端口）

http://mp.weixin.qq.com/s?__biz=MzA3MDg4Nzc2NQ==&mid=206755843&idx=1&sn=f6d71f275f89ff3cfa46dfa619efaf40#rd
http://blog.dataman-inc.com/mesos-meetup-3-ppt/
http://dockone.io/article/1211
http://toutiao.com/i6252415009662435841/   Mesos实践完全手册：去哪儿网的运用
http://www.infoq.com/cn/articles/resource-scheduling-for-container-technology?utm_campaign=rightbar_v2&utm_source=infoq&utm_medium=articles_link&utm_content=link_text

http://www.zhongkerd.com/news/content-1173.html 开源分布式资源管理框架Mesos分析介绍
CoreOS发布容器分散式储存开源专案Torus  Torus使用etcd分散式键值资料库（Distributed Key-Value Database）来储存和检索档案

Docker Engine的Swarm模式，集群环境内置 Raft 一致性协议，避免单点故障问题，也无需额外的类似于 ETCD/Consul 的外部存储。 支持服务的不中断更新（rolling update）和其他发布策略
Docker应用交付的简化：新的DAB(分布式应用打包， Distributed Application Bundles，www.docker.com/dab)
阿里云容器服务也提供了基于Docker Volume plugin的存储集成方案（包括支持云盘、OSSFS、NAS等）。 https://yq.aliyun.com/articles/55866?spm=5176.100238.goodcont.9.oalUM1
如果把容器的网络驱动设置成overlay，就意味着所有的容器都可以直接ping通，所以所有容器的ip地址都不会重复。为了做到这一点，就需要一个轻量级的存储来存放已经分配出去的ip信息，和其它的一些配置信息。技术上Docker使用了libkv和libnetwork来实现自己的覆盖网络。它们都是用go语言所写，前者是对操作分布式键值存储系统如consul，etcd，zookeeper的抽象层，后者实现了容器的网络连接
http://qinghua.github.io/docker-overlay-network/
Ubuntu 14.04的内核版本是3.13，而使用docker overlay网络需要Linux内核版本3.16+，所以需要升级内核，建议升级到3.19或以上。
sudo apt-get install linux-generic-lts-vivid
Docker Overlay Network、Flannel、Calico、Weave等4种覆盖网络  http://qinghua.github.io/docker-overlay-network/


常见的服务注册表包括etcd、Consul和ZooKeeper。你可以使用Registrator用于注册和撤消服务以及confd，并用Consul Template实现服务发现与模板创建。
http://doc.shurenyun.com/practice/tsung_dataman.html  TSUNG测试

Twitter刚开源了Mysos项目，把mysql跑在mesos上   http://www.csdn.net/article/2015-07-10/2825180
Mesos/Marathon/ZooKeeper/Consul/etcd/Registrator/Nginx/Docker/Logstash/Docker-Registry等等
在开源DC/OS出现之前，Docker 的统一管理工具只有Kubernetes。Docker的Swarm 只能算是一个管理平台，需要利用Compose 和 Docker Machine等工具的配合。 Mesos 作为资源调度平台也可以管理Docker，但是也需要Marathon 这样的编排工具进行管理，需要DNS，和LoadBalancer等组件服务。 所以说统一的开源容器管理工具只有Kubernetes
http://geek.csdn.net/news/detail/72112
CloudFoundry 是VMware主导使用Ruby开发的一款开源PaaS云计算平台，类似于Salesforce旗下的Heroku，遵从OpenStack云计算平台规范。
openStack是偏IaaS层的开源云计算框架，CloudFoundry是PaaS层的开源框架。Red Hat一直在推销自己的PaaS产品OpenShift。Rackspace在不久前才宣布了自己的开源PaaS项目Solum
https://github.com/dcos/dcos
IaaS层抽象的是机器， PaaS则更多考虑部署、管理应用/服务。  http://www.c114.net/cloud/4049/a933242.html
Apache Mesos是为构建和运行其他分布式系统提供服务的分布式系统。它将CPU 、内存、存储介质以及其它计算机资源从物理机或者虚拟机中抽象出来，构建支持容错和弹性的分布式系统，并提供高效的运行能力。Mesos使用与Linux 内核相同的系统构建原则，只是它们处在不同的抽象层次上。Mesos内核运行在每台机器上，通过应用程序Framework ，提供跨整个数据中心和云环境进行资源管理和调度的API。
Mesos：作为DCOS的核心组件之一，作用相当于Linux内核，管理着数据中心所有的CPU、内存以及储存等物理资源，实现资源的统一管理和分配。
Marathon：作为DCOS基础组件之一，相当于Linux中Iinit/systemd进程，管理DCOS中其他的软件包，实现安装、卸载其他框架和应用的功能。
http://blog.csdn.net/zouyee/article/details/51149944
https://yq.aliyun.com/articles/4694
http://www.litrin.net/2015/08/20/mesos%E5%AE%9E%E6%88%98/
http://blog.csdn.net/bogeli5/article/details/51598199    Mesos+Kubernetes集成安装部署
http://blog.csdn.net/bogeli5/article/details/51605285
http://ryanivanka.info/mesos/   play mesos
http://qinghua.github.io/prometheus/
vagrant init minimum/ubuntu-trusty64-docker
 


Kubernetes 
http://qinghua.github.io/kubernetes-installation/   轻松搭建Kubernetes 1.2版运行环境
http://qinghua.github.io/kubernetes-deployment/?utm_source=tuicool&utm_medium=referral
一台叫做master，运行着k8s的api server、controller manager和scheduler；另两台叫做node1和node2，运行着k8s的kubelet和kube-proxy，当做k8s的两个节点。
Kubernetes（k8s）是自动化容器操作的开源平台，这些操作包括部署，调度和节点集群间扩展
http://www.wtoutiao.com/p/100xuFR.html
在较新的版本里，cadvior功能被集成到了kubelet组件中，kubelet在与docker交互的同时，对外提供监控服务。
kubernetes集群范围内的监控主要由kubelet, heapster和storage backend（如influxdb）构建。
http://www.csdn.net/article/2015-07-30/2825337   v1.0


https://yq.aliyun.com/articles/55883?spm=5176.8067842.tagmain.53.xlnV8D  kubernetes听云实战发布版
http://mp.weixin.qq.com/s?__biz=MzI4MjE3MTcwNA==&mid=2664334723&idx=1&sn=6a5b727b066469dc9f26ca73cc0c37e1#rd    《K8s与云原生应用》之K8s的系统架构与设计理念
http://dockone.io/article/932
http://www.infoq.com/cn/articles/Kubernetes-system-architecture-introduction
https://linfan1.gitbooks.io/kubernetes-chinese-docs/content/   Kubernetes中文文档
http://valleylord.github.io/post/201601-kubernetes-concepts/   Kubernetes原理简介
http://valleylord.github.io/post/201602-kubernetes-concepts2/
http://www.csdn.net/article/1970-01-01/2824933
http://blog.coocla.org/kubernetes-overview.html
http://7xi8kv.com5.z0.glb.qiniucdn.com/%E4%BD%BF%E7%94%A8kubernetes%E6%9E%84%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%BA%94%E7%94%A8%E5%B9%B3%E5%8F%B0.pdf  使用kubernetes构建企业级服务应用平台
http://gaocegege.com/Blog/kubernetes/spring-boot-in-kubernetes  在Kubernetes中的Spring Boot项目部署
https://community.qingcloud.com/topic/393/kubernetes%E5%92%8Cmesos%E9%9B%86%E6%88%90%E8%A7%A3%E6%9E%90    Kubernetes和Mesos集成解析
http://qinghua.github.io/kubernetes-in-mesos-9/
https://linfan1.gitbooks.io/kubernetes-chinese-docs/content/032-memsos.html
http://blog.dataman-inc.com/109-shurenyun-huodong/
http://www.tqcto.com/article/framework/3324.html   Mesos+Kubernetes集成安装部署
从K8s的系统架构、技术概念和设计理念，我们可以看到K8s系统最核心的两个设计理念：一个是容错性，一个是易扩展性。容错性实际是保证K8s系统稳定性和安全性的基础，易扩展性是保证K8s对变更友好，可以快速迭代增加新功能的基础。
Kubernetes是为生产环境而设计的容器调度管理系统，对于负载均衡、服务发现、高可用、滚动升级、自动伸缩等容器云平台的功能要求有原生支持。由于Kubernetes在K和s间有8个字母，因此常简称K8s。
K8s在2016年6月的云计算大会上发表了有关容器设计模式的论文《Design patterns for container-based distributed systems》，介绍了基于K8s设计云原生应用的容器设计模式，
一个K8s集群是由分布式存储（etcd）、服务节点（Minion，etcd现在称为Node）和控制节点（Master）构成的。所有的集群状态都保存在etcd中，Master节点上则运行集群的管理控制模块。Node节点是真正运行应用容器的主机节点，在每个Minion节点上都会运行一个Kubelet代理，控制该节点上的容器、镜像和存储卷等。
K8s中所有的配置都是通过API对象的spec去设置的，也就是用户通过配置系统的理想状态来改变系统，这是k8s重要设计理念之一，即所有的操作都是声明式（Declarative）的而不是命令式（Imperative）的。
Pod的设计理念是支持多个容器在一个Pod中共享网络地址和文件系统，可以通过进程间通信和文件共享这种简单高效的方式组合完成服务。Pod对多容器的支持是K8最基础的设计理念。
目前K8s中的业务主要可以分为长期伺服型（long-running）、批处理型（batch）、节点后台支撑型（node-daemon）和有状态应用型（stateful application）；分别对应的小机器人控制器为Deployment、Job、DaemonSet和PetSet
复制控制器（Replication Controller，RC）是K8s集群中最早的保证Pod高可用的API对象。通过监控运行中的Pod来保证集群中运行指定数目的Pod副本。 RC是K8s较早期的技术概念，只适用于长期伺服型的业务类型，比如控制小机器人提供高可用的Web服务。副本集（Replica Set，RS）RS是新一代RC
滚动升级一个服务，实际是创建一个新的RS，然后逐渐将新RS中副本数增加到理想状态，将旧RS中的副本数减小到0的复合操作；这样一个复合操作用一个RS是不太好描述的，所以用一个更通用的Deployment来描述。
要稳定地提供服务需要服务发现和负载均衡能力。服务发现完成的工作，是针对客户端访问的服务，找到对应的的后端服务实例。在K8集群中，客户端需要访问的服务就是Service对象。每个Service会对应一个集群内部有效的虚拟IP，集群内部通过虚拟IP访问一个服务。在K8s集群中微服务的负载均衡是由Kube-proxy实现的。Kube-proxy是K8s集群内部的负载均衡器。它是一个分布式代理服务器，在K8s的每个节点上都有一个
Job是K8s用来控制批处理型任务的API对象。批处理业务与长期伺服业务的主要区别是批处理业务的运行有头有尾，而长期伺服业务在用户不停止的情况下永远运行。Job管理的Pod根据用户的设置把任务成功完成就自动退出了。
后台支撑型服务的核心关注点在K8s集群中的节点（物理机或虚拟机），要保证每个节点上都有一个此类Pod运行。节点可能是所有集群节点也可能是通过nodeSelector选定的一些特定节点。典型的后台支撑型服务包括，存储，日志和监控等在每个节点上支持K8s集群运行的服务。
RC和RS主要是控制提供无状态服务的，其所控制的Pod的名字是随机设置的，一个Pod出故障了就被丢弃掉，在另一个地方重启一个新的Pod，名字变了、名字和启动在哪儿都不重要，重要的只是Pod总数；而PetSet是用来控制有状态服务，PetSet中的每个Pod的名字都是事先确定的，不能更改。PetSet中Pod的名字的作用，关联与该Pod对应的状态。
对于RC和RS中的Pod，一般不挂载存储或者挂载共享存储，保存的是所有Pod共享的状态。对于PetSet中的Pod，每个Pod挂载自己独立的存储，如果一个Pod出现故障，从其他节点启动一个同样名字的Pod，要挂在上原来Pod的存储继续以它的状态提供服务。
适合于PetSet的业务包括数据库服务MySQL和PostgreSQL，集群化管理服务Zookeeper、etcd等有状态服务。PetSet做的只是将确定的Pod与确定的存储关联起来保证状态的连续性。
K8s的设计定位是单一集群在同一个地域内，因为同一个地区的网络性能才能满足K8s的调度和计算存储连接要求。
而联合集群服务就是为提供跨Region跨服务商K8s集群服务而设计的。每个K8s Federation有自己的分布式存储、API Server和Controller Manager。而Cluster之间的负载均衡是通过域名服务的负载均衡来实现的。
K8s集群中的存储卷跟Docker的存储卷有些类似，只不过Docker的存储卷作用范围为一个容器，而K8s的存储卷的生命周期和作用范围是一个Pod。每个Pod中声明的存储卷由Pod中的所有容器共享。 支持多种分布式存储包括GlusterFS和Ceph；也支持较容易使用的主机本地目录hostPath和NFS。
K8s集群中的计算能力由Node提供，最初Node称为服务节点Minion，后来改名为Node。K8s集群中的Node也就等同于Mesos集群中的Slave节点，是所有Pod运行所在的工作主机，可以是物理机也可以是虚拟机。
秘盒对象（Secret）Secret是用来保存和传递密码、密钥、认证凭证这些敏感信息的对象。使用Secret的好处是可以避免把敏感信息明文写在配置文件里。
用户帐户为人提供账户标识，而服务账户为计算机进程和K8s集群中运行的Pod提供账户标识。在ABAC中，K8s集群中的访问策略只能跟用户直接关联；而在RBAC中，访问策略可以跟某个角色关联，具体的用户在跟一个或多个角色相关联。






