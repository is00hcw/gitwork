spring 4.2
HTTP Streaming  ResponseBodyEmitter   StreamingResponseBody
SseEmitter is a sub-class of ResponseBodyEmitter providing support for Server-Sent Events.
@CrossOrigin(origins = "http://domain2.com", maxAge = 3600)
<mvc:cors><mvc:mapping path="/**" />
新的 SocketUtils 类被引入到了spring-core模块。这个类可以使你能够扫描本地主机的空闲的 TCP 和 UDP 服务端口。
ResponseEntity提供了一种 builder 风格的 API 来指导控制器向服务器端的响应的展示，例如，ResponseEntity.ok()
SQL脚本的执行可以通过Sql和SqlConfig注解申明在每一个类和方法中。
ReflectionTestUtils 现在支持 setting 和 getting static 字段,包括常量

springboot
http://start.spring.io/   用mvn spring-boot:run命令启动程序   http://www.jianshu.com/p/846bb2d26ff8
@SpringBootApplication是这个注解是该应用程序入口的标志，然后有熟悉的main函数，通过SpringApplication.run(xxxApplication.class, args)来运行Spring Boot应用。打开SpringBootApplication注解可以发现，它是由其他几个类组合而成的：@Configuration（等同于spring中的xml配置文件，使用Java文件做配置可以检查类型安全）、@EnableAutoConfiguration（自动配置，稍后细讲）、@ComponentScan（组件扫描，大家非常熟悉的，可以自动发现和装配一些Bean）
https://yq.aliyun.com/articles/6056  http://blog.csdn.net/hengyunabc/article/details/50120001  springboot启动
http://blog.csdn.net/mn960mn/article/details/51306140  自定义tomcat参数
https://yq.aliyun.com/articles/2360  优化
http://blog.csdn.net/catoop/article/details/50588851  Spring Boot 部署与服务配置
http://mrlee23.iteye.com/blog/2047968   extends SpringBootServletInitializer 
在运行应用时可以通过命令行参数指定配置文件： java -jar location_of_your_jar_file.jar --spring.config.location=location_of_your_config_file.properties
http://blog.csdn.net/xiaoyu411502/article/details/47865561
 <artifactId>spring-session-data-redis</artifactId>  @EnableRedisHttpSession    所有实体类实现Serializable接口   spring.redis.host=192.168.1.103
http://blog.csdn.net/nisxiya/article/details/44937763    设置静态资源访问
@EnableWebMvc，增加该注解以后WebMvcAutoConfiguration中配置就不会生效，你需要自己来配置需要的每一项。
Spring Boot 默认配置的/**映射到/static（或/public ，/resources，/META-INF/resources），/webjars/**会映射到classpath:/META-INF/resources/webjars/
http://blog.csdn.net/isea533/article/details/50412212


Spring3.0中对异常的处理方法一共提供了两种：一种是使用HandlerExceptionResolver接口；一种是在Controller类内部使用@ExceptionHandler注解。使用第一种方式可以实现全局异常控制，并且Spring已经提供了一个默认的实现类SimpleMappingExceptionResolver
http://jinnianshilongnian.iteye.com/blog/2107205   4.1新特性——Spring MVC增强
http://zilongsky-gmail-com.iteye.com/blog/2032001   maven spring profile    <param-name>spring.profiles.active</param-name><param-value>${profiles.activation}</param-value>  
http://www.importnew.com/1099.html        ctx.getEnvironment().setActiveProfiles("container");    -Dspring.profiles.active="standalone"    
http://jinnianshilongnian.iteye.com/blog/2000183  @ActiveProfiles("test")  
@ActiveProfiles({"unittest","productprofile"})  
1.ENV方式： ConfigurableEnvironment.setActiveProfiles("unittest")
2.JVM参数方式: -Dspring.profiles.active="unittest"

http://www.captaindebug.com/2013/09/long-polling-with-spring-32s.html#.VU7YoNyqpBc   DeferredResult

http://www.blogjava.net/liuxiaosan/articles/357092.html
@RequestParam("accountId") Long accountId,   @RequestHeader("User-Agent") String userAgent,    @CookieValue("loginId") String loginId
@RequestMapping(value = "list/{pageNo}", method = RequestMethod.GET)
public String list(@PathVariable int pageNo

http://blog.csdn.net/hengyunabc/article/details/22295749  Spring的配置里，最好不要配置xsd文件的版本号

<context:property-placeholder location="classpath*:*.properties">

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {"classpath:META-INF/spring/hbase-spring-context.xml"})
@ContextConfiguration(classes = RedisConfig.class)

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
public class SpringSecurityInitializer extends AbstractSecurityWebApplicationInitializer {
public class SpringMvcInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {


@ImportResource(value = {"/WEB-INF/spring-dispatcher-servlet.xml"})
@Import({ SecurityConfig.class })
<http security="none" pattern="/static/**" />  

SpringMVC 4上单元测试出现如下错误。java.lang.NoClassDefFoundError: javax/servlet/SessionCookieConfig    http://www.cnphp6.com/archives/59683

A、处理requet uri 部分（这里指uri template中variable，不含queryString部分）的注解：   @PathVariable;
B、处理request header部分的注解：   @RequestHeader, @CookieValue;
C、处理request body部分的注解：@RequestParam,  @RequestBody;
D、处理attribute类型是注解： @SessionAttributes, @ModelAttribute;
http://blog.csdn.net/kobejayandy/article/details/12690161

http://www.robinhowlett.com/blog/2013/02/13/spring-app-migration-from-xml-to-java-based-config/    javaconfig
http://www.open-open.com/lib/view/open1409641766369.html    mybatis

<filter-class>com.thetransactioncompany.cors.CORSFilter</filter-class>  CORS就是为了让AJAX可以实现可控的跨域访问而生的。
http://www.cnblogs.com/daxin/p/3468137.html

<filter-class>org.springframework.web.filter.RequestContextFilter</filter-class>
在Spring2.0中除了以前的Singleton和Prototype外又加入了三个新的web作用域，分别为request、session和global session 基于LocalThread将HTTP request对象绑定到为该请求提供服务的线程上。
原因是ContextLoaderListener实现ServletContextListener监听器接口，而ServletContextListener只负责监听Web容器的启动和关闭的事件。RequestContextFilter实现ServletRequestListener监听器接口，该监听器监听HTTP请求事件，Web服务器接收的每次请求都会通知该监听器。

Bean Validation 1.1(JSR-349)
http://jinnianshilongnian.iteye.com/blog/1990081
http://www.ibm.com/developerworks/cn/java/j-lo-jsr303/

提供了获取Socket TCP/UDP可用端口的工具，如
SocketUtils.findAvailableTcpPort()
SocketUtils.findAvailableTcpPort(min, max) 
SocketUtils.findAvailableUdpPort()

为什么 @Repository 只能标注在 DAO 类上呢？这是因为该注解的作用不只是将类识别为 Bean，同时它还能将所标注的类中抛出的数据访问异常封装为 Spring 的数据访问异常类型。
@Component 是一个泛化的概念，仅仅表示一个组件 (Bean) ，可以作用在任何层次。@Service 通常作用在业务层，但是目前该功能与 @Component 相同。@Constroller 通常作用在控制层
通过在类上使用 @Repository、@Component、@Service 和 @Constroller 注解，Spring 会自动创建相应的 BeanDefinition 对象，并注册到 ApplicationContext 中。
如果希望在 Bean 初始化完成之后执行一些自定义操作，则可以让 Bean 实现 InitializingBean 接口，该接口包含一个 afterPropertiesSet() 方法，容器在为该 Bean 设置了属性之后，将自动调用该方法；如果 Bean 实现了 DisposableBean 接口，则容器在销毁该 Bean 之前，将调用该接口的 destroy() 方法。
第二种方式是在 XML 文件中使用 <bean> 的 init-method 和 destroy-method 属性指定初始化之后和销毁之前的回调方法，代码无需实现任何接口。JSR-250 规范定义了两个用于指定声明周期方法的注解：@PostConstruct 和 @PreDestroy。
 <context:annotation-config /> 
http://blog.csdn.net/yi3040/article/details/6447289

@WebServlet(name = "TokenFail", urlPatterns = { "/TokenFail" })

http://www.slideshare.net/zenyk/spring-for-apache-hadoop


schedule
To enable support for @Scheduled and @Async annotations add @EnableScheduling and @EnableAsync to one of your @Configuration classes
<task:annotation-driven executor="myExecutor" scheduler="myScheduler"/>
<task:executor id="myExecutor" pool-size="5"/>
<task:scheduler id="myScheduler" pool-size="10"/>
http://howtodoinjava.com/2013/04/23/4-ways-to-schedule-tasks-in-spring-3-scheduled-example/
http://www.mkyong.com/spring-batch/spring-batch-and-spring-taskscheduler-example/
http://websystique.com/spring/spring-job-scheduling-using-xml-configuration/
http://www.tuicool.com/articles/YnI77n
http://www.itbokee.com/article/201405/c61f16a2e1504bd198644c10a2a132e4.html
scheduler.schedule(task, new CronTrigger("* 15 9-17 * * MON-FRI"));


error
http://ningandjiao.iteye.com/blog/1995270
http://yanyaner.com/blog/2014/07/25/springmvc-global-exceptionhandler/

异步处理
http://www.jianshu.com/p/b594a7edff64
Servlet3提供一套完整的异步处理API，包括AsyncContext,AsyncLiseter,AsyncEvent. 要求Tomcat7.0+  asyncTimeout默认10s
SpringMVC3.2 在Servlet3的基础上做了进一步的封装，编码更为简单，提供Callable，WebAsyncTask，DeferredResult三种方式进行异步编程支持
web.xml  <async-supported>true</async-supported>  注意每个相关servlet filter都需要   声明version="3.0"，声明web-app_3_0.xsd
spring xml <mvc:async-support default-timeout="3000"/>
public DeferredResult<String> quotes() {   异步处理完成时返回org.springframework.web.context.request.async.DeferredResult
返回java.util.concurrent.Callable来完成异步处理    org.springframework.web.context.request.async.WebAsyncTask 可设置超时

websocket
http://zhaozhiming.github.io/blog/2015/05/11/spring-websocket-config/
http://kimrudolph.de/blog/spring-4-websockets-tutorial/
http://syntx.io/using-websockets-in-java-using-spring-4/

async mq
http://yanyaner.com/blog/2014/04/09/async_message_architect2/
http://www.changeself.net/archives/rocketmq%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html

dfs
http://yanyaner.com/blog/2014/05/30/fastDFS-setup/


mybatis
http://www.cnblogs.com/daxin/p/3545040.html
http://www.luoshengsha.com/284.html
如果xxMapper.xml配置文件放在和xxMapper.java统一目录下，mappers也可以省略，因为org.mybatis.spring.mapper.MapperFactoryBean默认会去查找与xxMapper.java相同目录和名称的xxMapper.xml

test
http://jinnianshilongnian.iteye.com/blog/2004660
http://rockingware.com/2013/08/spring-test-mvc.html

springloaded
修改tomcat的应用，禁止tomcat自己的热加载，方法是在META-INF目录下创建context.xml文件，里面包含如下语句，关键便是其中设置reloadable为false
<Context antiResourceLocking="false" privileged="true" useHttpOnly="true" reloadable="false" />

在运行环境中添加springloaded的jar文件，在eclipse中右键点击项目，run as->run configuration在弹出的窗口中，选择Arguments标签，在vm arguments的末尾添加：
-javaagent:C:\temp\springloaded-1.2.3.RELEASE.jar -noverify

http://blog.csdn.net/zhoujinyu0713/article/details/46843115
 compile("org.springframework.boot:spring-boot-devtools")
<dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-devtools</artifactId> 
</dependency>

spring-boot
http://start.spring.io/  
http://repo.spring.io/release/org/springframework/boot/spring-boot-cli/1.2.6.RELEASE/spring-boot-cli-1.2.6.RELEASE-bin.zip
http://spring.io/blog/2015/06/17/devtools-in-spring-boot-1-3
mvn spring-boot:run
http://www.ibm.com/developerworks/cn/java/j-lo-spring-boot/

metrics
http://tianmaying.com/tutorial/spring-boot-overview
http://kielczewski.eu/2015/01/application-metrics-with-spring-boot-actuator/
http://www.baeldung.com/spring-boot-actuators
Each endpoint can be customized with properties using the following format: endpoints.[endpoint name].[property to customize]
http://hacpai.com/article/1444294401221
http://docs.spring.io/spring-boot/docs/current/reference/html/howto-traditional-deployment.html
If you include org.springframework.boot:spring-boot-legacy as a dependency
 <listener-class>org.springframework.boot.legacy.context.web.SpringBootContextLoaderListener</listener-class>
http://www.javabeat.net/spring-boot-actuator/


jpa
Repository： 仅仅是一个标识，表明任何继承它的均为仓库接口类，方便Spring自动扫描识别 
CrudRepository<T, ID extends Serializable>： 继承Repository，这个接口提供了最基本的对实体类的添删改查操作
PagingAndSortingRepository： 继承CrudRepository，实现了一组分页排序相关的方法 
JpaRepository： 继承PagingAndSortingRepository，实现一组JPA规范相关的方法  
按照Spring data 定义的规则，查询方法以find|read|get开头   要注意的是：条件属性以首字母大写其余字母小写为规定。 
findByLastnameAndFirstname(String lastname,String firstname) 条件的属性名称与个数要与参数的位置与个数一一对应   
@Query(value = "SELECT * FROM http_api where http_suite_id = ?1", nativeQuery = true)
索引值从1开始，查询中 ”?X” 个数需要与方法定义的参数个数相一致，并且顺序也要一致 
http://www.cnblogs.com/WangJinYang/p/4257383.html

@ImportResource("classpath:applicationContext.xml")
@PropertySource("classpath:application.properties")
@EnableTransactionManagement
@EnableJpaRepositories(basePackages = {"org.exam.app.repository"})
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(loader=AnnotationConfigContextLoader.class,classes={AppConfig.class})