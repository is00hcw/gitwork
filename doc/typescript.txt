https://www.typescriptlang.org/samples/index.html
https://www.typescriptlang.org/play/index.html
https://zhongsp.gitbooks.io/typescript-handbook/content/doc/wiki/Roadmap.html
http://reactjs.cn/
http://www.cnblogs.com/clark159/p/4615031.html
https://cnodejs.org/topic/55cc36c9b25bd72150842bc9
http://blog.csdn.net/lihongxun945/article/details/49999049
https://zhuanlan.zhihu.com/p/21629069   TypeScript 2.0 新特性一览
npm install grunt  grunt-ts grunt-contrib-uglify grunt-contrib-copy --save-dev

最后按下快捷键「Ctrl+Shift+B」，就可以看到Visual Studio Code编译TypeScript,并且输出对应的JavaScript档案：main.js
html:5 按tab键自动补全  http://blog.163.com/jre_sun/blog/static/25527704420164299615418/
https://segmentfault.com/a/1190000005085629  写给想做前端的你

TypeScript 是ES6的一个超集，也就是完整包含了全部ES6特性，并且还引入了强类型和注解。
TypeScript = ES6 + 强类型 + Annotation
http://www.uedsc.com/typescript-introduction.html
在ES6（ECMAScript 6，即ECMAScript 2015）的支持方面。TypeScript 1.5版本增加了对ES6中Modules、Destructuring、Spread、for..of、Symbols、Computed Properties、Let/Const、和Tagged String Templates等新特性的支持。这些新特性使得TypeScript向成为ES6的超集并为ES6的所有主要特性提供类型检查的目标迈进了一大步。
其次，在模块（Module）方面，TypeScript 1.5也进行了很大改动。TypeScript 1.5支持ES6的新模块语法――ES6模块可以用import导入模块并用export导出每一个公共API，甚至可以只导入公共API所需要使用的那部分。
import * as Math from "my/math";
import { add, subtract } from "my/math";

如果想在页面上直接编译看到结果，还需要引用typescript.min.js与typescript.compile.min.js。
TypeScript 的基本数据类型 有boolean、number 、string 、 array 、 enum 、any 、void。
http://www.hubwiz.com/class/55b724ab3ad79a1b05dcc26c
可选参数：在参数名后面，冒号前面添加一个问号，则表明该参数是可选的。默认参数：在参数名后直接给定一个值，如果这个值没有被传入，那么将会被赋值为默认值。注：可选参数和默认参数必须在参数列表的最后。
构造函数 ，是一种特殊的方法。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。而TypeScript的构造函数用关键字constructor来实现。


微软发布了TypeScript语言，这个项目主要的负责人是 Anders Hejlsberg （C#、TurboPascal 之父）。TypeScript提供了类、模块和接口来帮助您构建健壮的组件
TypeScript 是微软2012年推出的一种编程语言，属于 JavaScript 的超集，可以编译为 JavaScript 执行。 它的最大特点就是支持强类型和 ES6 Class。
但是，TypeScript 并不适应于所有的开发人员、所有的项目，下面是 TypeScript 适应的场景：
适应较大、复杂的项目。例如 SinglePageApplication、大型 JS 框架、前端游戏。需要支持面向对象设计、高可重用性、组件化开发的 JS 代码。
下面是 TypeScript 不适应的场景：一些简单的、不需要 OOD、灵活性高、动态性高的代码就不适合选择 TypeScript。

Shadow DOM可以完美的解决CSS污染的问题，并且它的规范很早就被指定出来，但是浏览器对它的支持却十分可怜。
Angular 2.0支持原生的Shadow DOM，也可以通过模拟(emulated)的方式来支持它，通过设置每个component的encapsulation属性，可以决定每个组件的css的影响范围。

ts-loader可以让webpack使用TypeScript的标准配置文件tsconfig.json编译TypeScript代码。
随后Microsoft同意在它们的TypeScript语言（JavaScript的一个严格超集）上添加对装饰符（decorator，又称为注解）的支持，所以，它就成为了开发Angular 2框架本身所使用的语言

Angular团队还集成了Microsoft的另外一个产品到Angular 2框架之中，这就是反应型JavaScript扩展（reactive JavaScript extension）的RxJS库。
Angular 2并不是一个MVC框架，而是基于组件（component）的框架。在Angular 2中，应用是松耦合组件所组成的树。
http://www.infoq.com/cn/articles/Angular2-TypeScript-High-Level-Overview


如果想在TypeScript代码中直接使用npm上的JS库，需要借助Typings这个工具。
Typings也是一个包管理器，它管理的是JS代码“定义文件”，用Typings安装相应的定义文件后，编辑器和编译器就可以去node_modules目录中找到相应的JS库，并编译到最终的JS代码中。



Angular2
E2E test framework for Angular apps http://www.protractortest.org
http://plnkr.co/edit/73ck1MUOYc8bZ0Wm9M6V?p=preview
http://www.angularjs.cn/A2nG
<li *ngFor="let hero of heroes" (click)="onSelect(hero)">
 <input [(ngModel)]="selectedHero.name" placeholder="name"/>
<div *ngIf="selectedHero">
你会注意到，在名叫 app.component.ts 的文件中有一个 AppComponent 组件，在名叫 hero-detail.component.ts 的文件中有一个 HeroDetailComponent 组件。我们的所有组件名都以 Component 结尾。所有组件的文件名都以 .component 结尾。
import { Injectable } from '@angular/core';   @Injectable()
多年的经验和惨痛的教训教育我们，应该把复杂的逻辑扔到构造函数外面去，特别是那些需要从服务器获取数据的逻辑更是如此。构造函数是为了简单的初始化工作而设计的，比如把构造函数的参数赋值给属性。
只要我们实现了 Angular 的 ngOnInit 生命周期钩子 ， Angular 就会主动调用这个钩子。 Angular 提供了一些接口，用来介入组件生命周期的几个关键时间点：刚创建时、每次变化时，以及最终被销毁时。

http://www.jbrantly.com/typescript-and-webpack/
http://www.jbrantly.com/es6-modules-with-typescript-and-webpack/
http://david-barreto.com/how-to-use-typescript-with-systemjs/
