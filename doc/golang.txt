在fishshell设置GOPATH：set -gx GOPATH /usr/local/Cellar/go/1.7.6
https://my.oschina.net/u/2894582/blog/804421  Google Go 语言从入门到应用必备开源项目
https://github.com/Unknwon/the-way-to-go_ZH_CN/blob/master/eBook/directory.md
https://github.com/Unknwon/go-fundamental-programming
https://wide.b3log.org/playground
https://wide.b3log.org/
https://github.com/mailgun/godebug
https://github.com/teambition/gear Go 语言的 Web 服务框架 Gear-go    https://github.com/teambition/gear/blob/master/doc/design.md

http://www.flysnow.org/2016/12/28/from-java-to-golang.html  从Java到Golang快速入门
http://www.flysnow.org/2017/04/11/go-in-action-go-goroutine.html   runtime.GOMAXPROCS(runtime.NumCPU())
互斥锁mutex sync.Mutex，这个互斥锁有两个方法，一个是mutex.Lock(),一个是mutex.Unlock(),这两个之间的区域就是临界区，临界区的代码是安全的。
如果一个通道被关闭了，我们就不能往这个通道里发送数据了，如果发送的话，会引起painc异常。但是，我们还可以接收通道里的数据，如果通道里没有数据的话，接收的数据是nil。
无缓冲的通道指的是通道的大小为0，也就是说，这种类型的通道在接收前没有能力保存任何值，发送goroutine和接收gouroutine必须是同步的，同时准备后，如果没有同时准备好的话，先执行的操作就会阻塞等待，直到另一个相对应的操作准备好为止。这种无缓冲的通道我们也称之为同步通道。
有缓冲通道，其实是一个队列，对于有缓冲的通道，向其发送操作就是向队列的尾部插入元素，接收操作则是从队列的头部删除元素，并返回这个刚刚删除的元素。当队列满的时候，发送操作会阻塞；当队列空的时候，接受操作会阻塞。有缓冲的通道，不要求发送和接收操作时同步的，相反可以解耦发送和接收操作。
定义单向通道也很简单，只需要在定义的时候，带上<-即可。
var send chan<- int //只能发送
var receive <-chan int //只能接收
read里使用读锁，也就是RLock和RUnlock，写锁的方法名和我们平时使用的一样Lock和Unlock, var rw *sync.RWMutex = new(sync.RWMutex)
data map[interface{}]interface{}
make只能用来分配及初始化类型为slice，map，chan的数据；new可以分配任意类型的数据
new分配返回的是指针，即类型*T；make返回引用，即T 。 new分配的空间被清零，make分配后，会进行初始化。

内建函数make(T, args)与new(T)的用途不一样。它只用来创建slice，map和channel，并且返回一个初始化的(而不是置零)，类型为T的值（而不是*T）。之所以有所不同，是因为这三个类型的背后引用了使用前必须初始化的数据结构。例如，slice是一个三元描述符，包含一个指向数据（在数组中）的指针，长度，以及容量，在这些项被初始化之前，slice都是nil的。对于slice，map和channel，make初始化这些内部数据结构，并准备好可用的值。
如果用C来描述，Go中的new大概相当于：
T *t = (T*)malloc(sizeof(T))
memset(t, 0, sizeof(T))
rect3 := &Rect{0, 0, 100, 200}

https://my.oschina.net/tjt/blog/910153  Go Concurrency 实战
select 让你可以同时等待多个通道操作。(poll/epoll?) 注意select 要么写个死循环用超时,要不就定好次数.或者加上default让select变成非阻塞的
其中time.After返回<-chan Time,直接向select发送消息    case <-time.After(time.Second * 1)
default,当监听的channel都没有准备好的时候，默认执行的
time.Sleep(time.Duration(rand.Intn(1000)) * time.Millisecond)
data := make(map[string]interface{}, 1)  
json_obj, err := json.Marshal(data)  //序列化  
json_err := json.Unmarshal(json_obj, &marshal_data)     //反序列化  


http://it.taocms.org/05/10911.htm  gokit
http://studygolang.com/articles/7010

我们知道Go使用GOPATH这个环境变量来管理编译时的源代码路径，所以第三方库也是下载在GOPATH下，并且我们的源代码也需要处于GOPATH下。
bash < <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)
gvm install go1.4.2
gvm use go1.4.2
gvm pkgset create --local  
gvm pkgset use --local  
gvm listall 查看所有的golang版本
使用gvm diff 列出GOROOT中添加或者移除的文件
使用gvm pkgset [create/use/delete] [name]管理GOPATHs
vim ~/.gvm/scripts/install 修改 GO_SOURCE_URL=https://github.com/golang/go

http://colobu.com/2016/04/21/use-vscode-to-develop-go-programs/
https://github.com/Microsoft/vscode-tips-and-tricks/blob/master/README.md
http://www.cnblogs.com/zsy/archive/2016/02/28/5223957.html  配置
http://www.golangtc.com/t/564d30cfb09ecc72c30000b1
到 https://github.com/golang/tools 下载然后放到 golang.org/x/tools 下面。
go get -u -v github.com/nsf/gocode
go get -u -v github.com/rogpeppe/godef
go get -u -v github.com/golang/lint/golint
go get -u -v github.com/lukehoban/go-find-references
go get -u -v sourcegraph.com/sqs/goreturns
go get -u -v golang.org/x/tools/cmd/gorename
go get -u -v github.com/derekparker/delve/cmd/dl


http://liudanking.com/golang/golang-waitgroup-usage/?utm_source=tuicool&utm_medium=referral  Golang中WaitGroup使用的一点坑
http://www.cnblogs.com/php-rearch/p/5962873.html  进一步认识golang中的并发
某个地方需要创建多个goroutine，并且一定要等它们都执行完毕后再继续执行接下来的操作。WaitGroup最大的优点就是.Wait()可以阻塞到队列中的任务都完毕后才解除阻塞。
channel是一种golang内置的类型，英语的直译为"通道"，其实，它真的就是一根管道，而且是一个先进先出的数据结构。我们能对channel进行的操作只有4种：(1) 创建chennel (通过make()函数)(2) 放入数据 (通过 channel <- data 操作) (3) 取出数据 (通过 <-channel 操作)(4)  关闭channel (通过close()函数)
(1) channel是一种阻塞管道，是自动阻塞的。意思就是，如果管道满了，一个对channel放入数据的操作就会阻塞，直到有某个routine从channel中取出数据，这个放入数据的操作才会执行。相反同理，如果管道是空的，一个从channel取出数据的操作就会阻塞，直到某个routine向这个channel中放入数据，这个取出数据的操作才会执行。这事channel最重要的一个性质，没有之一。
(2)channel分为有缓冲的channel和无缓冲的channel。两种channel的创建方法如下：
ch := make(chan int) //无缓冲的channel，同等于make(chan int, 0)  
ch := make(chan int, 5) //一个缓冲区大小为5的channel  
主routine要向channel中放入一个数据，但是因为channel没有缓冲，相当于channel一直都是满的，所以这里会发生阻塞。对于无缓冲的channel，放入操作和取出操作不能再同一个routine中，而且应该是先确保有某个routine对它执行取出操作，然后才能在另一个routine中执行放入操作。
在使用带缓冲的channel时一定要注意放入与取出的速率问题。
(3)关闭后的channel可以取数据，但是不能放数据。而且，channel在执行了close()后并没有真的关闭，channel中的数据全部取走之后才会真正关闭。
channel相比WaitGroup有一个很大的优点，就是channel不仅可以实现协程的同步，而且可以控制当前正在运行的goroutine的总数。

http://tonybai.com/2014/09/29/a-channel-compendium-for-golang/  Golang Channel用法简编
http://tonybai.com/2015/11/17/tcp-programming-in-golang/   Go语言TCP Socket编程
http://www.ashan.org/archives/947  Golang， 以17个简短代码片段，切底弄懂 channel 基础
http://blog.csdn.net/chenwenhao0304/article/details/50822687   golang 长短连接处理
http://www.jianshu.com/p/c322edca985f  Tao - Go语言实现的TCP网络编程框架
https://go-zh.org/doc/effective_go.html  实效Go编程
http://www.cnblogs.com/php-rearch/p/5975890.html  debug输出
通过debug.PrintStack()方法可以将当前所在的goroutine的stack trace打印出来. 可以通过pprof.Lookup("goroutine").WriteTo将所有的goroutine的stack trace都打印出来. 你可以使用runtime.Stack得到所有的goroutine的stack trace信息
http://colobu.com/2016/12/21/how-to-dump-goroutine-stack-traces/  调试利器：dump goroutine 的 stacktrace


热更新
https://github.com/facebookgo/grace 
https://github.com/rcrowley/goagain
http://my.oschina.net/astaxie/blog/136364
http://studygolang.com/topics/1194
http://www.fising.cn/2014/10/golang-web-%E7%83%AD%E5%8D%87%E7%BA%A7%E6%96%B9%E6%A1%88%E7%A0%94%E7%A9%B6.shtml

godoc -http=:6060

http://bigasp.com/archives/594  golang

http://www.iamle.com/archives/1537.html
http://learnxinyminutes.com/docs/go/

http
http://www.cnblogs.com/yjf512/archive/2012/06/18/2554066.html
https://yq.aliyun.com/articles/47117?spm=5176.8091938.0.0.Kpwjb9    WebSocket 和 Golang 实现聊天功能


mqtt
https://github.com/huin/mqtt
https://github.com/surgemq/surgemq

热部署
http://www.fising.cn/2014/10/golang-web-%E7%83%AD%E5%8D%87%E7%BA%A7%E6%96%B9%E6%A1%88%E7%A0%94%E7%A9%B6.shtml

https://www.zybuluo.com/NickYu/note/58572  mysql
https://www.zybuluo.com/NickYu/note/61130  redis
http://1.guotie.sinaapp.com/?p=400  json
https://github.com/Sirupsen/logrus   log
https://github.com/Dataman-Cloud/go-template/
http://www.infoq.com/cn/articles/build-a-container-golang 通过不到100行Go代码打造你自己的容器


http://www.w3hacker.com/?p=1761
http://www.w3hacker.com/?p=1753

http://tonybai.com/2012/08/14/getting-going-with-go/
http://www.hellogcc.org/effective_go.html  effective go
godoc -http=:8000
https://gowalker.org/

https://my.oschina.net/u/569210/blog/852351   使用 Elastic Stack 来监控和调优 Golang 应用程序
首先需要启用 Golang 的 expvar 服务，expvar（https://golang.org/pkg/expvar/） 是 Golang 提供的一个暴露内部变量或统计信息的标准包。使用的方法很简单，只需要在 Golang 的程序引入该包即可，它会自动注册现有的 http 服务上

同一个目录中所有的go文件的package声明必须相同，所以main方法要单独放一个文件，否则在eclipse和liteide中都会报错
GOPATH=工程根目录；其下应创建src，pkg，bin目录，bin目录中用于生成可执行文件，pkg目录中用于生成.a文件；golang中的import name，实际是到GOPATH中去寻找name.a
go install会依次查找所有GOPATH中的目录寻找包和它依赖包。然后会将报名为main的包生成二进制文件放到GOBIN目录下。将非main包编译成.a文件放到项目对于的pkg目录下。
go install 会自动检测代码更新，如果有变化则重新编译。如果要更详细知道这个过程，可以加上-x参数，这个参数会输出go install过程中实际执行的命令。
对于其他文件夹下的依赖包，如果发现存在.a文件，则不会再重新编译。 使用 -a 参数。go install -a强制更新所有的依赖包，包括Go内置的包。这个方案最简单可靠，不过编译时间会稍长。
http://www.golangtc.com/download/package  安装第三方

http://ju.outofmemory.cn/entry/87147
http://ju.outofmemory.cn/entry/95417
go get github.com/go-sql-driver/mysql
go get github.com/garyburd/redigo/redis

类库
https://github.com/eBay/fabio#installation   http负载均衡
http://nsq.io/   消息
https://github.com/coreos/etcd
https://github.com/siddontang/ledisdb
google推出的gRPC就是一个基于http/2的RPC实现 
https://github.com/avelino/awesome-go
https://github.com/is00hcw/gopkg
https://github.com/mozilla-services/heka

https://www.haiyun.me/archives/1114.html  go redis
https://www.haiyun.me/archives/1051.html go httpclient
https://www.haiyun.me/archives/1049.html  go sync

----------------------
http://www.codeceo.com/article/go-ppt-for-java-programmer.html
http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/  50 mistake
http://blog.xiayf.cn/2015/05/20/fundamentals-of-concurrent-programming/

vsf := make([]string, 0)
vsf = append(vsf, v)

match, _ := regexp.MatchString("p([a-z]+)ch", "peach")
r, _ := regexp.Compile("p([a-z]+)ch")

var dat map[string]interface{}
if err := json.Unmarshal(byt, &dat); err != nil 
strs := dat["strs"].([]interface{})

res := &Response2{}
json.Unmarshal([]byte(str), &res)
enc := json.NewEncoder(os.Stdout)

atomic.AddUint64(&ops, 1)
opsFinal := atomic.LoadUint64(&ops)  // import "sync/atomic"

var mutex = &sync.Mutex{}
mutex.Lock()
mutex.Unlock()

time.Sleep(time.Second)
runtime.Gosched()  // This yielding is handled automatically with e.g. every channel operation and for blocking calls like time.Sleep

import "crypto/sha1"
h := sha1.New()
h.Write([]byte(s))
bs := h.Sum(nil)

sEnc := b64.StdEncoding.EncodeToString([]byte(data))  // import b64 "encoding/base64"
sDec, _ := b64.StdEncoding.DecodeString(sEnc)
fmt.Println(string(sDec))
uEnc := b64.URLEncoding.EncodeToString([]byte(data))

strconv.ParseInt("123", 0, 64)   //import "strconv"
rand.Intn(100)    //import "math/rand"

strs := []string{"c", "a", "b"}   // import "sort"
sort.Strings(strs)
sort.Ints(ints)

s.Join([]string{"a", "b"}, "-")  //import s "strings"
fmt.Printf("%#v\n", p)
fmt.Printf("|%-6.2f|%-6.2f|\n", 1.2, 3.45)
s := fmt.Sprintf("a %s", "string")
fmt.Fprintf(os.Stderr, "an %s\n", "error")

time.Sleep(time.Duration(rand.Intn(100)) * time.Millisecond)
timeout := time.After(80 * time.Millisecond)
case <-timeout:

nanos := now.UnixNano()

defer func() {
    if r := recover(); r != nil {
      fmt.Println("Recovered in f", r)
    }
  }()

http.HandleFunc("/search", handleSearch)
log.Fatal(http.ListenAndServe("localhost:8080", nil))
query := req.FormValue("q")
http.Error(w, `missing "q" URL parameter`, http.StatusBadRequest)


u, err := url.Parse("https://ajax.googleapis.com/ajax/services/search/web?v=1.0")
q := u.Query()
q.Set("q", query)
u.RawQuery = q.Encode()
resp, err := http.Get(u.String())
defer resp.Body.Close()


http://tonybai.com/2014/09/29/a-channel-compendium-for-golang/
Golang在并发设计方面参考了C.A.R Hoare的CSP，即Communicating Sequential Processes并发模型理论。
Actor模型广义上讲与CSP模型很相似。但两种模型就提供的原语而言，又有一些根本上的不同之处：
    – CSP模型处理过程是匿名的，而Actor模型中的Actor则具有身份标识。
    – CSP模型的消息传递在收发消息进程间包含了一个交会点，即发送方只能在接收方准备好接收消息时才能发送消息。相反，actor模型中的消息传递是异步 的，即消息的发送和接收无需在同一时间进行，发送方可以在接收方准备好接收消息前将消息发送出去。
	 – CSP使用显式的Channel用于消息传递，而Actor模型则将消息发送给命名的目的Actor。这两种方法可以被认为是对偶的。
c := make(chan bool) //创建一个无缓冲的bool型Channel 
x, ok = <- c  //从Channel接收一个值，如果channel关闭了或没有数据，那么ok将被置为false
close的channel不会阻塞，我们会读出这个 channel对应类型的零值，这里就是0  通过将已经关闭的channel置为nil，下次select将会阻塞在该channel上，使得select继续下面的分支evaluation。
timeout := time.After(30 * time.Second)

http://studygolang.com/articles/2027   WaitGroup总共有三个方法：Add(delta int),　Done(),　Wait()。



对于 int 、 float64 和 string 数组或是分片的排序， go 分别提供了 sort.Ints() 、 sort.Float64s() 和 sort.Strings() 函数， 默认都是从小到大排序。
go 中对某个 Type 的对象 obj 排序， 可以使用 sort.Sort(obj) 即可，就是需要对 Type 类型绑定三个方法 ： Len() 求长度、 Less(i,j) 比较第 i 和 第 j 个元素大小的函数、 Swap(i,j) 交换第 i 和第 j 个元素的函数。sort 包下的三个类型 IntSlice 、 Float64Slice 、 StringSlice 分别实现了这三个方法， 对应排序的是 [] int 、 [] float64 和 [] string
https://my.oschina.net/2xixi/blog/489780  Golang操作数据库
https://my.oschina.net/2xixi/blog/488811  go语言解析html  https://github.com/PuerkitoBio/goquery
http://www.tuicool.com/articles/jUJJ3q  Golang如何解析Html代码
http://studygolang.com/articles/2730   golang 获取网页内容
http://blog.csdn.net/liangguangchuan/article/details/52858791   goLang 多线程抓取网页数据
http://blog.csdn.net/liangguangchuan/article/details/53928979    golang 使用 goquery 抓取 知乎周刊
  
http://studygolang.com/articles/2685  Go语言中的 Array, Slice和 Map
var c = [...]int {1, 2, 3, 4, 5}   //由初始化列表决定数组长度，不可省去标识符 "..."，否则将变成切片Slice
在声明的时候，直接初始化 var slice1 = []int {1 ,2, 3, 4, 5}
var slice1 = make([]int, 5)  //长度和容量都是 5
可以使用“{}”来在声明的时候进行初始化  var map1 map[string]int {}  
var map2 = make(map[string]int)  //字典的创建


new 的作用是 初始化 一个指向类型的指针 (*T)， make 的作用是为 slice, map 或者 channel 初始化，并且返回引用 T
内建函数 make 分配并且初始化 一个 slice, 或者 map 或者 chan 对象。 并且只能是这三种对象。 但是make 的返回值就是这个类型（即使一个引用类型），而不是指针。
GOPATH 环境变量是用来指定GOROOT之外的，包含项目的源文件和他们的二进制文件的目录。 