http://it.taocms.org/05/10911.htm  gokit
http://studygolang.com/articles/7010

我们知道Go使用GOPATH这个环境变量来管理编译时的源代码路径，所以第三方库也是下载在GOPATH下，并且我们的源代码也需要处于GOPATH下。
bash < <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)
gvm install go1.4.2
gvm use go1.4.2
gvm pkgset create --local  
gvm pkgset use --local  
gvm listall 查看所有的golang版本
使用gvm diff 列出GOROOT中添加或者移除的文件
使用gvm pkgset [create/use/delete] [name]管理GOPATHs
vim ~/.gvm/scripts/install 修改 GO_SOURCE_URL=https://github.com/golang/go

http://colobu.com/2016/04/21/use-vscode-to-develop-go-programs/
https://github.com/Microsoft/vscode-tips-and-tricks/blob/master/README.md
http://www.cnblogs.com/zsy/archive/2016/02/28/5223957.html  配置
http://www.golangtc.com/t/564d30cfb09ecc72c30000b1
到 https://github.com/golang/tools 下载然后放到 golang.org/x/tools 下面。
go get -u -v github.com/nsf/gocode
go get -u -v github.com/rogpeppe/godef
go get -u -v github.com/golang/lint/golint
go get -u -v github.com/lukehoban/go-find-references
go get -u -v sourcegraph.com/sqs/goreturns
go get -u -v golang.org/x/tools/cmd/gorename
go get -u -v github.com/derekparker/delve/cmd/dl

热更新
https://github.com/facebookgo/grace 
https://github.com/rcrowley/goagain
http://my.oschina.net/astaxie/blog/136364
http://studygolang.com/topics/1194
http://www.fising.cn/2014/10/golang-web-%E7%83%AD%E5%8D%87%E7%BA%A7%E6%96%B9%E6%A1%88%E7%A0%94%E7%A9%B6.shtml

godoc -http=:6060

http://bigasp.com/archives/594  golang

http://www.iamle.com/archives/1537.html
http://learnxinyminutes.com/docs/go/

http
http://www.cnblogs.com/yjf512/archive/2012/06/18/2554066.html
https://yq.aliyun.com/articles/47117?spm=5176.8091938.0.0.Kpwjb9    WebSocket 和 Golang 实现聊天功能


mqtt
https://github.com/huin/mqtt
https://github.com/surgemq/surgemq

热部署
http://www.fising.cn/2014/10/golang-web-%E7%83%AD%E5%8D%87%E7%BA%A7%E6%96%B9%E6%A1%88%E7%A0%94%E7%A9%B6.shtml

https://www.zybuluo.com/NickYu/note/58572  mysql
https://www.zybuluo.com/NickYu/note/61130  redis
http://1.guotie.sinaapp.com/?p=400  json
https://github.com/Sirupsen/logrus   log
https://github.com/Dataman-Cloud/go-template/
http://www.infoq.com/cn/articles/build-a-container-golang 通过不到100行Go代码打造你自己的容器


http://www.w3hacker.com/?p=1761
http://www.w3hacker.com/?p=1753

http://tonybai.com/2012/08/14/getting-going-with-go/
http://www.hellogcc.org/effective_go.html  effective go
godoc -http=:8000
https://gowalker.org/


同一个目录中所有的go文件的package声明必须相同，所以main方法要单独放一个文件，否则在eclipse和liteide中都会报错
GOPATH=工程根目录；其下应创建src，pkg，bin目录，bin目录中用于生成可执行文件，pkg目录中用于生成.a文件；golang中的import name，实际是到GOPATH中去寻找name.a
go install会依次查找所有GOPATH中的目录寻找包和它依赖包。然后会将报名为main的包生成二进制文件放到GOBIN目录下。将非main包编译成.a文件放到项目对于的pkg目录下。
go install 会自动检测代码更新，如果有变化则重新编译。如果要更详细知道这个过程，可以加上-x参数，这个参数会输出go install过程中实际执行的命令。
对于其他文件夹下的依赖包，如果发现存在.a文件，则不会再重新编译。 使用 -a 参数。go install -a强制更新所有的依赖包，包括Go内置的包。这个方案最简单可靠，不过编译时间会稍长。
http://www.golangtc.com/download/package  安装第三方

http://ju.outofmemory.cn/entry/87147
http://ju.outofmemory.cn/entry/95417
go get github.com/go-sql-driver/mysql
go get github.com/garyburd/redigo/redis

类库
https://github.com/eBay/fabio#installation   http负载均衡
http://nsq.io/   消息
https://github.com/coreos/etcd
https://github.com/siddontang/ledisdb
google推出的gRPC就是一个基于http/2的RPC实现 
https://github.com/avelino/awesome-go
https://github.com/is00hcw/gopkg
https://github.com/mozilla-services/heka

https://www.haiyun.me/archives/1114.html  go redis
https://www.haiyun.me/archives/1051.html go httpclient
https://www.haiyun.me/archives/1049.html  go sync

----------------------
http://www.codeceo.com/article/go-ppt-for-java-programmer.html
http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/  50 mistake
http://blog.xiayf.cn/2015/05/20/fundamentals-of-concurrent-programming/

vsf := make([]string, 0)
vsf = append(vsf, v)

match, _ := regexp.MatchString("p([a-z]+)ch", "peach")
r, _ := regexp.Compile("p([a-z]+)ch")

var dat map[string]interface{}
if err := json.Unmarshal(byt, &dat); err != nil 
strs := dat["strs"].([]interface{})

res := &Response2{}
json.Unmarshal([]byte(str), &res)
enc := json.NewEncoder(os.Stdout)

atomic.AddUint64(&ops, 1)
opsFinal := atomic.LoadUint64(&ops)  // import "sync/atomic"

var mutex = &sync.Mutex{}
mutex.Lock()
mutex.Unlock()

time.Sleep(time.Second)
runtime.Gosched()  // This yielding is handled automatically with e.g. every channel operation and for blocking calls like time.Sleep

import "crypto/sha1"
h := sha1.New()
h.Write([]byte(s))
bs := h.Sum(nil)

sEnc := b64.StdEncoding.EncodeToString([]byte(data))  // import b64 "encoding/base64"
sDec, _ := b64.StdEncoding.DecodeString(sEnc)
fmt.Println(string(sDec))
uEnc := b64.URLEncoding.EncodeToString([]byte(data))

strconv.ParseInt("123", 0, 64)   //import "strconv"
rand.Intn(100)    //import "math/rand"

strs := []string{"c", "a", "b"}   // import "sort"
sort.Strings(strs)
sort.Ints(ints)

s.Join([]string{"a", "b"}, "-")  //import s "strings"
fmt.Printf("%#v\n", p)
fmt.Printf("|%-6.2f|%-6.2f|\n", 1.2, 3.45)
s := fmt.Sprintf("a %s", "string")
fmt.Fprintf(os.Stderr, "an %s\n", "error")

time.Sleep(time.Duration(rand.Intn(100)) * time.Millisecond)
timeout := time.After(80 * time.Millisecond)
case <-timeout:

nanos := now.UnixNano()

defer func() {
    if r := recover(); r != nil {
      fmt.Println("Recovered in f", r)
    }
  }()

http.HandleFunc("/search", handleSearch)
log.Fatal(http.ListenAndServe("localhost:8080", nil))
query := req.FormValue("q")
http.Error(w, `missing "q" URL parameter`, http.StatusBadRequest)


u, err := url.Parse("https://ajax.googleapis.com/ajax/services/search/web?v=1.0")
q := u.Query()
q.Set("q", query)
u.RawQuery = q.Encode()
resp, err := http.Get(u.String())
defer resp.Body.Close()


http://tonybai.com/2014/09/29/a-channel-compendium-for-golang/
Golang在并发设计方面参考了C.A.R Hoare的CSP，即Communicating Sequential Processes并发模型理论。
Actor模型广义上讲与CSP模型很相似。但两种模型就提供的原语而言，又有一些根本上的不同之处：
    – CSP模型处理过程是匿名的，而Actor模型中的Actor则具有身份标识。
    – CSP模型的消息传递在收发消息进程间包含了一个交会点，即发送方只能在接收方准备好接收消息时才能发送消息。相反，actor模型中的消息传递是异步 的，即消息的发送和接收无需在同一时间进行，发送方可以在接收方准备好接收消息前将消息发送出去。
	 – CSP使用显式的Channel用于消息传递，而Actor模型则将消息发送给命名的目的Actor。这两种方法可以被认为是对偶的。
c := make(chan bool) //创建一个无缓冲的bool型Channel 
x, ok = <- c  //从Channel接收一个值，如果channel关闭了或没有数据，那么ok将被置为false
close的channel不会阻塞，我们会读出这个 channel对应类型的零值，这里就是0  通过将已经关闭的channel置为nil，下次select将会阻塞在该channel上，使得select继续下面的分支evaluation。
timeout := time.After(30 * time.Second)

http://studygolang.com/articles/2027   WaitGroup总共有三个方法：Add(delta int),　Done(),　Wait()。

