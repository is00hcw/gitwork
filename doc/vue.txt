vue.js
https://www.qcloud.com/community/article/430630001490779316   包学会之浅入浅出Vue.js：开学篇
https://www.qcloud.com/community/article/118752  企鹅社区移动版Vue2.0升级手记
https://www.qcloud.com/community/article/608654?fromSource=gwzcw.114365.114365.114365  Vue.js前后端同构方案之准备篇：代码优化
https://github.com/Coffcer/Blog/issues/3   vue 性能优化  异步组件
https://github.com/MeCKodo/vue-tutorial   vue2.0 构建单页应用最佳实战 - V2EX
http://www.jianshu.com/p/5ba253651c3b   Vue2.0 新手完全填坑攻略――从环境搭建到发布
https://zhuanlan.zhihu.com/p/23078117  Vue.js 2.0 快速上手 - 基础篇 
https://segmentfault.com/a/1190000005863691  笔记本例子 https://coligo.io/learn-vuex-by-building-notes-app/ 
http://www.infoq.com/cn/articles/vue-2-progressive-front-end-solution
http://xiangsongtao.com/article/584d614a65017d7408deb8bc
http://lvyongbo.net/2016/09/27/%E7%AA%BA%E6%8E%A2Vue2/
https://github.com/webplus/blog/issues/10  Vue 2.0开发实践（组件间通讯）
http://www.cnblogs.com/xxcanghai/p/6124699.html  如何在Vue2中实现组件props双向绑定
在Vue2中组件的props的数据流动改为了只能单向流动，即只能由组件外（调用组件方）通过组件的DOM属性attribute传递props给组件内，组件内只能被动接收组件外传递过来的数据，并且在组件内，不能修改由外层传来的props数据。
http://blog.zhaiyifan.cn/2016/10/17/vue-2-quick-start/  Vue.js 2.0 快速上手 - 基础篇
https://my.oschina.net/u/3317396/blog/885622   VUE2.0学习总结
https://github.com/ElemeFE/keynote/tree/master/PPT   饿了么ppt  https://elemefe.github.io/keynote/

https://segmentfault.com/a/1190000006741478  vue-cli + webpack 多页面实例配置优化方法
https://segmentfault.com/a/1190000005863691   使用 Vuex + Vue.js 构建单页应用
http://www.open-open.com/lib/view/open1447060624960.html   Vue.js 快速入门
http://www.open-open.com/lib/view/open1462026812188.html   用 Vuex 构建一个笔记应用


https://segmentfault.com/a/1190000006751300   前后端分离与前端工程化
使用 // 来代替http: 和 https: 浏览器会自动适应两种协议的资源访问，兼容性较好。
https://keelii.github.io/2016/07/31/something-have-to-say-with-JD-item/   京东单品页前端开发那些不得不说的事儿
https://segmentfault.com/a/1190000006265503?utm_source=weekly&utm_medium=email&utm_campaign=email_weekly   趣店前端团队基于 koajs 的前后端分离实践

Vuex 要解决的就是这些问题，Vuex 背后有四个核心的概念：
状态树: 包含所有应用级别状态的对象
Getters: 在组件内部获取 store 中状态的函数
Mutations: 修改状态的事件回调函数
Actions: 组件内部用来分发 mutations 事件的函数

https://jsfiddle.net/reeco/jw5hphqg/4/   http://www.doc00.com/doc/1001004eg   vue-resource
https://segmentfault.com/q/1010000005894526/a-1020000005899559
http://www.imooc.com/article/2688
http://www.cnblogs.com/terry01/p/5888650.html


第三方开源库
https://elemefe.github.io/v-charts/#/line  vue集成echart
https://elemefe.github.io/vue-amap/#/zh-cn/base/amap  高德地图
https://zhuanlan.zhihu.com/p/21802181   Mint UI ―― 基于 Vue.js 的移动端组件库
http://elemefe.github.io/mint-ui/#!/
https://github.com/airyland/vux
https://github.com/ElemeFE/vue-desktop
https://github.com/ElemeFE/element
https://github.com/lodamemory/vue-metronic
Bootstrap components built with Vue.js  http://yuche.github.io/vue-strap/
http://www.webpackbin.com/vue
http://www.cnblogs.com/pandabunny/p/5417938.html   vue-cli webpack 引入jquery
npm run dev hotload 
npm run build  index.html   dist  
npm install webpack-dev-server --save-dev
webpack-dev-server
npm install -g http-server
http-server -a 127.0.0.1 -p 7070

http://jiongks.name/blog/just-vue/
http://www.jianshu.com/p/a5361bff1cd8
https://github.com/brandonxiang/example-vue-webpack/tree/s1s2
https://segmentfault.com/a/1190000004060034
http://galen-yip.com/typescript/vue/webpack/2016/06/09/typescrit-vue-todo/?utm_source=tuicool&utm_medium=referral
http://www.cnblogs.com/zhengjialux/p/5848950.html
http://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&mid=2653577777&idx=1&sn=4b5377051bd849b85af17bcf8c05174c&scene=0#wechat_redirect  基于 Webpack & Vue & Vue-Router 的 SPA 初体验
npm install webpack-dev-server -g
全局安装vue-cli，使用命令npm install -g vue-cli。
下载模板代码，使用命令vue init webpack my-project
npm run dev启动热加载，就会去自动化执行package.json里的 
“scripts”: { “dev”: “node build/dev-server.js”, 
https://github.com/vuejs-templates/webpack
vue-cli默认创建的项目都是假设你在做单页应用，也就是仅有一个index.html作为应用入口，剩下的事情都是交由javascript动态处理的。 https://segmentfault.com/q/1010000005793472/a-1020000005793617
src目录下的资源只能import或require。
想静态引入的话，建立一个与src同级的目录例如static，然后把静态资源放入该文件夹下，html的引入路径如下：./static/...   http://www.oschina.net/question/1188944_2152341
https://segmentfault.com/q/1010000004479605
https://github.com/yaoyao1987/vue-cli-multipage   多页面
https://github.com/bluefox1688/vue-cli-multi-page

http://www.w3cfuns.com/notes/15904/fbb4d15b9c22fd373b605805bde8fd44.html
http://www.w3cfuns.com/notes/15904/cad84afddab13604f987cbf511d265e4.html
https://segmentfault.com/q/1010000005169531/a-1020000005170343  第三方
http://blog.csdn.net/usluckily/article/details/51861892
因为 Vue.js 指令是异步更新，如果想在修改数据之后修改 DOM ，应当在 Vue.nextTick 的回调中操作。

https://segmentfault.com/a/1190000004267935
你可以直接就用 vue init <template-name> <project-name> 使用。你也可以运行 vue list 命令来看看现在有哪些官方模板是现在可用的。
目前有以下模板可供选择：
browserify - 拥有高级功能的 Browserify + vueify 用于正式开发。
browserify-simple - 拥有基础功能的 Browserify + vueify 用于快速原型开发。
webpack - 拥有高级功能的 Webpack + vue-loader 用于正式开发。   This template is Vue 2.0 compatible. For Vue 1.x use this command: vue init webpack#1.0 my-project
webpack-simple - 拥有基础功能的 Webpack + vue-loader 用于快速原型开发。


优化
https://github.com/hilongjw/vue-lazyload
http://ac.alloyteam.com/summary.html 腾讯大会
http://download.csdn.net/meeting/meeting_detail/23  sdcc 2016
http://web.jobbole.com/86981/   Angular 和 Vue 按需加载的项目实践优化方案
https://zhuanlan.zhihu.com/p/23926652?refer=moduth   页面加载性能
实践基于路由的代码分块 当 Webpack 在 app 代码中发现 require.ensure()（在 Webpack 2 中是 System.import）时，支持分割代码。这些方法出现的地方被称为“分割点”，Webpack 会对它们的每一个都生成一个分开的 bundle，按需解决依赖。
https://github.com/googlechrome/lighthouse
http://www.alloyteam.com/2015/10/optimization-of-alloyteam-series-node-directly-transferring-your-web-pages-second-opening/
http://www.cnblogs.com/ihardcoder/p/5819005.html
https://smallpath.me/post/spa-opti  tree-shaking打包减少无用代码
分块异步加载也是SPA的一种常见首屏优化策略, 指将首屏中不需要的组件分割开, 在访问其他路径时才加载服务器的另一个块来获取需要的组件.
SSR是SPA的终极目的地了, 除了可以解决SEO外, 还可以大幅度降低首屏加载速度
https://etianqq.gitbooks.io/vue2/content/%E9%83%A8%E7%BD%B2.html  v-if指令其实很有用处，它可以让我们项目中暂时不需要的组件不进行渲染，等需要用到的时候在渲染

ssr
https://blog.alphatr.com/how-to-use-ssr-in-vue-2.0.html
https://smallpath.me/post/thinkjs-ssr
https://smallpath.me/post/vue2-ssr-email-template
https://segmentfault.com/a/1190000007985486
 


rxjs
https://fe.ele.me/let-us-learn-rxjs/   Observable.fromEvent   Observable.fromPromise   Rx.Observable.interval(1000)
https://github.com/joeyguo/blog/issues/11  构建流式应用―RxJS详解  http://www.alloyteam.com/2016/12/learn-rxjs/
https://alligator.io/vuejs/using-rxjs/
https://www.learnrxjs.io/
https://github.com/JayKan/RxJS-Playground
https://github.com/Reactive-Extensions/RxJS/tree/master/examples