Netty提供了一个专门处理TCP协议数据的Handler：LengthFieldBasedFrameDecoder ，它的原理是服务器端和客户端约定一个协议格式：数据包=协议长度+协议体
https://yq.aliyun.com/articles/5950?spm=5176.8091938.0.0.N1quQd    Netty4详解二：开发第一个Netty应用程序
https://yq.aliyun.com/articles/54762?spm=5176.100239.blogrightarea54750.13.Q6NBuJ   Netty 基于Http协议下的数据传输Demo

https://yq.aliyun.com/articles/5947?spm=5176.100240.searchblog.75.1gWXaF   Netty4详解三：Netty架构设计
Handler主要用来处理各种事件，这里的事件很广泛，比如可以是连接、数据接收、异常、数据转换等。
ChannelInboundHandler，一个最常用的Handler。这个Handler的作用就是处理接收到数据时的事件
一个Channel会对应一个EventLoop，而一个EventLoop会对应着一个线程，也就是说，仅有一个线程在负责一个Channel的IO操作。
当一个连接到达，Netty会注册一个channel，然后EventLoopGroup会分配一个EventLoop绑定到这个channel,在这个channel的整个生命周期过程中，都会由绑定的这个EventLoop来为它服务，而这个EventLoop就是一个线程。
第一个最明显的区别是，ServerBootstrap用于Server端，通过调用bind()方法来绑定到一个端口监听连接；Bootstrap用于Client端，需要调用connect()方法来连接服务器端
如果一个ServerBootstrap有两个EventLoopGroup，那么就可以把第一个EventLoopGroup用来专门负责绑定到端口监听连接事件，而把第二个EventLoopGroup用来处理每个接收到的连接
一般情况下一个EventLoopGroup中的EventLoop数量会少于Channel数量，那么就很有可能出现一个多个Channel公用一个EventLoop的情况，这就意味着如果一个Channel中的EventLoop很忙的话，会影响到这个Eventloop对其它Channel的处理，这也就是为什么我们不能阻塞EventLoop的原因。
如果数据是从外部流入我们的应用程序，我们就看做是inbound，相反便是outbound。数据在各个Handler之间传递，这需要调用方法中传递的ChanneHandlerContext来操作， 在netty的API中提供了两个基类分ChannelOutboundHandlerAdapter和ChannelOutboundHandlerAdapter，他们仅仅实现了调用ChanneHandlerContext来把消息传递给下一个Handler，
当一个ChannelHandler被加入到ChannelPipeline中时，它便会获得一个ChannelHandlerContext的引用，而ChannelHandlerContext可以用来读写Netty中的数据流。因此，现在可以有两种方式来发送数据，一种是把数据直接写入Channel，一种是把数据写入ChannelHandlerContext，它们的区别是写入Channel的话，数据流会从Channel的头开始传递，而如果写入ChannelHandlerContext的话，数据流会流入管道中的下一个Handler。  
Decoder会覆盖其中的“ChannelRead()”方法，在这个方法中来调用具体的decode方法解码传递过来的字节流，然后通过调用ChannelHandlerContext.fireChannelRead(decodedMessage)方法把编码好的Message传递给下一个Handler。
Netty提供了一个最常用的基类SimpleChannelInboundHandler<T>，其中T就是这个Handler处理的数据的类型（上一个Handler已经替我们解码好了），消息到达这个Handler时，Netty会自动调用这个Handler中的channelRead0(ChannelHandlerContext,T)方法，T是传递过来的数据对象

在特定的场景中，有可能会遇到延迟的ACK，它会限制链路上所发送的数据包，每秒钟只会有2-5个数据包。这是因为TCP两个算法所引起的死锁：Nagle以及TCP Delayed Acknowledgement。在200-500ms的超时之后，会打破这个死锁，但是微服务之间的通信却会分别受到影响。推荐的方案是使用TCP_NODELAY，它会禁用Nagle的算法，多个更小的包可以依次发送。
在Log4j中却大量的使用了synchronized这个关键字，在并发非常高的时候会产生非常多的阻塞，最终内存资源耗尽报出内存溢出错误。将log4j日志改为异步+buffer的模式。

“Cannot assign requested address.”是由于linux分配的客户端连接端口用尽，无法建立socket连接所致，虽然socket正常关闭，但是端口不是立即释放，而是处于TIME_WAIT状态，默认等待60s后才释放。
#调低端口释放后的等待时间，默认为60s，修改为15~30s  
net.ipv4.tcp_fin_timeout=20  
#修改tcp/ip协议配置， 通过配置/proc/sys/net/ipv4/tcp_tw_resue, 默认为0，修改为1，释放TIME_WAIT端口给新连接使用  
net.ipv4.tcp_tw_reuse = 1  
http://blog.csdn.net/jone_lu/article/details/50571566

http://www.infoq.com/cn/articles/netty-version-upgrade-history-thread-part?utm_source=infoq&utm_medium=popular_widget&utm_content=presentation&utm_campaign=popular_content_list
http://www.infoq.com/cn/articles/netty-million-level-push-service-design-points
http://www.infoq.com/cn/articles/netty-concurrent-programming-analysis
http://www.infoq.com/cn/articles/netty-threading-model

https://github.com/netty/netty/wiki/Adopters
http://blog.csdn.net/u013252773/article/details/21254257  入门
http://www.cnblogs.com/luxiaoxun/p/3959450.html
http://www.infoq.com/cn/articles/netty-server-create
http://www.infoq.com/cn/articles/netty-million-level-push-service-design-points
.option(ChannelOption.TCP_NODELAY, true).option(ChannelOption.RCVBUF_ALLOCATOR, AdaptiveRecvByteBufAllocator.DEFAULT).option(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)
TCP层面的接收和发送缓冲区大小设置，在Netty中分别对应ChannelOption的SO_SNDBUF和SO_RCVBUF，需要根据推送消息的大小，合理设置，对于海量长连接，通常32K是个不错的选择。
http://www.infoq.com/cn/articles/netty-security?utm_source=infoq&utm_medium=related_content_link&utm_campaign=relatedContent_articles_clk


http://www.blogjava.net/yongboy/archive/2013/05/13/399203.html  Java Netty处理1M连接会怎么样

NetFlix对Dynamo的开源通用实现Dynomite
 


vert.x
http://colobu.com/2016/03/31/vertx-thread-model/?utm_source=tuicool&utm_medium=referral  
http://wanshi.iteye.com/blog/2255579
http://tutorials.jenkov.com/vert.x/index.html
http://www.csdn.net/article/2015-12-21/2826533?utm_source=tuicool&utm_medium=referral
http://www.jianshu.com/p/ceb36b8a676d
http://www.csdn.net/article/2015-08-20/2825505-Vert.x
http://www.jianshu.com/p/e25234203602
https://github.com/ef-labs/vertx-jersey
http://www.tuicool.com/articles/ERje2y
https://github.com/quanke/vertx3_study_demo
http://quanke.name/2016/01/15/Vert-x-%E5%AE%9E%E7%8E%B0REST/
http://quanke.name/2016/04/09/Vert-x-3-x%E7%89%88%E6%9C%ACcallback-hell%E7%9A%84%E8%A7%A3%E5%86%B3/
http://quanke.name/2016/04/04/Vert-x%E9%85%8D%E7%BD%AE%E9%A1%B9VertxOptions%E7%9A%84%E4%BD%BF%E7%94%A8/
http://quanke.name/2016/01/16/%E6%80%8E%E6%A0%B7%E5%86%99%E4%B8%80%E4%B8%AA%E5%AE%89%E5%85%A8%E7%9A%84Vert-x-Web-apps/
http://quanke.name/2016/01/12/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAVert-x-3-%E5%BA%94%E7%94%A8/
Vert.x可以通过使用Hazelcast实现底层的事件总线的多节点集群。

verticle是vert.x中的组件，可理解成java中的servlet、pojo bean或akka中的actor。一个组件可有多个实例。verticle实例之间的通讯通过Event Bus，发消息到Event Bus。
verticle可分为两种类型：标准verticle和worker verticle。
标准verticle运行在vert.x实例的事件循环线程中，也就是当有事件发生时，在事件循环线程中回调verticle实例中的event handler。   

worker verticle在background workers线程池中执行，该线程池的大小缺省为40。worker verticle又可分成两种，一种是多线程worker verticle，一个多线程worker verticle实例可在多个worker线程中并发执行，另一种是单线程worker verticle，在同一时间只能有一个线程执行（串行执行），但在不同时间可被不同线程执行。
event bus可理解为一个分布式的消息队列系统，支持点对点（队列）、发布-订阅（topic）、请求-响应模式。
对可能阻塞事件循环的操作或任务，可调用context的executeBlocking方法，将操作放到worker线程池中执行或通过event bus发消息触发worker verticle执行。

Vertx.vertx().createHttpServer().requestHandler(req -> req.response().end("Hello World!")).listen(8080);

vertx run Server.java -redeploy   http://vert-x3.github.io/docs/vertx-core/java/#_thread_safety
http://www.hascode.com/2013/11/creating-a-websocket-chat-application-with-vert-x-and-java/
http://www.javaworld.com/article/2078838/mobile-java/open-source-java-projects-vert-x.html
http://qiita.com/p-baleine@github/items/d9975dad4e44987b48c8
http://qiita.com/p-baleine@github/items/304912bea4a041ae653b
http://www.csdn.net/article/2015-05-20/2824733-Java?utm_source=tuicool
https://bitbucket.org/hascode/vertx-websocket-chat/downloads
http://vert-x3.github.io/
http://vertxer.org/meetup/2015/05/09/vertx-introduction.html
http://www.informatik-aktuell.de/entwicklung/programmiersprachen/vertx-3-reactive-microservices.html