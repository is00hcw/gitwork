在设计时没考虑过这个设计方式对研发阶段、运维阶段的影响，后来纠正这个错误的方法是去掉了这个xml文件，改为写了一个Spring FactoryBean，用户在spring的bean配置文件中配置下就可以。
对于一个架构师来说，在技术选型上对技术细节是要有很强的掌控力的。
突然发现一个问题是以前的通信协议上是没有版本号的，在设计通信协议和选择序列化/反序列化上没充分考虑到将来多语言的问题，导致了后来在多语言场景非常的被动
由于是通过硬件负载均衡建连，意味着服务调用方其实看到的都是同一个地址，这也就导致了当服务发布方重启时，服务调用方重连就会集中的连到存活的机器上，连接还是长连，因此就导致了负载的不均衡现象。
对于一个架构师来说，设计时的全面性要非常的好，我现在一般更多采用的方式是推演上线后的状况，一般来说在脑海里过一遍会比较容易考虑到这些问题。
这个问题后来纠正的方法是在服务发布和调用者在连接我们的一个点时，顺带把用的服务框架的版本号带上，于是就可以很简单的知道全网的服务框架目前在运行的版本号了。
这个问题主要原因是在做整体设计时遗漏掉了这个关键点的考虑，当时倒不是完全忽略了这个点，而是在技术细节上判断错误，导致以为不太要做改动。
https://yq.aliyun.com/articles/57642?spm=5176.100239.bloglist.21.LYRurr

http://www.infoq.com/cn/architect/
http://www.infoq.com/cn/minibooks/architect-201506
http://sz2014.archsummit.com/schedule.html
http://sz2014.archsummit.com/video.html
http://bj2014.archsummit.com/slides.html

http://wenku.it168.com/redian/ArchSummit/
http://pan.baidu.com/share/home?uk=387674681&view=share#category/type=0

http://blog.jobbole.com/41233/
http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api
X-RateLimit-Limit	每小时的限制调用次数，超过后服务器会返回 403 错误
X-RateLimit-Remaining	当前小时中还剩下的调用次数
X-RateLimit-Reset	限制重置时间 unix time

http://www.waylau.com/about-vpngate/   vpn
http://opentalk.upyun.com/show/issues  会议ppt
http://www.stuq.org/ppt/qcon2015/2a5d9377caceed899f1c2d14097285fc
http://news.oneapm.com/author/fan/  oneapm公开课

BaaS(Backend as a Service)，后端即服务，为移动应用和游戏开发者提供后端服务，服务包括结构化的数据存储、用户和权限管理、文件存储、云参数、云代码、推送、支付、实时通信等。
Google在NSDI '16会议上公开了它的软件网络负载均衡器Maglev

http://www.csdn.net/article/2015-06-09/2824906   基于Mesos和Docker的分布式计算平台
分布式系统针对不允许有单点失效的要求有两方面的设计考虑，一种是服务类的企业级应用，每个服务后台实例都要有多个副本，一两台硬件故障不至于影响所有服务实例；另外一种数据存储的应用，每份数据也必须要有多个备份，保证即使某几个硬件坏掉了数据也不会丢失。 除了单点失效，还要保证高可靠性。
在分布式环境下，针对企业级服务应用，要做负载均衡和服务发现来保证高可靠性；针对数据服务，为了做到高可靠性，首先要按照某种算法来把整体数据分片（因为一台服务器装不下），然后按照同样的算法来进行分片查找。
再一个分布式设计理念是数据本地性，因为网络通信开销是分布式系统的瓶颈，要减少网络开销，应当让计算任务去找数据，而不是让数据去找计算。
和单机Linux一样要解决五大类操作系统必需的功能，即资源分配、进程管理、任务调度、进程间通信（IPC）和文件系统，可分别由Mesos、Docker、Marathon/Chronos、RabbitMQ和HDFS/Ceph来解决，对应于Linux下的Linux Kernel、Linux Kernel、init.d/cron、Pipe/Socket和ext4
Mesos可以理解成一个分布式的Kernel，只分配集群计算资源，不负责任务调度。基于Mesos之上可以运行不同的分布式计算平台，如Spark、Storm、Hadoop、Marathon和Chronos等。
Marathon针对服务型分布式应用提供任务调度，比如企业网站等这类需要长时间运行的服务。通常网站应用程序没有任务调度和容错能力，因为网站程序不太会处理某个后台实例挂掉以后要在哪台机器上重新恢复等这类复杂问题。
Chronos是针对分布式批处理应用提供任务调度，比如定期处理日志或者定期调Hadoop等离线任务。
对于服务类型的任务，分布式环境保证服务的高可靠性，这需要负载均衡和服务发现。在分布式环境下做负载均衡有一个难点就是后台这些实例有可能发生动态变化。比如说Marathon给某个服务增加了新的实例，把新调度的实例地址端口写到Zookeeper，然后Bamboo把Zookeeper里存放的该服务新的实例的地址端口信息告诉负载均衡器，这样负载均衡器就知道新的实例地址端口，完成了服务发现。
Hadoop文件系统HDFS，如图10所示，每个数据块有三个备份，必须放在不同的服务器上，而且三个备份里面每个机架最多放两份，这么做也是为了容错。Ceph是另一种流行的开源分布式文件系统。Ceph把网络存储设备抽象成一张逻辑硬盘，然后“挂载”到分布式集群的每台服务器上，原理上非常像是Linux操作系统Mount一块物理硬盘。这样一来，用户程序访问Ceph的文件系统就跟访问Linux本地路径一样，非常方便。
没有监控就等于程序运行在黑盒子下，无法调优，必须要有监控。分布式环境下的监控分为两个部分，一是性能监控，另一个是报警。性能监控要知道每个应用程序运行状态是什么样，即每一个应用程序占了多少CPU内存、服务的请求处理延迟等。我们是用Graphite来做应用程序性能监控；还有其他系统，比如MongoDB、Hadoop等开源系统，我们用Ganglia来做性能监控，比如CPU内存硬盘的使用情况等。报警是要在关键服务出现故障时，通知开发运维人员及时排解故障，我们用Zabbix来做报警。


kopf 管理Elasticsearch 集群真心方便
http://www.jianshu.com/p/3efbbf265f15  创业可以用到的一些第三方服务
http://data.qq.com/article?id=2835   腾讯大数据套件带你玩转大数据
https://github.com/coreos/etcd/blob/master/Documentation/libraries-and-tools.md  etcd
http://debugo.com/hbase-access-control/  HBase 权限控制

Solr集群与常规集群本质上没有什么不同。也是前端是负载均衡器，后端是一台台Solr服务器。此时各个Solr服务器上的数据是完全相同的。当有数据更新时(比如Client端提交了一个新的文档),需要将数据复制到其他各个节点.
SolrCloud是基于ZooKeeper和Solr的分布式解决方案，为Solr添加分布式功能，用于建立高可用、高伸缩、自动容错、分布式索引、分布式查询的Solr服务器集群。
http://blog.cheyo.net/130.html
http://tech.uc.cn/?p=2387
http://blog.163.com/xiangfei209@126/blog/static/98695674201393024742225

http://chuansong.me/n/1208635   天机镜―优土大数据平台应用级别监控神器
http://www.hollischuang.com/archives/1036   各大互联网公司架构演进之路汇总
https://github.com/ty4z2008/Qix/blob/master/ds.md?spm=5176.blog8069.yqblogcon1.8.sMZNTk&file=ds.md   分布式系统(Distributed System)资料
https://github.com/is00hcw/translations/blob/master/log-what-every-software-engineer-should-know-about-real-time-datas-unifying/README.md    日志：每个软件工程师都应该知道的有关实时数据的统一抽象
http://news.oneapm.com/docker-monitoring/   Docker 监控实战
http://www.infoq.com/cn/articles/diffy-twitter-open-source-automation-testing-tool  Diffy是一个开源的自动化测试工具，它能够自动检测基于Apache Thrift或者基于HTTP的服务。使用Diffy，只需要进行简单的配置，之后不需要再编写测试代码。
https://yq.aliyun.com/articles/45?spm=5176.100240.searchblog.101.1KrXg6   阿里通信基础技术框架介绍
https://yq.aliyun.com/articles/2764?spm=5176.team25.teamshow1.21.UCfwgH   微服务（Microservice）那点事
https://yq.aliyun.com/articles/9?spm=5176.team25.teamshow1.12.UCfwgH   如何健壮你的后端服务
https://yq.aliyun.com/articles/3215?spm=0.0.0.0.dBgmd9  古谦在演讲中总结了6个原则：尽可能拆分   服务架构“去中心化”异步化  数据化运营  尽可能使用成熟组件  尽可能自动化
http://www.infoq.com/cn/news/2016/03/Stack-Overflow-architecture-insi    Stack Overflow 2016最新架构探秘
http://wuchong.me/blog/2014/08/07/distributed-storage-system-knowledge/  分布式存储系统 知识体系
http://wuchong.me/blog/2014/04/19/recsys-cf-study/   推荐系统学习：协同过滤实现
http://data.qq.com/article?id=2863    zookeeper运营经验分享
http://h2ex.com/820   支撑微博千亿调用的轻量级RPC框架：Motan
https://yq.aliyun.com/articles/7443?spm=5176.blog773.yqblogcon1.28.Pp9rK1   微服务熔断与隔离
http://geek.csdn.net/news/detail/49447   快的打车架构实践
http://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&mid=207036840&idx=1&sn=c99efd40a32e61e6e330f31d7e55e34e#rd   解析Docker在芒果TV的实践之路
http://colobu.com/2015/11/09/The-Stack-of-uriDB/   uriDB网站的可扩展的技术栈
http://colobu.com/2015/07/27/architecture-evolution-of-large-sites/  常用的负载均衡技术硬件的有F5，价格比较贵，软件的有LVS、Nginx、HAProxy。LVS是四层负载均衡，根据目标地址和端口选择内部服务器，Nginx是七层负载均衡和HAProxy支持四层、七层负载均衡
http://www.infoq.com/cn/articles/etcd-interpretation-application-scenario-implement-principle   etcd：从应用场景到实现原理的全方位解读
http://vernonzheng.com/2015/02/09/%E5%BC%80%E6%BA%90%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E9%80%89%E5%9E%8B/   开源分布式配置中心选型
http://www.wtoutiao.com/p/W60ga7.html  软件定义网络（Software Defined Network, SDN ）
http://www.wtoutiao.com/p/1b7mzPR.html  短视频社区 “美拍” 的架构实战
http://www.infoq.com/cn/articles/e-commerce-web-tech-stack    电商网站的初期技术选型
http://geek.csdn.net/news/detail/55210   小米网技术架构变迁实践
http://news.sina.com.cn/o/2015-11-06/doc-ifxknivr4224771.shtml   构建高可用、可扩展的IoT云服务
http://www.leiphone.com/news/201510/ekGwTA7n2QXTo7cs.html   商用物联网系统的开源之路
http://blog.qiniu.com/archives/4741   七牛CEO许式伟：服务端开发那些事儿
http://blog.qiniu.com/archives/3928   七牛是如何搞定每天500亿条日志的
http://blog.qiniu.com/archives/4499   七牛CEO许式伟分析GO语言发展现状
http://blog.qiniu.com/archives/4791   携程异步消息系统实践
http://www.wtoutiao.com/p/1599vLV.html  性能优化模式
https://yq.aliyun.com/articles/4226?spm=5176.team22.teamshow1.9.FnsioV   弹性伸缩部署
http://www.infoq.com/cn/articles/hbase-second-index-engine/   HBase高性能复杂条件查询引擎
http://www.csdn.net/article/2015-10-24/2826028   58同城沈剑：好的架构源于不停地衍变，而非设计
http://www.infoq.com/cn/articles/kugou-big-data-platform-restructure  酷狗
http://www.infoq.com/cn/articles/scala-architecture-wacai  挖财
数据分析这块，Canal会把binlog数据丢到Kafka然后同步到其他系统。在线分析主要通过Storm进行，数据分析过程中缓存用了豌豆荚的Codis。离线分析目前用Hadoop/Spark的方式，数据分析之后，一部分存到Hbase，另一部分在通过Cobar存储到MySQL里面。
Scala的优点体现在，原来Java里的设计模式，现在在Scala的语言层面就提供了。比如说Java里的单例，Scala直接对应的就是object；访问者模式我们可以用更优雅直观的模式去匹配；还有构造器模式；依赖注入在Scala里面有蛋糕模式。不可变的模式主要是在并发编程里面的
Scala里面以隐式参数或者隐式转换的方式实现动态语言的等价效果，只不过这种方式在编译器能够更好的检测
他的类型系统是从ML系语言以及Hashkell过来的，在类型方面有很多高阶特性. 甚至他的类型系统本身也是图灵完备的，可以用类型系统解决SKI组合子问题，我推荐大家去搜一下用Scala的类型系统来解决汉诺塔的程序，依赖类型来解决问题思路是这样的：编译即运算。
SKI 组合子演算是一个计算系统，它是对无类型版本的 Lambda 演算的简约。这个系统声称在 Lambda 演算中所有运算都可以用三个组合子S、K和I来表达。
Akka系统中所有的actor创建都由其父actor掌管，当把actor也当作spring中的一个bean时，Akka需要做一点”妥协”，它提供了Indirect的Producer，可以包装到一个Akka的Extension里来简化actor在spring中的构造。
no-adapted-args这个参数告诉编译器我们不要去做适配的事情。

http://www.tuicool.com/articles/BZ7rim
ZooKeeper 默认不会自动清理 tx log，所以总会有一天你会收到磁盘报警（如果你有磁盘监控的话）。开启自动清理机制后，就不用担心了，我的配置如下：
autopurge.snapRetainCount=500
autopurge.purgeInterval=24
echo srvr | nc 192.168.12.4 2181
https://github.com/ireaderlab/zkdash
Zookeeper升级采用逐台重启，并且先Follower最后Leader的方式升级。重启Follower时，其上的连接经过CONNECTION_LOSS后会重新连上Zookeeper集群，到最后重启Leader时，集群将重新选主，期间服务不可用，最坏情况的选主时间按1MIN/GB来计算。
目前Zookeeper不支持动态扩容，扩容需要重启服务。需要注意的是扩容能提高集群的读能力，但是会降低集群的写能力。通常从稳定性的角度考虑集群大小，线上通常采用5台机器搭建集群，最多能容仍2台机器异常。
我们都知道zookeeper可用的前提是过半的node是正常work的，那么3台机器只允许当掉一台，5台机器就允许当掉两台，以此类推。因此如果希望能在当掉N台机器仍然保证集群可用，那就必须部署一个2N+1的集群。

主要在于增加机器之后，数据需要rebalance到新增的空闲节点，即把partitions迁移到空闲机器上。kafka提供了bin/kafka-reassign-partitions.sh工具，完成parttition的迁移。
http://mdba.cn/?p=945

1、Setinel的参数配置
1） 主观下线时间（down-after-milliseconds）：20s，20s没有收到redis的任何回复，sentinel认为redis已经下线。
2） 客观下线：sentinel集群中一半以上的节点都确认了主观下线，redis将进入客观下线状态。O_DOWN将会触发sentinel leader执行failover。
3） fail-over timeout：在leader节点执行了failover之后，其他节点将重新尝试failover，避免之前的failover失败。
http://mdba.cn/?p=869

推荐使用 kafka-manager 工具，可以实时查看kafka同步状态，broker实时读写流量，topic分区情况等信息，提供重选最优leader等操作。
http://blog.csdn.net/lsshlsw/article/details/47300145
http://www.ibm.com/developerworks/cn/opensource/os-cn-kafka-distributed/
http://www.lujinhong.com/kafka%E9%9B%86%E7%BE%A4%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97.html

Apache Crunch是一个 Java 类库，它用于简化 MapReduce 作业的编写和执行，并且可以用于简化连接和数据聚合任务API的Java类库。
https://github.com/cloudera/crunch


如空间和时间复杂度都较为均衡的双数组Trie树算法来实现。Trie树也称为字典树或者是单词查找树，它的好处在于可以利用字符串的公共前缀以减少查询时间，最大限度的减少字符串比较次数，降低关键词在内存中占用的存储空间。
Trie本质上是一个有限状态机，根据输入的数据进行状态转移。可能会在文本当中夹杂一些干扰字符来绕过敏感词检查，如“美*利*坚”，这就需要我们对输入的文本做降噪处理，过滤掉其中的干扰字符，再进行匹配。
分类实际上就是按照某种标准来给对象贴标签，然后再根据标签进行区分，基于概率统计的贝叶斯分类算法[5]是最常见的分类算法，也是目前垃圾文本识别领域应用最广泛的算法。
Bloom Filter是一个m位的数组，初始状态下数组所有位被置0，需要设置黑名单时，通过一系列不同的hash函数，每个hash函数将对应的输入元素映射到数组中的一位上，通过hash函数得到数组的索引，将数组对应位置1，在查询的时候，通过相同的hash函数，找到对应的位，如果对应的位不都为1的话，则表示用户不在黑名单中，那么，当所有的位都为1的情况，就表示用户一定黑名单中么？也不一定
基本的Bloom Filter是不支持删除操作的，Counting Bloom Filter的出现解决了这个问题，它将标准Bloom Filter位数组的每一位扩展为一个小的计数器（Counter），在插入元素时给对应的k（k为哈希函数个数）个Counter的值分别加1，删除元素时给对应的k个Counter的值分别减1
http://www.infoq.com/cn/articles/alibaba-broadcast-platform-technology-challenges    鏖战双十一-阿里直播平台面临的技术挑战


Vagrant就是为了方便的实现虚拟化环境而设计的，它使用Ruby开发，基于VirtualBox等虚拟机管理软件的接口，提供了一个可配置、轻量级的便携式虚拟开发环境。使用Vagrant可以很方便的就建立起来一个虚拟环境，而且可以模拟多台虚拟机，这样我们平时还可以在开发机模拟分布式系统。
Vagrant 是一个虚拟机管理工具，非常适合用于搭建开发环境。Vagrant 默认已经内置了 VirtualBox Provider 用来跟 VirtualBox 交互.  它的下层是VirtualBox, VMware, AWS或者其他provider. 如果你或者你的伙伴创建了一个Vagrantfile，那么你只需要执行vagrant up就行了，所有的软件都会安装并且配置好。
vagrant init hashicorp/precise32
vagrant up
执行以上命令之后，你已经拥有了一个Ubuntu 12.04 LTS 32-bit系统运行在VirtualBox中。 你可以通过vagrant ssh登录到这个虚拟机中，如果你不需要它了，可以通过vagrant destroy来销毁。
http://weizhifeng.net/learn-vagrant-01.html
https://imququ.com/post/vagrantup.html
如果你要其他系统的镜像，可以来这里下载：http://www.vagrantbox.es/
添加镜像到 Vagrant  假设我们下载的镜像存放路径是 ~/box/precise64.box，在终端里输入：vagrant box add hahaha ~/box/precise64.box
https://mos.meituan.com/library/4/how-to-use-vagrant-with-mos/
http://www.dreamxu.com/vagrant/
http://doc.shurenyun.com/practice/vagrant.html
前面讲的 box 实际上它是一个zip包，包含了 Vagrant 的配置信息和 VirtualBox 的虚拟机镜像文件.
box中的镜像文件被放到了：/Users/mymac/.vagrant.d/boxes/，如果在 Windows 系统中应该是放到了： C:\Users\当前用户名\.vagrant.d\boxes\ 目录下。
http://open.shurenyun.com/article/6
http://www.ituring.com.cn/Article/131438
将 c:\User\<username>\.vagrant.d 目录移动到新的位置   设置 VAGRANT_HOME 环境变量指向新的位置即可。
https://github.com/jose-lpa/packer-ubuntu_14.04/releases/download/v2.0/ubuntu-14.04.box

beats有三个典型的例子：Filebeat、Topbeat、Packetbeat。Filebeat用来收集日志，Topbeat用来收集系统基础设置数据如cpu、内存、每个进程的统计信息，Packetbeat是一个网络包分析工具，统计收集网络信息。

akka.util.internal.HashedWheelTimer
org.jgroups.util.HashedTimingWheel
https://projectreactor.io/docs/api/reactor/fn/timer/HashWheelTimer.html
http://novoland.github.io/%E5%B9%B6%E5%8F%91/2014/07/26/%E5%AE%9A%E6%97%B6%E5%99%A8%EF%BC%88Timer%EF%BC%89%E7%9A%84%E5%AE%9E%E7%8E%B0.html


https://www.linkedin.com/pulse/100-open-source-big-data-architecture-papers-anil-madan


图片优化
http://segmentfault.com/a/1190000000658499
http://cabbit.me/web-image-optimization/
http://news.oneapm.com/java-web1/  前端高性能资源优化
http://www.tuicool.com/articles/Ir6V3qr
http://www.w3cplus.com/performance/build-fast-loading-mobile-website.html

https://mos.meituan.com/library/30/how-to-optimize-nginx/   Nginx性能优化
http://songlisha.blog.51cto.com/6269280/1598922  CentOS之Phabricator的安装配置

 
canal使用
http://my.oschina.net/zmf/blog/366498
http://blog.csdn.net/hackerwin7/article/details/37923607
https://github.com/alibaba/canal/wiki/AdminGuide
http://my.oschina.net/dxqr/blog/524795  otter
可以利用zookeeper的observer特性构成读镜像来提升性能
http://blog.csdn.net/bluerstar/article/details/50378597


http://www.tuicool.com/articles/myEf6nI   weed-fs是用Go语言编写的一个分布式文件系统，主要用于存储大批量的小文件 
http://www.tuicool.com/articles/uaiimu    weedfs是通过将多个小文件的二级制存储到一个大文件中，然后通过索引进行具体的位置的定位。

Opentsdb
http://debugo.com/opentsdb/
http://www.tuicool.com/articles/QZBV7j

docker
http://chuansong.me/n/1940810

http://news.oneapm.com/statsdxi/  StatsD
http://news.oneapm.com/7-java-performance-metrics-oneapm/  Java 应用发布后，需要关注的7个性能指标
http://news.oneapm.com/high-performance-1215/
Apdex 定义了 3 个用户满意区间：「满意」、「可容忍」、「失望」，通过响应时间数值 “T” 来划分。T 值代表着用户满意的响应时间界限，国际上一般默认为 2s，也就是说满意区间就是 0~2s；页面响应时间超过 T 值用户就有些不满了，下一个区间「容忍」的界限值是 T 和 4T，即 4-8 秒之间为容忍区间；响应时间再长用户就开始考虑放弃了，最后一个区间「失望」的响应时间则大于 4T，即多于 8 秒。
Apdex 指数 = [ 满意数量 + （ 可容忍数量 / 2）] / 总样本数 


配置管理
https://github.com/melin/super-diamond
http://my.oschina.net/orgsky/blog/498998
https://github.com/knightliao/disconf
https://github.com/knightliao/disconf/tree/master/disconf-web 安装
https://github.com/knightliao/disconf-demos-java
http://www.tuicool.com/articles/QniqQn7
https://github.com/knightliao/disconf/wiki/%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0Disconf
淘宝内部绝大多数系统的配置都采用diamond来进行统一管理。他将所有配置文件里的配置打散化进行存储，只支持KV结构，并且配置更新的推送是非实时的。百度内部的BJF配置中心服务[3]采用了类似淘宝diamond的实现，也是配置打散化、只支持KV和非实时推送。
https://github.com/knightliao/disconf-demos-java/tree/master/disconf-standalone-dubbo-demo
https://github.com/Qihoo360/QConf

React Native
https://github.com/tmallfe/tmallfe.github.io/issues/18
http://zhuanlan.zhihu.com/FrontendMagazine/19996445
http://blog.cnbang.net/tech/2698/?from=groupmessage&isappinstalled=1

流媒体cdn
http://www.cyzone.cn/a/20140710/260285.html  如何精心设计CDN架构？
http://wenku.baidu.com/link?url=f4nQF6SrowNeumrRfoGAkI4CY0djsTG0bJTCmgBQOaVWLqvq5nxqna7yt3QFk08ChgyTpn0uciw_sNvHoSHzp6cOauJn75WmasrtSrty4KO
http://wenku.baidu.com/link?url=UHEB6_vlaTHUOIS03913wUbREoClv0UFTM9Z9yz6zvPK86-uhJF3jGwoHZy38sUe6rv5IPD8BRj7d5qkOghVknEycUmNW9AafX07JEPg23S
http://www.infoq.com/cn/articles/upyun-cdn
https://github.com/winlinvip/simple-rtmp-server     http://tech.lmtw.com/technews/201506/117403.html
http://chuansong.me/n/1597409   CDN对流媒体和应用分发的支持及优化 | 高可用CDN架构详解

http://www.iresty.com/download/ebook/2015_con/zhangkaitao.pdf
http://jinnianshilongnian.iteye.com/blog/2258111  京东
http://jinnianshilongnian.iteye.com/blog/2235572
http://jinnianshilongnian.iteye.com/blog/2232271


http://www.csdn.net/article/2014-11-06/2822529/1  亿级Web系统搭建――单机到分布式集群
http://www.csdn.net/article/2014-10-21/2822218

http://www.csdn.net/article/2014-10-24/2822278-how-to-bulida-spark-and-cassandra-based-high-performance-data-pipeline    使用Spark+Cassandra打造高性能数据分析平台


ffmpeg
https://github.com/sameersbn/docker-ffmpeg
https://lukasklein.com/docker/ffmpeg/python/2015/06/12/on-demand-transcoder/
http://fubuki.github.io/blog/2014/12/20/docker-ffmpeg/
http://www.aaronliu.me/posts/347375-install-ffmpeg-in-dockerlized-utuntu-14-4
https://github.com/jrottenberg/ffmpeg

挖财
https://github.com/CSUG/real_world_scala
http://afoo.me/references/cobarclient/zh/index.html
