http://gao-xianglong.iteye.com/blog/2237277?spm=5176.blog8295.yqblogcon1.10.nNwFMU
https://github.com/gaoxianglong/shark/wiki/shark%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8
https://github.com/gaoxianglong/shark/wiki/%E5%9F%BA%E4%BA%8Ezookeeper%E7%9A%84%E9%9B%86%E4%B8%AD%E5%BC%8F%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83
https://yq.aliyun.com/articles/36051?spm=5176.100238.yqhn2.18.PzRtHg   MySQL性能分析和优化-part 1


https://yq.aliyun.com/articles/54454?spm=5176.100238.goodcont.5.QmEHjZ   mysql新特性
通过数据订阅提供的SDK 您可以从数据订阅通道中实时获取并消费RDS增量日志。通过数据订阅功能，您可以实现业务消息通知、OLTP->OLAP数据实时同步、定制化ETL的数据实时同步、构建本地灾备等多种应用场景。数据订阅是通过拉取解析并分发RDS实例的增量日志来实现增量数据实时分发的能力  https://yq.aliyun.com/articles/54027?spm=5176.100238.goodcont.62.QmEHjZ

http://onexsoft.cn/?page_id=3896  oneproxy 
https://yq.aliyun.com/edu/lesson/48?spm=5176.100238.yqhn2.27.2Imdy7#tab2    淘宝丁奇：如何解决影响MySQL使用的9大问题
性能分析工具介绍 （mytop,innotop,orzdba,tcpdump,pt-query-digest,tbdba-slowpicker.pl,iotop,ioprofile,nicstat,mpstat,iostat,vmstat,tcprstat,dstat,oprofile,vmtouch）
orzdba 的主要功能： 将MySQL性能元数据进行计算，统计MySQL/INNODB层面的各种指标（QPS/TPS/thread/buffer/log等）和性能阀值展现。 将Linux和MySQL性能指标结合在一起
http://dbaplus.cn/news-11-186-1.html  美图秀秀DBA谈MySQL运维及优化
http://openinx.github.io/2014/05/21/mysql-relatives/  MySQL相关总结
binary log (MySQL) or Oracle Change Data Capture (CDC)

https://www.percona.com/blog/2016/02/29/graphing-mysql-performance-with-prometheus-and-grafana/  prometheus grafana监控
https://github.com/percona/grafana-dashboards  监控
https://github.com/outbrain/orchestrator   可视化复制拓扑 
https://www.percona.com/blog/2016/02/15/mysql-mariadb-with-mariadb-auditing-plugin/  审计
MySQL Utilities 提供的工具可以帮助简化和自动化，甚至一些复制相关的任务。
http://ruiaylin.github.io/2014/05/31/mysql-auto-failover/   mysql5.6自动failover
首先推荐几本书：Pro MySQL , Expert MySQL , mariadb的设计和实现。
http://blog.csdn.net/staricqxyz/article/details/14227037  MySQL Utilities Example
Percona Server是MySQL的一个分支，并且在MySQL数据库上进行了改进在功能和性能上较MySQL有着很显著的提升，默认使用了Percona-XtraDB存储引擎。

https://github.com/mysql/mysql-utilities
https://github.com/yoshinorim/mha4mysql-manager
https://github.com/percona/percona-pacemaker-agents
https://github.com/mariadb-corporation/replication-manager
https://github.com/tumblr/jetpants    https://www.percona.com/live/mysql-conference-2013/sites/default/files/slides/Elias_percona_live_sc_2013.pdf
百度mysql分库分表中间件服务器heisenberg

https://github.com/youtube/vitess
http://www.chinaxing.org/articles/Distribute/2015/09/30/2015-09-29-vitess.html
http://openinx.github.io/2015/02/02/vitess-analysis/

http://xstarcd.github.io/wiki/MySQL/index.html 
http://dockone.io/article/1106  
优化慢查有三宝：
pt-query-digest
explain
show profiling
MySQL单表支持多少数据量的时候性能最好？经验值，不要超过3kw行，不要超过30G。
主从延迟说起来都是泪，目前使用5.7的并行复制在解决。
anemometer本身包含两个部分功能：慢查询的搜集处理，慢查询的展示。
pt-query-digest工具功能相当丰富，一般我们使用它来分析慢查询日志和tcpdump捕捉的原始数据包；当然它还可以用来分析binlog、processlist以及普通的包含sql的文本文件。
online DDL的功能:我们需要借助额外的工具pt-online-schema-change（percona的工具集percona-toolkit中的一个）来实现
sysbench是一个开源的、模块化的、跨平台的多线程性能测试工具，可以用来进行CPU、内存、磁盘I/O、线程、数据库的性能测试。目前支持的数据库有MySQL、Oracle和PostgreSQL。   http://severalnines.com/blog/sql-load-balancing-benchmark-comparing-performance-maxscale-haproxy

http://www.hudings.com/mysql_online_ddl/  mysql在实际业务中，当表容量超过千万级别，DDL操作（比如：加字段、改字段属性、增加删除索引等等）将会很耗时；如果碰上磁盘本身很慢，那么一个操作半个小时都不一定能够完成。这一段时间之内，会锁表，如果有增删改操作，那么整个业务都会卡住，无法正常使用。所以，此时，必须要有在线DDL（online DDL）功能，才能保证业务正常运行。然后，在mysql 5.6版本之前，并没有online DDL的功能；我们需要借助额外的工具pt-online-schema-change（percona的工具集percona-toolkit中的一个）来实现。
http://ruiaylin.github.io/2014/05/13/XtraBackup-slave/  使用Percona XtraBackup热备搭建slave数据库   
http://ruiaylin.github.io/2014/05/22/xtrabackup/
innobase官方有一套针对innodb备份的商业软件InnoDB Hot Backup,可以提供在线备份。percona官方提供了一个与之对应的开源版本的备份工具 —- xtrabackup。 Percona XtraBackup 是一款开源的 MYSQL 热备份工具 ，可以不阻塞的备份innodb和Xtradb的数据库，xtrabackup的优点：可靠高效的备份DB;备份过程中不中断事务处理;快速进行恢复等。
http://www.hello-code.com/blog/mysql/201403/3119.html  pt-online-schema-change模拟了MySQL内部alter table的方式，但是其操作所更新的是复制表，所以原表不会被锁住
https://github.com/vmware/tungsten-replicator  Tungsten Replicator 是一个高性能、开源的数据复制引擎，用于 MySQL、Postgres 和 Oracle 数据库。

在mysql 5.6以后，可以利用本身的mysqlbinlog工具，可以将远端的binlog拉取到本地机器，不再需要写另外的脚本来做这个工作了。
Mariadb开发的MaxScale（1.2.0版本）中就集成了binlog server功能。此时的结构变成如下模式： master-->maxscale-->slave   http://www.hudings.com/mysql-binlog-server/
对比mysql 5.6下，开启GTID和关闭GTID两模式，binlog中主要的区别就是：GTID模式下，会多出“SET @@SESSION.GTID_NEXT= '738ec402-8dd1-11e5-aa4c-e0db551cf1ac:2'”等信息。
http://www.hudings.com/gtid-binlog/

http://blog.tingyun.com/web/article/detail/342     MySQL 性能调优的10个方法
http://huoding.com/2011/04/10/62
HandlerSocket 是MySQL的一个插件,用于跳过MySQL的SQL层面,直接访问内部的InnoDB存储引擎   它通过插件的方式赋予MySQL完整的NoSQL功能，从原理上讲，它跳过MySQL中最耗时的语法解析，查询计划等步骤，直接读取数据，如果内存够大，能装下索引，MySQL的查询效率能提高若干倍      如果使用Percona Server版本的MySQL就简单了，因为它已经内置了HandlerSocket支持
INSTALL PLUGIN handlersocket soname 'handlersocket.so';
SHOW PROCESSLIST;
lsof -i :9999
MySQL5.6提供原生的Memcached API     http://huoding.com/2013/08/20/279
SOURCE /usr/local/mysql/share/innodb_memcached_config.sql
INSTALL PLUGIN daemon_memcached soname "libmemcached.so";

http://huoding.com/2013/05/03/251   MySQL主从服务器数据一致性的核对与修复
http://blog.tingyun.com/web/article/detail/228  MySQL企业常用架构与调优经验分享
http://blog.tingyun.com/web/article/detail/399   MySQL的分页技术总结


Mysos是一个用于运行MySQL实例的Apache Mesos框架。它极大地简化了MySQL集群的管理，具有高可靠性、高可用性及高可扩展性等特点  Apache Cotton, previous named Mysos
http://m.blog.itpub.net/22664653/viewspace-1993393/  MySQL数据库性能测试
http://m.blog.itpub.net/29254281/viewspace-1847415/   开始学习调试MySQL
http://www.netkiller.cn/mysql/index.html  Netkiller MySQL 手札
http://www.chinaxing.org/articles/Database/2015/10/23/2015-10-22-mysql-5.7.html   http://www.techug.com/whats-new-in-mysql  MySQL 5.7 新特性详解

Vitess就是一个例子，它是由谷歌公司贡献的。另一个例子是JetPants，是由 Tumblr公司贡献的。
http://fishblue.github.io/2015/09/08/%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/   分布式关系型数据库解决方案
http://www.gpfeng.com/?p=657    谈谈MySQL水平扩展
http://database.51cto.com/art/201504/474294.htm    数据库专家：MySQL分片水很深
http://mysql.taobao.org/monthly/2015/12/10/  MySQL · 特性分析 · 企业版特性一览
1. mysql fabric 在 Master<–>Slave 的基础上，通过故障检测，进行实例角色变化，完成主备切换;
2. MySQL Fabric-aware connector 根据 fabric 的路由信息，来完成应用的切换。connector根据应用提供的分片规则，来完成路由功能。

galera  haproxy xinetd
https://github.com/olafz/percona-clustercheck
https://www.percona.com/doc/percona-xtradb-cluster/5.6/howtos/haproxy.html
http://www.sebastien-han.fr/blog/2012/04/08/mysql-galera-cluster-with-haproxy/
http://www.sebastien-han.fr/blog/2012/04/01/mysql-multi-master-replication-with-galera/
http://www.sebastien-han.fr/blog/2012/08/06/multi-mysql-instances-with-galera/

双主复制
https://www.digitalocean.com/community/tutorials/how-to-set-up-mysql-master-master-replication
https://support.rackspace.com/how-to/mysql-master-master-replication/

http://nezhazheng.com/database/2014/02/18/mysql-replication.html    如果想限制只复制一部分数据，可以使用复制过滤器 replicate_wild_do_table: db1.%


分库分表的mysql proxy服务kingshard   Kingshard是一个由Go开发高性能MySQL Proxy项目，kingshard在满足基本的读写分离的功能上，致力于简化MySQL分库分表操作 
http://xiaorui.cc/2016/02/22/%E5%B0%8F%E8%AF%95%E6%94%AF%E6%8C%81%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E7%9A%84mysql-proxy%E6%9C%8D%E5%8A%A1kingshard/
https://github.com/flike/kingshard/blob/master/README_ZH.md
https://www.v2ex.com/t/213929
http://os.51cto.com/art/201508/487409.htm

mysql router, fabric, proxysql,MaxScale     MySQL Proxy采用使用lua脚本语言
http://highdb.com/mysql-router-%E6%B5%8B%E8%AF%95%E4%BD%BF%E7%94%A8/
MySQL Fabric是在驱动层面实现的高可用和扩展功能。而MySQL Router是一个中间件，该中间的访问协议与MySQL一致，应用不需要做任何的修改。
http://www.csdn.net/article/1970-01-01/2821300   MySQL原生HA方案 – Fabric体验之旅
http://dataunion.org/21974.html
http://m.blog.itpub.net/29733787/viewspace-2015672/
http://m.oschina.net/blog/631951
高可用 mode = read-write时，所有客户端请求都会被列表中第一个可用服务器处理，当此服务器宕机时，列表中下一个可用机器才会处理客户端请求，如列表没有可用服务器，路由将失败。第一个被成功连接的服务器信息将被保存在内存中，重启router后失效。
负载均衡 mode = read-only时，(每个都请求可以将通过roundrobin的方式发 送到destiantions对应的MySQL服务器)客户端请求将被循环分发给配置列表，当配置列表中服务器不可用，将会跳过该服务器，列表中下一个可用机器将处理请求，如列表没有可用服务器，路由将失败。

MaxScale
https://github.com/mariadb-corporation/MaxScale
https://www.percona.com/blog/2016/02/25/high-availability-with-asynchronous-replication-and-transparent-rw-split/
https://www.percona.com/blog/2016/03/02/maxscale-how-are-servers-monitored/
https://mariadb.com/blog/binlog-server
http://severalnines.com/blog/deploy-and-configure-maxscale-sql-load-balancing
https://github.com/asosso/maxscale-docker
http://blog.yannickjaquier.com/mysql/maxscale-tutorial-with-mariadb-replication.html
MaxScale是MariaDB开发的一个中间件产品，和Oracle官方的MySQL Fabric类似，不过添加了一些额外的功能，比如SQL过滤，黑名单，Top SQL,  另一个理由是其binlog router功能，该功能可以复制一份master的binlog，这在高可用的解决方案中或许会有一定的应用场景。
Connection-based Routing:client连接到maxscale之后，会为该client维护一个路由，同一个连接会始终通过这条路由，并且不检查当前连接下的产生的不同的请求，该路由一旦创建便会一直存在直到客户端连接断开。适合读请求和写请求使用不同的连接的场景。
Statement-based Routing:对同一个连接产生的不同的请求动态的路由到一个或多个后端的数据库做处理。此类型路由可使得应用程序端操作非常简单，读写分离以及负载均衡均对应用透明。
Filter可比作database-level firewall，它可用于对某些特殊statement进行过滤或者Rewrite。适用于简单类型的语句容错，以及语句的自动转换。
http://blog.csdn.net/wuxbeyond/article/details/49615385
http://mrcto.blog.51cto.com/1923168/1437287
The following routing options are available;
	master - only route to a server which has the master status bit set
	slave - only route to a server that has the slave status bit set
	synced - only route to a server that has the synced status bit set。  The synced option is reserved for use with Galera clusters
	running	A server that is up and running. All servers that MaxScale can connect to are labeled as running.
	If no router_options parameter is configured in the service definition, the router will use the default value of running. 
	If no routing options are given then the router will distribute the connections over all the servers that are currently running. Servers that are down or in maintenance mode will not have connections routed to them.
https://mariadb.com/kb/en/mariadb-enterprise/mariadb-maxscale/maxscale-configuration-usage-scenarios/    配置
https://github.com/mariadb-corporation/maxscale-system-test/tree/master/cnf
Tee：A filter that will duplicate all or some of the requests to a second service within MaxScale. 
Top：The top filter is a logging filter that will record the top N longest running SQL statements in your connection.
https://mariadb.com/blog/maxscale-modules-whats-10-beta

https://github.com/sysown/proxysql

haproxy + mysql
使用xinetd守护进程运行MySQL状态检测，并返回http头信息给haproxy，以供haproxy来判定各个mysql服务当前状态
https://www.digitalocean.com/community/tutorials/how-to-use-haproxy-to-set-up-mysql-load-balancing--3
http://blog.yannickjaquier.com/linux/getting-started-with-haproxy-and-mysql-replication.html
http://blog.secaserver.com/2015/09/configure-haproxy-galera-cluster/


http://diannaowa.blog.51cto.com/3219919/1674735
http://bestvivi.com/2015/09/09/MySQL%E4%B8%BB%E4%B8%BB%E5%A4%8D%E5%88%B6+LVS+Keepalived%E5%AE%9E%E7%8E%B0MySQL%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7/   MySQL主主复制+LVS+Keepalived实现MySQL高可用性
http://bestvivi.com/2015/09/06/MySQL%E5%A4%8D%E5%88%B6%E4%BB%8B%E7%BB%8D%E5%8F%8A%E6%90%AD%E5%BB%BA/  MySQL复制介绍及搭建

http://yq.aliyun.com/articles/211?spm=5176.group25.0.0.VMhacj&commentId=64#comment-64   RDS MySQL参数调优最佳实践
http://yq.aliyun.com/articles/3022  各版本MySQL并行复制的实现及优缺点
http://www.csdn.net/article/2015-01-16/2823591   淘宝内部分享：怎么跳出MySQL的10个大坑
http://h2ex.com/572  MySQL 5.7 新特性大全和未来展望
http://h2ex.com/159  单表60亿记录等大数据场景的MySQL优化和运维之道
MySQL 慢日志系统  基于 pt-query-digest logstash 和 Anemometer 实现，可以定期跟踪线上业务慢查询优化。
http://www.gpfeng.com/?p=657  谈谈MySQL水平扩展
http://www.gpfeng.com/?p=603  Galera replication for MySQL
http://yq.aliyun.com/edu/lesson/27?spm=0.0.0.0.isZ8Ts 
SOHU-DBProxy 是由搜狐数据库团队开发维护的一个基于MySQL协议的数据中间层项目。它在MySQL官方推出的 MySQL-Proxy 0.8.3版本的基础上， 修改了大量bug，添加了很多功能特性。

https://www.52os.net/articles/mysql-reset-password.html  重置密码
https://segmentfault.com/a/1190000000593398  Mysql在大型网站的应用架构演变

常规做法是slave上show slave status\G中的两个变量的差值（Read_Master_Log_Pos，Exec_Master_Log_Pos),也可以使用percona提供的工具包pt-heartbeat。
http://blog.javachen.com/2014/04/06/mysql-config-for-master-slave-replication.html
http://sharelinux.blog.51cto.com/11163444/1740513   Mysql热备xtrabackup的使用

Infobright是开源的MySQL数据仓库解决方案，引入了列存储方案，高强度的数据压缩，优化的统计计算(类似sum/avg/group by之类)

https://docs.aliyun.com/?spm=5176.7622920.9.4.9muujt#/pub/drds/best-practice/best_connection_pool
jdbc:mysql://ip:port/db?autoReconnect=true&amp;rewriteBatchedStatements=true&amp;socketTimeout=30000&amp;connectTimeout=3000"
可以使用标准的jdbc接口来获取LastInsertId
https://docs.aliyun.com/?spm=5176.7622920.9.4.9muujt#/pub/drds/best-practice/best_data_import_export
为了优化DRDS的SQL执行，其核心的优化思想就是减少网络IO。 DRDS的数据是按拆分键进行水平切分的，查询中若带上拆分键对于减少SQL在DRDS的执行时间很有意义。查询条件尽量带分库键
DRDS在大多数情况下使用的Join算法都是Nested Loop及其派生算法（若Join有排序要求，则使用Sort Merge 算法）。DRDS的广播表在各个分库都会存一份
DRDS在执行limit offset, count语句时，实际上是依次将offset之前的记录读取出来并直接丢弃， SQL的优化方向是先查SQL的ID集合，再通过in查询真正的记录内容，
在DRDS中，默认情况下请尽可能保证Distinct，Group by 与Order By语句后所带的列名相同
一般而言，您可以按照以下五个维度进行思考和权衡，包括数据均衡度考虑、事务边界因素、常用查询效率考虑、异构索引考虑、简单性策略。
一般来说数据容量和访问均衡是我们考量的第一点，不均衡的数据分布和访问可能不能充分发挥数据拆分的能力  所以一般来说拆分字段区分度比较大，数据分布和访问相对会比较均衡
想办法划小事务边界，并尽可能让事务的边界限制在单台机器内。
可以考虑使用异构索引表，其本质就是利用异步触发器，将原表内的每一次更新，都换一个写入的维度，写入到新的表中。
https://docs.aliyun.com/?spm=5176.7622920.9.5.9muujt#/pub/drds/user-guide/user_readonly_instances

http://biancheng.dnbcw.info/mysql/412388.html   BlackHole ：黑洞引擎，写入的任何数据都会消失，用于记录binlog做复制的中继存储！
http://wenku.baidu.com/view/85af4ccfbb4cf7ec4afed0ad.html  MYSQL性能调优工具介绍
http://wenku.baidu.com/link?url=Fdj4HNXELJdJ7C4BJaPfIXyE88SaorbuidnnkqTEPM2LFEi4kqNNs94hJrcV73CBCai_UC2rVR5SR508Kbw-j_M_x7AqSMSbtRAX965SdjS###  捕获线上sql
pt-query-digest是用于分析mysql慢查询的一个工具，它可以分析binlog、General log、slowlog，也可以通过SHOWPROCESSLIST或者通过tcpdump抓取的MySQL协议数据来进行分析。
pt-query-digest是一个perl脚本，只需下载并赋权即可执行。
wget percona.com/get/pt-query-digest 
chmod u+x pt-query-digest
http://blog.csdn.net/seteor/article/details/24017913
https://github.com/box/Anemometer   Box SQL Slow Query Monitor
yum install percona-toolkit -y
https://github.com/ISADBA/anemometerAudit_SQL  sql审核
https://www.percona.com/blog/2013/01/09/how-does-mysql-replication-really-work/   How does MySQL Replication really work?


START SLAVE  http://hunng.com/2014/06/18/centos-mysql-master-slave-replication/
http://www.cnblogs.com/lyhabc/p/3838764.html
http://www.178linux.com/archives/5261
http://88fly.blog.163.com/blog/static/122680390201241901127184/
https://github.com/Qihoo360/Atlas
https://github.com/NetEase/InnoSQL
https://github.com/youtube/vitess
https://code.google.com/p/tungsten-replicator/   https://github.com/is00hcw/tungsten-replicator/

http://www.jianshu.com/p/cc6746ac4fc2     mysql高可用
https://yq.aliyun.com/articles/2237?spm=5176.blog2663.yqblogcon1.4.BDTEVm   mysql 高可用方案漫谈
https://yq.aliyun.com/articles/2239?spm=5176.blog2663.yqblogcon1.6.BDTEVm   
http://tech.meituan.com/mysql-index.html  MySQL索引原理及慢查询优化
http://tech.meituan.com/innodb-lock.html  锁


https://github.com/chenzhiwei/linux/tree/master/drbd 
DRBD官方网站：http://go.rritw.com/drbd.linbit.com/docs/install/
yum install drbd kmod-drbd
http://freeloda.blog.51cto.com/2033581/1275528
heartbeat与corosync是流行的Messaging Layer （集群信息层）
Pacemaker是最流行的CRM（集群资源管理器），是从heartbeat v3中独立出来的资源管理器，同时Corosync+Pacemaker是最流行的高可用集群的套件
https://github.com/corosync/corosync


http://www.slideshare.net/AlexSu1/redis-introduction-23784248


http://www.mycat.org.cn/   完全开源的数据库中间件产品
http://www.csdn.net/article/2015-07-16/2825228
https://github.com/SOHUDBA/SOHU-DBProxy
http://www.guokr.com/blog/475765/
DRBD负责接收数据，把数据写到本地磁盘，然后发送给另一个主机。另一个主机再将数据存到自己的磁盘中。
http://www.infoq.com/cn/news/2014/10/clay.io-aws-docker-haproxy-10x?utm_campaign=infoq_content&amp;utm_source=infoq&amp;utm_medium=feed&amp;utm_term=global

SWIFT与Ceph、GlusterFS、MongoDB/GridFS之间的比较呢？

http://www.dataguru.cn/article-7190-1.html  tdsql
Agent模块负责监控本机MySQL实例的运行情况，主要功能包括：用短连接的方式周期性访问本机的MySQL实例，检测是否可读、可写，若发生异常，会将异常信息上报到ZooKeeper，最终会由上面描述的Scheduler模块检测到这个异常情况，从而发起容灾切换；
网关基于MySQL Proxy开发，在网络层、连接管理、SQL解析、路由等方面做了大量优化，主要特点和功能如下：解析SQL，将识别出的DDL语句直接存到ZooKeeper

http://www.csdn.net/article/2014-06-10/2820160  MySQL在大型网站的应用架构演变

http://hugnew.com/mysql-ha%E6%96%B9%E6%A1%88%E4%B9%8Bmysql%E5%8D%8A%E5%A4%8D%E5%88%B6mhakeepalivedatlaslvs/
http://hugnew.com/mysql%E5%8D%8A%E5%A4%8D%E5%88%B6%E6%B5%85%E8%B0%88/
http://hugnew.com/mysql-ha%E6%96%B9%E6%A1%88%E4%B9%8Bmysql%E5%8D%8A%E5%A4%8D%E5%88%B6mhakeepalivedatlaslvs/
http://hugnew.com/mysql%E9%AB%98%E5%8F%AF%E7%94%A8%E6%B5%85%E6%9E%90/
这个功能添加了一个新的semisync master plugin 系统变量。
rpl_semi_sync_master_wait_slave_count
这是一个整形的变量，有效值为1-1024. 从这个变量我们可以看出，这个功能只关心数据应该被复制到多少个slave上，而不关心数据被复制到哪些slave上。它的缺省值是1，可以被动态的修改。
在5.7.4版本的semi sync 框架中，独立出一个 ack collector thread ，专门用于接收slave 的反馈信息。这样master 上有两个进程独立工作，可以同时发送binlog 到slave ，和接收slave的反馈。
MySQL 5.7 修改了半同步中主库提交的事务的顺序，after sync 模式避免了幻读发生。
MySQL 5.7 半同步增强，增加 rpl_semi_sync_master_wait_slave_count 参数控制主库接收多少个slave 写事务成功反馈 才返回 成功给客户端 。
修改原来有dump thread 发送event和接收slave ack 模式，独立出 单独 接收slave 返回 ack的进程，提高半同步模式的tps 。
http://blog.jobbole.com/87450/  运维角度浅谈MySQL数据库优化

http://segmentfault.com/a/1190000003063874  XtraBackup
http://agapple.iteye.com/blog/1796633  canal
http://liyonghui160com.iteye.com/blog/2176066
http://maxwells-daemon.io/  Maxwell = Mysql + Kafka , an application that reads MySQL binlogs and writes row updates to Kafka as JSON. It's playing in the same space as mypipe and databus
https://github.com/zendesk/maxwell

http://www.csdn.net/article/2015-01-16/2823591
redo 日志同步属于物理同步方法，简单直接，将修改的物理部分传送到备库执行，主备共用一致的 LSN，只要保证 LSN 相同即可，同一时刻，只能主库或备库一方接受写请求； binlog的同步方法属于逻辑复制，分为statement 或 row 模式，其中statement记录的是SQL语句，Row 模式记录的是修改之前的记录与修改之后的记录，即前镜像与后镜像；备库通过binlog dump 协议拉取binlog,然后在备库执行。
http://www.2cto.com/database/201504/387166.html

以高可用为例，解决方案有mysql ndb集群，mmm , mha, drbd等多种选择。Mysql 的proxy中间件则有mysql-proxy, atlas , cobar, mycat, tddl等，可谓五花八门。
为了解决读写分离存在写完马上就想读而这时可能存在主从同步延迟的情况，Altas中可以在SQL语句前增加 /*master*/ 就可以将读请求强制发往主库。    http://blog.csdn.net/senafox/article/details/43888715
http://ylw6006.blog.51cto.com/470441/1568853/
http://www.0550go.com/database/mysql/mysql-atlas.html  atlas 
 1，使用atlas性能大概比直连DB有30%~35%的下降，这里主要是atlas工作线程需要对sql进行过滤，重写等导致的，不过如果是一主多从的情况可以抵消这部分消耗；
 2，响应时间大概是直连DB的1.5~2倍左右
 3，对分表的支持不是太好，只支持同schema下的hash分表，并且分表后查询只基于分表key的等值查询（如果支持范围查询，那么比直接非分表情况扫描全表的性能还差

mysql 5.6开始，提供了GTID形式的复制，这会极大程度上简单数据库管理的工作量。在以前版本中，我们搭建从库时，必须指定要复制的二进制文件和位置（设置不当，容易造成同步失败或数据一致性问题），但在 mysql 5.6中，已经不需要这么做了。我们搭建从库时，只要指定主库的连接信息（用户名，密码，IP,端口），从库自动查寻同步起始点！
另外，配合半同步复制插件（默认已经安装但未开启）和mysql官方提供的工具mysqlfailover，就可以实现主库故障转移
http://yueliangdao0608.blog.51cto.com/397025/1199960   mysql-utilities
http://www.ttlsa.com/mysql/mysql-manager-tools-mysql-utilities-tutorial/
http://www.ttlsa.com/mysql/mysql-utilities-high-availability-operations/

1.在应用层使用Spring对数据源做路由，关键字：Spring AOP；
2.增加中间代理层，Amoeba就属于这种情况，此外还有Mysql官方提供的Mysql Proxy；
3.在驱动层使用Mysql提供的主从库访问驱动
借助spring的【org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource】这个抽象类实现  每次去连数据库的时候，spring会调用这个方法去找对应的数据源。返回值即对应的数据源的LookUpKey
http://blog.csdn.net/xtj332/article/details/43953699
org.springframework.jdbc.datasource.lookup.MapDataSourceLookup
MySQL最新的JDBC驱动程序包中提供了一个驱动类就是 com.mysql.jdbc.ReplicationDriver 。这个驱动类允许在url中设置多个mysql主机地址，例如：
jdbc:mysql://master1,slave1,slave2/dlog?autoReconnect=true&roundRobinLoadBalance=true    
我们必须告诉驱动程序，哪些语句的执行是作用在master数据库，而哪些语句的执行作用在slave数据库上。ReplicationDriver 是通过Connection对象的readOnly属性来判断该操作是否为更新操作。
http://www.ttlsa.com/mysql/read-and-write-separation-and-load-balanced/   用"jdbc:mysql:replication://"替换原来的"jdbc:mysql://"
http://blog.csdn.net/keda8997110/article/details/16827215
http://blog.csdn.net/isea533/article/details/46815385
http://help.aliyun.com/knowledge_detail.htm?knowledgeId=5989703  RDS MySQL 实现读写分离
http://www.cnblogs.com/davidwang456/p/4462351.html

http://m.guokr.com/blog/475765/  mysql中间件研究（Atlas，cobar，TDDL）
mysqldump  -uroot -p --host=localhost --all-databases --skip-quote-names

三个流行MySQL分支：Drizzle、MariaDB和Percona Server（包括XtraDB引擎）

主:
# binlog_format="STATEMENT" # (默认配置)
server-id = 10
log_bin = /var/lib/mysql/mysql-bin
从:
server-id = 11
log_bin = mysql-bin
relay_log = /var/lib/mysql/mysql-relay-bin
log_slave_updates = 1
# binlog_format="STATEMENT" # (默认配置)

MyCAT目前通过配置文件的方式来定义逻辑库和相关配置：
MYCAT_HOME/conf/schema.xml中定义逻辑库，表、分片节点等内容
MYCAT_HOME/conf/rule.xml中定义分片规则
MYCAT_HOME/conf/server.xml中定义用户以及系统相关变量，如端口等。
入口程序是org.opencloudb.MycatStartup.java
writeType：指定写入类型；0，只在writeHost节点写入；1，在所有节点都写入。
balance：指定物理主机服务的负载模式。0，不开启读写分离机制；   1，全部的readHost与stand by writeHost参与select语句的负载均衡     2，所有的readHost与writeHost都参与select语句的负载均衡

在实现分库分表的情况下，MySql自增主键已无法保证自增主键的全局唯一，为此，MyCat 提供了全局sequence，并使用两种机制实现这种全局sequence，分别是文件形式和数据库形式。
Sequence名称：TEST_SEQ；	使用方式：select next value for MYCATSEQ_TEST_SEQ；	注意，使用时sequence名称前一定要加大写的“MYCATSEQ_”；
文件形式原理：此种方式MyCat将sequence配置到文件中，当使用到配置中的sequence后，MyCat会更新classpath中的sequence_conf.properties文件中的sequence当前值；
数据库形式原理：此种方式是在数据库中建立一张表，存放sequence名称(name)，sequence当前值(current_value)，步长（increment  int类型每次读取多少个sequence，假设为K）等信息；
sequnceHandlerType配置为0，表示使用文件形式；  sequnceHandlerType配置为1，表示使用数据库形式；
查询SQL语句以/*balance*/注解来确定其是走读节点还是写节点。
switchType 目前有三种选择： -1 表示不自动切换  1 默认值，自动切换  2 基于MySQL主从同步的状态决定是否切换
Mycat心跳机制通过检测 show slave status 中的 "Seconds_Behind_Master", "Slave_IO_Running", "Slave_SQL_Running" 三个字段来确定当前主从同步的状态以及Seconds_Behind_Master主从复制时延


http://www.wtoutiao.com/p/10913Vm.html   单表60亿记录等大数据场景的MySQL优化和运维之道
MySQL历史
1979年，Monty Widenius写了最初的版本，96年发布1.0
1995-2000年，MySQL AB成立，引入BDB
2000年4月，集成MyISAM和replication
2001年，Heikki Tuuri向MySQL建议集成InnoDB
2003发布5.0，提供了视图、存储过程等功能
2008年，MySQL AB被Sun收购，09年推出5.1
2009年4月，Oracle收购Sun，2010年12月推出5.5
2013年2月推出5.6 GA，5.7开发中

MySQL存在的问题
优化器对复杂SQL支持不好
对SQL标准支持不好
大规模集群方案不成熟，主要指中间件
ID生成器，全局自增ID
异步逻辑复制，数据安全性问题
Online DDL
HA方案不完善
备份和恢复方案还是比较复杂，需要依赖外部组件
展现给用户信息过少，排查问题困难
众多分支，让人难以选择

