只要重写 equals，就必须重写 hashCode。因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须重写这两个方法
【强制】 SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为
static，必须加锁
 【强制】多线程并行处理定时任务时， Timer 运行多个 TimeTask 时，只要其中之一没有捕获
抛出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。
【推荐】避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一
seed 导致的性能下降
【参考】 HashMap 在容量不够进行 resize 时由于高并发可能出现死链，导致 CPU 飙升，在
开发过程中注意规避此风险。
【强制】不能在 finally 块中使用 return， finally 块中的 return 返回后方法结束执行，不会再执行 try 块中的 return 语句
【强制】小数类型为 decimal，禁止使用 float 和 double
【推荐】单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。
【推荐】字段允许适当冗余，以提高性能，但是必须考虑数据同步的情况。冗余字段应遵循：1） 不是频繁修改的字段。2） 不是 varchar 超长字段，更不能是 text 字段
【强制】 varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索引效率。
【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。
1） consts 单表中最多只有一个匹配行（ 主键或者唯一索引） ，在优化阶段即可读取到数据。2） ref 指的是使用普通的索引（ normal index）。3） range 对索引进行范围检索。
【强制】 count(distinct col) 计算该列除 NULL 之外的不重复数量。注意 count(distinct col1, col2) 如果其中一列全为 NULL，那么即使另一列有不同的值，也返回为 0。
【强制】使用 ISNULL()来判断是否为 NULL 值。注意： NULL 与任何值的直接比较都为 NULL。
【强制】 xml 配置中参数注意使用： #{}， #param# 不要使用${} 此种方式容易出现 SQL 注入。
【强制】禁止向 HTML 页面输出未经安全过滤或未正确转义的用户数据
【强制】用户请求传入的任何参数必须做有效性验证。
一方库：本工程中的各模块的相互依赖   二方库：公司内部的依赖库，一般指公司内部的其他项目发布的jar包  三方库：公司之外的开源库

https://yq.aliyun.com/articles/56  Java调试那点事
http://calvin1978.blogcn.com/articles/ratelimiter.html   服务化体系之－限流
http://calvin1978.blogcn.com/articles/collection.html  关于Java集合的小抄
http://calvin1978.blogcn.com/articles/javatuning.html  Java性能优化指南1.8版，及唯品会的实战
http://calvin1978.blogcn.com/articles/jvmoption-2.html   关键业务系统的JVM参数推荐(2016热冬版)
http://irfen.me/java1-8-hashmap/  hashmap存储结构由以前单纯的数组+链表，变成了数组+链表/红黑树, 跳跃表有序
http://img.blog.csdn.net/20161020160817595  垃圾收集脑图
http://img.blog.csdn.net/20161020114230160  java线程脑图 
http://blog.9i0i.com/?u013970991/article/details/52035133   性能分析系列-小命令保证大性能
http://blog.9i0i.com/?u013970991/article/details/53609209   小程眼里的微服务
http://blog.9i0i.com/?u013970991/article/details/52799299   堆外内存的奇妙世界
http://blog.9i0i.com/?u013970991/article/details/52035153   由多线程内存溢出产生的实战分析
http://blog.9i0i.com/?u013970991/article/details/52055527   @Transactional(rollbackFor = Throwable.class, propagation = Propagation.REQUIRED)
http://www.jianshu.com/p/e90a87f437d9   如何加速一个网站――web性能三方面
http://mp.weixin.qq.com/s?__biz=MzA4Nzg5Nzc5OA==&mid=2651660931&idx=1&sn=93cccfdcc5a474e92ffd673e7cd115ce#rd  不懂点CAP理论，你好意思说你是做分布式的吗

http://blog.csdn.net/eastmount/article/details/41575053?utm_source=tuicool&utm_medium=referral  SOLID原则(Principles)如下：单一职责原则（Single Responsibility）开闭原则（Open Closed）里氏代换原则（Liskov Substitution）接口隔离原原则（Interface Segregation）依赖倒置原则（Dependency Inversion）
Basically Available, Soft state, Eventually consistent（基本可用、软状态、最终一致性）
http://mp.weixin.qq.com/s?__biz=MzA4Nzg5Nzc5OA==&mid=2651660931&idx=1&sn=93cccfdcc5a474e92ffd673e7cd115ce#rd  不懂点CAP理论，你好意思说你是做分布式的吗

http://mp.weixin.qq.com/s/NWM-OKuKCyHTlXc32h39uA   优秀的（Android）软件工程师是如何练成的
https://github.com/jwasham/google-interview-university/blob/master/translations/README-cn.md  Google 的面试
考虑使用int或者long,金额单位为分, forceBigDecimals	This property is used to specify whether MyBatis Generator should force the use of java.math.BigDecimal for DECIMAL and NUMERIC fields


https://linux.cn/article-7480-1.html  算法复杂度速查表
http://markyun.github.io/2015/Front-end-Developer-Questions/
https://www.zhihu.com/question/40909636/answer/88775539  android

http://www.jianshu.com/p/6b88a0abe640   35岁程序员的独家面试经历
http://www.jianshu.com/p/0b6808e1fbe9

http://www.oschina.net/news/69068/javaer-have-to-learn-linux-command

https://github.com/GeniusVJR/LearningNotes  面试
https://zhuanlan.zhihu.com/p/20672941  简历

https://github.com/jhalterman/failsafe   失败处理
https://github.com/jhalterman/failsafe/wiki/Comparisons
Hystrix is more oriented around the execution of remote requests and offers features around that, while Failsafe is more general purpose for handling any type of execution failure.
http://www.cnblogs.com/shanyou/p/4752226.html
http://blog.csdn.net/caomiao2006/article/details/50000511
Michael T. Nygard 在在精彩的《Release It!》一书中总结了很多提高系统可用性的模式，其中非常重要的两条是： 使用超时   使用断路器
在自身服务和依赖之间放一个断路器，实时统计访问的状态，当访问超时或者失败达到某个阈值的时候（如50%请求超时，或者连续20次请失败），就打开断路器，那么后续的请求就直接返回失败，不至于浪费资源。断路器再根据一个时间间隔（如5分钟）尝试关闭断路器（或者更换保险丝），看依赖是否恢复服务了。



http://calvin1978.blogcn.com/articles/uuid.html  分布式Unique ID的生成方法一览
http://calvin1978.blogcn.com/articles/routing.html  负载均衡与路由的设计

http://calvin1978.blogcn.com/articles/btrace1.html   Btrace入门到熟练小工完全指南
BTrace客户端使用Attach API attach到目标VM，并加载agent包；agent打开socket来与客户端进行通信；客户端给agent发送InstrumentCommand，其中包含BTrace脚本编译后的字节码；agent通过Attach API和ASM来完成满足BTrace脚本的字节码修改工作；
https://yq.aliyun.com/articles/7569   https://btrace.org/btrace/
http://calvin1978.blogcn.com/articles/perf-tunning-2.html  Java应用调优指南之－工具篇
http://calvin1978.blogcn.com/articles/perf-tunning-1.html  
http://hellojava.info/?p=517
http://blog.hesey.net/2013/09/common-troubleshooting-tools-and-methods-on-java.html
http://hellojava.info/?p=520  分布式领域架构师要掌握的技术
http://calvin1978.blogcn.com/articles/dailysites.html  应该日常翻看的中文技术网站

http://irfen.me/java-jmh-simple-microbenchmark/   Java使用JMH进行简单的基准测试Benchmark
通过maven archtype我们可以很快的创建一个JMH工程。
 mvn archetype:generate -DinteractiveMode=false -DarchetypeGroupId=org.openjdk.jmh \
      -DarchetypeArtifactId=jmh-java-benchmark-archetype -DarchetypeVersion=1.4.1 \
      -DgroupId=org.agoncal.sample.jmh -DartifactId=logging -Dversion=1.0



http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&mid=2650993458&idx=1&sn=e959385bc0bddb4b7cfab84a1310f9e8&scene=1&srcid=07278uyBPLt7goHKHJTNpsWt#wechat_redirect    不谈架构，看看如何从代码层面优化系统性能！
企业信息化关注的是如何最大限度的实现无纸办公，流程自动化，信息流通和存储，避免孤岛和数据的多维度交叉分析


http://my.oschina.net/apdplat/blog/719841  15道非常经典的Java面试题
Daemon的作用是为其他线程的运行提供服务，比如说GC线程。其实User Thread线程和Daemon Thread守护线程本质上来说去没啥区别的，唯一的区别之处就在虚拟机的离开：如果User Thread全部撤离，那么Daemon Thread也就没啥线程好服务的了，所以虚拟机也就退出了。
用个比较通俗的比如，任何一个守护线程都是整个JVM中所有非守护线程的保姆：只要当前JVM实例中尚存在任何一个非守护线程没有结束，守护线程就全部工作；只有当最后一个非守护线程结束时，守护线程随着JVM一同结束工作。
thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。你不能把正在运行的常规线程设置为守护线程。
((NULL)null).hello();


https://yq.aliyun.com/articles/14318?spm=5176.100239.blogcont59055.17.6Oe2G5
包括数据抽象和行为抽象两方面。抽象只关注对象有哪些属性和行为，并不关注这些行为的细节是什么。通常认为封装是把数据和操作数据的方法绑定起来，对数据的访问只能通过已定义的接口。
多态性是指允许不同子类型的对象对同一消息作出不同的响应。简单的说就是用同样的对象引用调用同样的方法但是做了不同的事情。多态性分为编译时的多态性和运行时的多态性。方法重载（overload）实现的是编译时的多态性（也称为前绑定），而方法重写（override）实现的是运行时的多态性（也称为后绑定）。
通常我们定义一个基本数据类型的变量，一个对象的引用，还有就是函数调用的现场保存都使用内存中的栈空间；而通过new关键字和构造器创建的对象放在堆空间；程序中的字面量（literal）如直接书写的100、"hello"和常量都是放在静态区中。
String str = new String("hello"); //变量str放在栈上，用new创建出来的字符串对象放在堆上，而"hello"这个字面量放在静态区。
补充：较新版本的Java（从Java 6的某个更新开始）中使用了一项叫"逃逸分析"的技术，可以将一些局部对象放在栈上以提升对象的操作性能。
String s = new String("xyz");创建了几个字符串对象？答：两个对象，一个是静态区的"xyz"，一个是用new创建在堆上的对象。

在Java 5以前，switch(expr)中，expr只能是byte、short、char、int。从Java 5开始，Java中引入了枚举类型，expr也可以是enum类型，从Java 7开始，expr还可以是字符串（String），但是长整型（long）在目前所有的版本中都是不可以的。
对于short s1 = 1; s1 = s1 + 1;由于1是int类型，因此s1+1运算结果也是int 型，需要强制转换类型才能赋值给short型。而short s1 = 1; s1 += 1;可以正确编译，因为s1+= 1;相当于s1 = (short)(s1 + 1);其中有隐含的强制类型转换。
装箱的本质是什么呢？当我们给一个Integer对象赋一个int值的时候，会调用Integer类的静态方法valueOf   如果整型字面量的值在-128到127之间，那么不会new新的Integer对象，而是直接引用常量池中的Integer对象
Math.round(11.5)的返回值是12，Math.round(-11.5)的返回值是-11。
数组没有length()方法，有length 的属性。String 有length()方法。JavaScript中，获得字符串的长度是通过length属性得到的，这一点容易和Java混淆。
Java对于eqauls方法和hashCode方法是这样规定的：(1)如果两个对象相同（equals方法返回true），那么它们的hashCode值一定要相同；(2)如果两个对象的hashCode相同，它们并不一定相同。
Java语言的方法调用只支持参数的值传递。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。
StringBuilder是Java 5中引入的，它和StringBuffer的方法完全相同，区别在于它是在单线程环境下使用的，因为它的所有方面都没有被synchronized修饰，因此它的效率也比StringBuffer要高。
JVM会确保这个类已经被加载、连接（验证、准备和解析）和初始化。类的加载是指把类的.class文件中的数据读入到内存中，通常是创建一个字节数组读入.class文件，然后产生与所加载类对应的Class对象。加载完成后，Class对象还不完整，所以此时的类还不可用。当类被加载后就进入连接阶段，这一阶段包括验证、准备（为静态变量分配内存并设置默认的初始值）和解析（将符号引用替换为直接引用）三个步骤。最后JVM对类进行初始化，包括：1)如果类存在直接的父类并且这个类还没有被初始化，那么就先初始化父类；2)如果类中存在初始化语句，就依次执行这些初始化语句。
要请求垃圾收集，可以调用下面的方法之一：System.gc() 或Runtime.getRuntime().gc() ，但JVM可以屏蔽掉显示的垃圾回收调用。


http://blog.csdn.net/hguisu/article/details/7776068
直接插入排序(Straight Insertion Sort)  基本思想: 将一个记录插入到已排序好的有序表中，从而得到一个新，记录数增1的有序表。即：先将序列的第1个记录看成是一个有序的子序列，然后从第2个记录逐个进行插入，直至整个序列有序为止。
希尔排序又叫缩小增量排序 基本思想：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。
简单选择排序（Simple Selection Sort）基本思想：在要排序的一组数中，选出最小（或者最大）的一个数与第1个位置的数交换；然后在剩下的数当中再找最小（或者最大）的与第2个位置的数交换，依次类推，直到第n-1个元素（倒数第二个数）和第n个元素（最后一个数）比较为止。
堆排序是一种树形选择排序，是对直接选择排序的有效改进。基本思想：由堆的定义可以看出，堆顶元素（即第一个元素）必为最小项（小顶堆）。若以一维数组存储一个堆，则堆对应一棵完全二叉树，且所有非叶结点的值均不大于(或不小于)其子女的值，根结点（堆顶元素）的值是最小(或最大)的。
冒泡排序（Bubble Sort）基本思想：自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。
快速排序（Quick Sort）基本思想：1）选择一个基准元素,通常选择第一个元素或者最后一个元素,2）通过一趟排序讲待排序的记录分割成独立的两部分，其中一部分记录的元素值均比基准元素值小。另一部分记录的 元素值比基准值大。 3）此时基准元素在其排好序后的正确位置 4）然后分别对这两部分记录用同样的方法继续进行排序，直到整个序列有序。
归并排序（Merge Sort）基本思想：归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。


Volatile是轻量级的synchronized，它在多处理器开发中保证了共享变量的“可见性”。可见性的意思是当一个线程修改一个共享变量时，另外一个线程能读到这个修改的值。
用来确保将变量的更新操作通知到其他线程,保证了新值能立即同步到主内存,以及每次使用前立即从主内存刷新. 当把变量声明为volatile类型后,编译器与运行时都会注意到这个变量是共享的.
volatile 变量对所有线程是立即可见的,对 volatile 变量所有的写操作都能立即反应到其他线程之中,换句话说:volatile 变量在各个线程中是一致的
一个线程对 volatile 变量的写一定对之后对这个变量的读的线程可见，即线程对 volatile 变量的读一定能看见在它之前最后一个线程对这个变量的写。
volatile变量不会被缓存在寄存器中(只有拥有线程可见)或者其他对CPU不可见的地方，每次总是从主存中读取volatile变量的结果。   
volatile 变量保证的是一个线程对它的写会立即刷新到主内存中，并置其它线程的副本为无效，它并不保证对 volatile 变量的操作都是具有原子性的。  https://yq.aliyun.com/articles/38392
http://www.cnblogs.com/yakun/p/3589437.html
每一个线程运行时都有一个线程栈，线程栈保存了线程运行时候变量值信息。当线程访问某一个对象时候值的时候，首先通过对象的引用找到对应在堆内存的变量的值，然后把堆内存变量的具体值load到线程本地内存中，建立一个变量副本，之后线程就不再和对象在堆内存变量值有任何关系，而是直接修改副本变量的值，在修改完之后的某一个时刻（线程退出之前），自动把线程变量副本的值回写到对象在堆中变量。这样在堆中的对象的值就产生变化了。
锁提供了两种主要特性：互斥（mutual exclusion） 和可见性（visibility）。   http://my.oschina.net/jamaly/blog/386912?p=1
http://blog.csdn.net/vking_wang/article/details/9982709
http://blog.csdn.net/vking_wang/article/details/8574376

Condition可以替代传统的线程间通信，用await()替换wait()，用signal()替换notify()，用signalAll()替换notifyAll()。  http://blog.csdn.net/vking_wang/article/details/9952063
在Runnable中创建ThreadLocal

我们可以利用wait()来让一个线程在某些条件下暂停运行。例如，在生产者消费者模型中，生产者线程在缓冲区为满的时候，消费者在缓冲区为空的时 候，都应该暂停运行。如果某些线程在等待某些条件触发，那当那些条件为真时，你可以用 notify 和 notifyAll 来通知那些等待中的线程重新开始运行。不同之处在于，notify 仅仅通知一个线程，并且我们不知道哪个线程会收到通知，然而 notifyAll 会通知所有等待中的线程。
既然我们应该在synchronized的函数或是对象里调用wait，那哪个对象应该被synchronized呢？答案是，那个 你希望上锁的对象就应该被synchronized，即那个在多个线程间被共享的对象。在生产者消费者问题中，应该被synchronized的就是那个 缓冲区队列。
永远在循环（loop）里调用 wait 和 notify，不是在 If 语句  但if语句存在一些微妙的小问题，导致即使条件没被满足，你的线程你也有可能被错误地唤醒。所以如果你不在线程被唤 醒后再次使用while循环检查唤醒条件是否被满足
http://developer.51cto.com/art/201508/487488.htm


分布式最大的特性就是网络是不可靠的。  所以当我们的系统是由一系列的服务调用链组成的时候，我们 必须确保任一环节出问题都不至于影响整体链路。相应的手段有很多：重试机制  限流  熔断机制 负载均衡  降级（本地缓存）

容错方法的组合: 网络超时并重试  每个依赖项都划分出单独的线程池   信号量(通过tryAcquire，非阻塞调用)   断路器


PROPAGATION_NESTED -- 如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED类似的操作。
前六个策略类似于EJB CMT，第七个（PROPAGATION_NESTED）是Spring所提供的一个特殊变量。 它要求事务管理器或者使用JDBC 3.0 Savepoint API提供嵌套事务行为（如Spring的DataSourceTransactionManager）

Spring默认的事务传播行为是PROPAGATION_REQUIRED，它适合绝大多数的情况，如果多个ServiveX#methodX()均工 作在事务环境下（即均被Spring事务增强），且程序中存在如下的调用 链：Service1#method1()->Service2#method2()->Service3#method3()，那么这3个 服务类的3个方法通过Spring的事务传播机制都工作在同一个事务中。
使用PROPAGATION_REQUIRED满足需求1：事务BC与事务AD一起commit，即：作为事务AD的子事务，事务BC只有在事务AD成功commit时（阶段3成功）才commit，但子事务BC的rollback会无条件地使父事务AD也rollback
使用PROPAGATION_REQUIRES_NEW满足需求2：需要事务BC的rollback不（无条件的）影响事务AD的commit。这个需求简单称之为“隔离失败”。，但子事务（这时不应该称之为子事务）BC是完全新的事务上下文，父事务（这时也不应该称之为父事务）AD的成功与否完全不影响BC的提交，不能满足需求1。
同时满足上述两条需求就要用到PROPAGATION_NESTED了。PROPAGATION_NESTED在事务AD执行到B点时，设置了savePoint（关键）。 当BC事务成功commit时，PROPAGATION_NESTED的行为与PROPAGATION_REQUIRED一样。只有当事务AD在D点成功commit时，事务BC才真正commit，如果阶段3执行异常，导致事务AD rollback，事务BC也将一起rollback ，从而满足了“联合成功”。  当阶段2执行异常，导致BC事务rollback时，因为设置了savePoint，AD事务可以选择与BC一起rollback或继续阶段3的执行并保留阶段1的执行结果，从而满足了“隔离失败”。
另外，SavePoint在JDBC3.0中，所以应用嵌套事务必须保证JDK1.4+和驱动对JDBC3.0的支持。
http://sharajava.iteye.com/blog/78270

NESTED：如果一个活动的事务存在，则运行在一个嵌套的事务中. 如果没有活动事务, 则按REQUIRED属性执行.它使用了一个单独的事务，这个事务拥有多个可以回滚的保存点。内部事务的回滚不会对外部事务造成影响。它只对DataSourceTransactionManager事务管理器起效
 } catch (SomeException) {           // 执行其他业务, 如 ServiceC.methodC();   或者rollback（），或者commit（）


一个jvm中默认的classloader有Bootstrap ClassLoader、Extension ClassLoader、App ClassLoader，分别各司其职：
Bootstrap ClassLoader     负责加载java基础类，主要是 %JRE_HOME/lib/ 目录下的rt.jar、resources.jar、charsets.jar和class等
Extension ClassLoader      负责加载java扩展类，主要是 %JRE_HOME/lib/ext 目录下的jar和class
App ClassLoader           负责加载当前java应用的classpath中的所有类。
其中Bootstrap ClassLoader是JVM级别的，由C++撰写；Extension ClassLoader、App ClassLoader都是java类，都继承自URLClassLoader超类。
Bootstrap ClassLoader由JVM启动，然后初始化sun.misc.Launcher ，sun.misc.Launcher初始化Extension ClassLoader、App ClassLoader。可以通过ClassLoader的getParent方法得到当前ClassLoader的parent。Bootstrap ClassLoader比较特殊，因为它不是java class所以Extension ClassLoader的getParent方法返回的是NULL。
所谓全盘负责，即是当一个classloader加载一个Class的时候，这个Class所依赖的和引用的所有 Class也由这个classloader负责载入，除非是显式的使用另外一个classloader载入。
 jvm中没有提供class及classloader的unload方法.那热部署及osgi中是通过什么机制来实现的呢?实现思路主要是通过更换classLoader进行重新加载.


InvocationHandler    Proxy.newProxyInstance(classLoader, interfaces, proxy);


http://jinnianshilongnian.iteye.com/blog/2305117
在开发高并发系统时有三把利器用来保护系统：缓存、降级和限流。
令牌桶和漏桶算法。Guava框架提供了令牌桶算法实现，可直接拿来使用。 Guava RateLimiter提供了令牌桶算法实现：平滑突发限流(SmoothBursty)和平滑预热限流(SmoothWarmingUp)实现。
对于Nginx接入层限流可以使用Nginx自带了两个模块：连接数限流模块ngx_http_limit_conn_module和漏桶算法实现的请求限流模块ngx_http_limit_req_module。还可以使用OpenResty提供的Lua限流模块lua-resty-limit-traffic进行更复杂的限流场景。

多个应用同时操作一份数据很可能造成缓存数据是脏数据，解决办法：
1.1、更新数据时使用更新时间戳或者版本对比，如果使用Redis可以利用其单线程机制进行原子化更新；
1.2、使用如canal订阅数据库binlog；
2.1、将更新请求按照相应的规则分散到多个队列，然后每个队列的进行单线程更新，更新时拉取最新的数据保存；
2.2、分布式锁，更新之前获取相关的锁。
我们使用init_by_lua_file初始化开关数据，共享字典存储开关数据，提供API进行开关切换
我们系统中存在的主要限流逻辑是：对于大多数请求按照IP请求数限流，对于登陆用户按照用户限流；对于读取缓存的请求不进行限流，只对打到后端系统的请求进行限流。还可以限制用户访问频率，比如使用ngx_lua中的ngx.sleep对请求进行休眠处理，让刷接口的速度降下来；或者种植cookie token之类的，必须按照流程访问。

使用消息队列可以实现服务解耦（一对多消费）、异步、缓冲（削峰）等。比如电商系统中的交易订单数据，该数据有非常多的系统关心并订阅，比如订单生产系统、定期送系统、订单风控系统等等；
直接在Redis中扣减，然后记录下扣减日志，通过Worker去同步到DB。
订单分库分表一般按照订单ID进行分，那么如果要查询某个用户的订单列表就需要聚合N个表的数据然后返回，这样会导致订单表的读性能很低；此时需要对订单表进行异构，异构一套用户订单表，按照用户ID进行分库分表；另外还需要考虑对历史订单数据进行归档处理。
http://jinnianshilongnian.iteye.com/blog/2312284    电商前端交易型系统设计原则


在tomcat中我们只要在context.xml的<context>标签里加上sessionCookiePath="/"就能做到cookie跨域了。这里所谓的跨域是指a.xxx.com/b和a.xxx.com/c之间cookie共享，这是因为设置这个参数后tomcat是生成cookie时会把cookie的path设成根目录，这样就能全局共享了。 我们知道session是默认会存在cookie里，其实也就是生成一个JESSIONID的cookie由浏览器缓存起来。


JSONP跨域，dom动态添加script，src无域名限制
Promise主要作用就是解决异步回调问题，promise有三种状态， 等待（pending）、已完成（fulfilled）、已拒绝（rejected）它的作用就是将各种内嵌回调的事务用流水形式表达。利用 Promise 可以让异步编程更符合人的直觉，让代码逻辑更加清晰
https://www.promisejs.org/implementing/
http://www.tuicool.com/articles/fe6Jbyz


OSGi的主要职责就是为了让开发者能够创建动态化、模块化的Java系统。
OSGi框架从概念上可以分为三层：模块层、生命周期层和服务层。Module Layer：模块层主要涉及包及共享的代码；Lifecycle Layer：生命周期层主要涉及Bundle的运行时生命周期管理；Service Layer：服务层主要涉及模块之间的交互和通信。
OSGi 的模块化，是通过为 Jar 包添加metadata 来定义哪些类该暴露，哪些类该隐藏，其控制单元叫做 Bundle（jar 包）。 MANIFEST.MF 文件存储的实际上是 Bundle 的元数据。
生命周期层的主要功能是控制动态安装、开启、关闭、更新和卸载的bundles。生命周期层的API主要是由以下三个核心接口来组成的：BundleActivator，BundleContext 和 Bundle。 
BundleActivator：让你能够捕捉bundle的start和stop事件，并对这两个事件作出自定义的反应。
BundleContext：一个bundle在框架中的执行时上下文，这个上下文提供了和框架进行交互的方法。
Bundle：在逻辑上表示了一个bundle，OSGi环境中的一个物理bundle对应了一个bundle对象。该对象中包含了bundle的基本信息和bundle生命周期的控制接口。
Bundle 可以通过 Bundle的上下文去注册Service或去查询Service。  http://www.cnblogs.com/jingmoxukong/p/4546947.html

http://cloud.51cto.com/art/201510/494051.htm   saas
SaaS系统说起来很简单，任何系统似乎加个tenant_id(租户id)就变成SaaS系统了
比较好做法是通过url识别租户。系统是给租户生成一个随机的三级域名，比如 abc.crm.baidu.com. 如果客户想使用自己的域名，可以在cname到我们生成的三级域名，并在管理系统里面做绑定。
SaaS系统是必须考虑计费系统和租户控制系统。定制化开发尽可能分系统，分模块去做。然后通过控制台中配置不同租户订购不同模块，那些模块可以在前端页面上显示。不同的子系统需要分开部署。


我们的MTA LBS 定位组件主要是用GeoHash 来计算附近的人， 因为要存储亿级用户的地址位置信息，所以用HBase作为存储，用户每次上报都更新geohash中附近的用户的信息，查询的时候先通过geohash值获取到附近的用户列表，再通过用户的属性信息和具体的经纬度进行过滤和排序。
将二维坐标转化成一维字符串(GeoHash) 然后通过比较GeoHash字符串来查找附近的点。 字符串越长，表示的范围越精确。当geohash base32编码长度为8时，精度在19米左右，而当编码长度为9时，精度在2米左右    
由于GeoHash是将区域划分为一个个规则矩形，并对每个矩形进行编码，这个问题往往产生在边界处。  解决的思路很简单，我们查询时，除了使用定位点的GeoHash编码进行匹配外，还使用周围8个区域的GeoHash编码，这样可以避免这个问题。http://blog.jobbole.com/80633/
使用Mongodb可以很容易实现因为它支持geospatial indexes。 你可以对每个用户实时更新数据库中的user_loc 然后db.places.find( { user_loc : { $near : [50,50] } } )
https://docs.mongodb.com/manual/core/geospatial-indexes/
redis geo  http://blog.csdn.net/opensure/article/details/51375961   http://www.tuicool.com/articles/yMnuyeY
PostGIS： 为postgreSQL提供了高级GEO函数功能。Cube和Earthdistance： 这两个拓展为轻量级的Geo关系实体提供了简单、快速的实现方法。PostGIS支持所有OGC规范的“Simple Features”类型，同时在此基础上扩展了对3DZ、3DM、4D坐标的支持。


xss原理上利用的是浏览器可以拼接成任意的javascript，然后黑客拼接好javascript让浏览器自动地给服务器端发出多个请求（get、post请求）。
csrf原理上利用的是网站服务器端所有参数都是可预先构造的原理，然后黑客拼接好具体请求url，可以引诱你提交他构造好的请求。
https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/


http://www.cnblogs.com/lhws/archive/2012/03/10/2389189.html
单一职责原则（Single Responsibility Principle）
定义：不要存在多于一个导致类变更的原因。通俗的说，即一个类只负责一项职责。
问题由来：类T负责两个不同的职责：职责P1，职责P2。当由于职责P1需求发生改变而需要修改类T时，有可能会导致原本运行正常的职责P2功能发生故障。

依赖倒置原则（Dependence Inversion Principle）
定义：高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。
解决方案：将类A修改为依赖接口I，类B和类C各自实现接口I，类A通过接口I间接与类B或者类C发生联系，则会大大降低修改类A的几率。

迪米特法则（Law Of Demeter）
定义：一个对象应该对其他对象保持最少的了解。
问题由来：类与类之间的关系越密切，耦合度越大，当一个类发生改变时，对另一个类的影响也越大。
解决方案：尽量降低类与类之间的耦合。

开闭原则的定义已经非常明确告诉我们：软件实体应该对扩展开放，对修改关闭，其含义是说一个软件实体应该通过扩展来实现变化，而不是通过修改已有的代码来实现变化。

里氏替换原则（Liskov Substitution Principle）
定义2：所有引用基类的地方必须能透明地使用其子类的对象。
解决方案：当使用继承时，遵循里氏替换原则。类B继承类A时，除添加新的方法完成新增功能P2外，尽量不要重写父类A的方法，也尽量不要重载父类A的方法。

接口隔离原则（Interface Segregation Principle）
定义：客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。