基本的流程是：InvokerInvocationHandler ->ClusterInvoker ->LoadBalance -> ProtocolFilterWrapper -> Protocol -> DubboInvoker
RpcContext.getContext().setAttachment(CallChainContext.TRACEID, traceIdValue);

http://kriszhang.com/motan-rpc-impl/  从motan看RPC框架设计
https://github.com/weibocom/motan  微博rpc
http://www.jianshu.com/p/941c2fe65d52  spring boot motan  https://github.com/chenxing2/spring-boot-motan-demo
https://coding.net/u/javacore/p/spring-boot-motan-demo/git
http://www.jianshu.com/p/fdc6a49526d3 RPC框架motan使用
https://github.com/opentracing/opentracing-java  
http://blog.csdn.net/akfly/article/details/53976303   motan学习笔记 六 opentracing Brave+zipkin实现
http://blog.csdn.net/akfly/article/details/53975388
https://yq.aliyun.com/articles/75338?spm=5176.100239.blogrightarea71685.33.doAGJt   分布式调用跟踪与监控实战


http://www.oschina.net/news/83719/tencent-tars-opensource   腾讯开源微服务架构 Tars，高性能 RPC 开发框架
https://help.aliyun.com/document_detail/35478.html?spm=5176.7946893.222623.7.T2X8UJ   EDAS Dubbo使用指南
https://github.com/smallnest/rpcx  golang rpc

启动时，需要指定参数-Ddubbo.shutdown.hook=true
dubbo.service.min.thread.pool.size=200
dubbo.service.max.thread.pool.size=200
dubbo:parameter key="shutdown.timeout" value="60000" /> <!-- 单位毫秒 -->

<!-- 服务调用超时设置为6秒,超时不重试--> 
<dubbo:service interface="com.provider.service.DemoService" ref="demoService"  retries="0" timeout="5000"/>
dubbo在调用服务不成功时，默认会重试2次。Dubbo的路由机制，会把超时的请求路由到其他机器上，而不是本机尝试，所以 dubbo的重试机器也能一定程度的保证服务的质量。
https://yq.aliyun.com/articles/38436?spm=5176.100240.searchblog.52.zE9gPO

https://yq.aliyun.com/articles/38403?spm=5176.100240.searchblog.36.zE9gPO
https://yq.aliyun.com/articles/27895?spm=5176.100240.searchblog.73.zE9gPO  基于Dubbo框架构建分布式服务

在开发阶段为了方便测试，通常系统客户端能指定调用某个服务提供者，那么可以在引用服务时加一个url参数去指定服务提供者
<dubbo:reference  id="xxxService"interface="com.alibaba.xxx.XxxService" url="dubbo://localhost:20890"/>

https://yq.aliyun.com/articles/28065
https://yq.aliyun.com/articles/26829
 

Protocol基于spi可以动态生成特定协议的invoker以及服务端的exporter
请求被委托给逻辑集群，集群从目录中list所有invoker，负载均衡组件从中select出一个可用的，invoker再通过exchange发送请求，请求被序列化（codec）后以特定的传输协议（transporter）发送，在每一个事件处理成功后 --比如连接、发送、应答等等，都会通知handler处理相应事件
URL结构会是协议://用户名:密码@host:port/group/path?参数path一般是service:version
URL被流转于几乎所有调用链路的上下文，因此dubbo扩展点在做动态决策时可以参考URL中的参数信息从而做出正确委派。比如动态决策使用哪种codec时
Dubbo里几乎每个组件都支持多种协议，在这幕后的英雄就是SPI组件

Directory提供目录服务，一组invoker必定会聚集在一个目录下。它实现NotifyListener接口，监听注册中心提供者变更事件，注册中心向其推送提供者变更。目录收到的是提供者的配置信息，基于提供者配置信息客户端生成invoker，并缓存在目录里。
Invoker是对确定节点提供者的逻辑抽象，invoker封装了远程调用的实现细节，主要包括应用协议和传输协议等等。因为它基于提供者配置生成（配置包括但不仅限于提供者的地址和端口信息），因此它能确定指向一个节点。
Reference引用远端服务，它并不确定指向一个节点的提供者，而是引用由多个提供同样服务能力的invoker组成的集群。它被提供给消费者，消费者的所有请求通过它最终被委派给invoker发起remoting调用。
Invoker其实是一个边界，它是RPC协议的具体实现， Reference并不是dubbo里的ReferenceConfig实体，而是返回给消费者的服务代理。
Cluster代表逻辑集群，它的背后是一组提供同质服务的节点。在dubbo里Cluster实体并不直接提供集群能力，它基于动态扩展生成特定HA策略的集群invoker，由集群invoker提供集群的相关能力。
调用链路上，reference将请求委派给集群，集群从目录下list所有invoker再由负载均衡select，最后由被选出的invoker发起remoting，如果失败则遵循当次集群HA协议重试或者快速失败等等。
注册中心对订阅和发布的匹配是以path，以及version，group和classifier三个参数作为依据。
RPC组件分成6层，自上而下分别是应用层，交换层，传输层，转码/序列化层、事件处理层、事件分发层。
交换层在传输层基础上扩展了请求和应答语义，体现信息交换的含义。交换层有定时任务做心跳探测，超时会发起重连。它增加了三个实体，分别是ExchangeChannel，ExchangeClient和ExchangeServer。
ChannelHandler用于网络事件流式处理，它支持5种事件：connected，sent，received，disconnected，caught。分别对应5种网络事件：连接，发送消息，接收消息，断连和异常捕获。


https://yq.aliyun.com/articles/25666?spm=5176.100240.searchblog.45.mvMoDO  编译Dubbo源码并测试
http://www.cnblogs.com/yjmyzz/p/dubbox-demo.html  dubbox简单示例
http://my.oschina.net/u/238296/blog/602446?fromerr=GJbDMeel
http://www.cnblogs.com/yjmyzz/p/update-dubbo-to-spring-4-and-add-log4j2-support.html  升级spring4
http://www.cnblogs.com/yjmyzz/p/dubbo-pritimive-thrift-avro-support.html
http://my.oschina.net/bieber/blog/378638
http://m635674608.iteye.com/blog/2240137
http://blog.csdn.net/jnqqls/article/details/45399357
https://www.xlongwei.com/detail/15040421

分布式配置 disconf，dangdang zookeeper
https://github.com/dangdangdotcom/config-toolkit/wiki   zookeeper config
http://blog.csdn.net/an88411980/article/details/45147613
http://www.oschina.net/p/config-toolkit?fromerr=55769128
https://github.com/yjmyzz/disconf-sample

http://blog.kazaff.me/tags/dubbo/

http://blog.csdn.net/u010311445/article/category/2745121/2

http://shiyanjun.cn/archives/1075.html
http://blog.csdn.net/jdream314/article/details/44039753
http://blog.csdn.net/jdream314/article/details/44590937
http://www.it165.net/admin/html/201502/4951.html

http://blog.javachen.com/2014/09/24/compile-and-test-dubbo/
http://www.jianshu.com/p/0dde591f21d0
http://blog.csdn.net/qduningning/article/details/41445937
http://dangdangdotcom.github.io/dubbox/rest.html
http://shiyanjun.cn/archives/325.html

$ git clone git@github.com:alibaba/opensesame.git
$ cd opensesame
$ mvn install
然后，下载 dubbo 并编译：

$ git clone git@github.com:alibaba/dubbo.git
$ cd dubbo
$ mvn clean install -Dmaven.test.skip

当当网近日开源了Dubbox项目，可为Dubbo服务框架提供多项扩展功能，包括REST风格远程调用、Kryo/FST序列化等等。    http://www.infoq.com/cn/news/2014/10/dubbox-open-source/
http://blog.csdn.net/qduningning/article/details/41445937   集成Dubbo服务(Spring)
http://blog.csdn.net/congcong68/article/details/41113239  Dubbo与Zookeeper、SpringMVC整合和使用（负载均衡、容错）

dubbo-admin在jdk 1.8上部署出错问题  http://www.cnblogs.com/BensonHe/p/4135768.html

LVS、HAProxy、 Nginx等等对HTTP请求做负载均衡。

http://alibaba.github.io/dubbo-doc-static/Home-zh.htm
http://alibaba.github.io/dubbo-doc-static/User+Guide-zh.htm
http://alibaba.github.io/dubbo-doc-static/Developer+Guide-zh.htm
http://alibaba.github.io/dubbo-doc-static/Administrator+Guide-zh.htm
http://alibaba.github.io/dubbo-doc-static/FAQ-zh.htm

http://blog.csdn.net/fei33423/article/details/44158013
String serverIP = RpcContext.getContext().getRemoteHost(); //
 获取当前线程最后一次调用的提供方IP地址

String application = RpcContext.getContext().getUrl().getParameter("application");
 
配置时 <dubbo:provider filter="DubboExceptionFilter"></dubbo:provider>
DubboExceptionFilter 这个值不是spring的bean. 而需要在META-INF/dubbo/com.alibaba.dubbo.rpc.Filter 文件中配置如下文件内容:
DubboExceptionFilter=com.xxx.common.DubboRequestFilter
public DubboRequestFilter implements com.alibaba.dubbo.rpc.Filter{

http://www.cnblogs.com/maxmys/p/3990811.html
http://blog.csdn.net/paul_wei2008/article/details/19355681
http://www.cnblogs.com/zhengyun_ustc/p/55solution2.html
https://github.com/is00hcw/hydra-1
http://www.it165.net/admin/html/201502/4951.html  

http://fywxin.iteye.com/blog/1941936  traceid
http://my.oschina.net/candiesyangyang/blog/202320


向ZK上的指定节点/dubbo/${serviceName}/providers目录下写入自己的URL地址，这个操作就完成了服务的发布。
http://www.cnblogs.com/Javame/p/3632708.html

Zookeeper集群配置:
<dubbo:registryaddress="zookeeper://10.20.153.10:2181?backup=10.20.153.11:2181,10.20.153.12:2181"/>
Or:
<dubbo:registryprotocol="zookeeper"address="10.20.153.10:2181,10.20.153.11:2181,10.20.153.12:2181"/>


结果缓存，用于加速热门数据的访问速度，Dubbo提供声明式缓存，以减少用户加缓存的工作量。默认结果缓存处于关闭状态，开启结果缓存可以用如下的配置（消费端）：
<dubbo:reference id="cacheService" interface="com.alibaba.dubbo.examples.cache.api.CacheService" cache="true" /

对memcache和redis的代理，经过配置之后，就可以把对他们的操作变成对Map的操作，屏蔽IP，端口还有连接这样的细节。还可以利用Dubbo已有的功能，对相关的远程操作进行优化。
<!-- Memcache -->
<dubbo:reference id="cache" interface="java.util.Map" url="memcached://10.20.153.10:11211" />
http://my.oschina.net/candiesyangyang/blog/202320
http://jameswxx.iteye.com/blog/2096425  部署结构
http://javatar.iteye.com/blog/1041832  扩展点
http://oldratlee.com/post/2013-02-01/synchronous-rpc-vs-asynchronous-message
http://shiyanjun.cn/archives/325.html
http://www.biaodianfu.com/dubbo.html
http://dubbo.io/Home-zh.htm
<!-- Redis -->
<dubbo:reference id="store" interface="java.util.Map" url="redis://10.20.153.10:6379" />

hsf
http://javacode.cn/132.html
http://www.cnblogs.com/zhwl/p/3642486.html
http://www.cnblogs.com/zhwl/p/3642472.html


https://github.com/wu-xiang/pigeon  点评rpc
https://github.com/liangliu/swallow
http://www.mpd.org.cn/demoupfiles/file/14036803640.pdf  大众点评的分布式架构

http://blog.csdn.net/mindfloating/article/details/39474123  深入浅出 RPC - 深入篇
http://blog.csdn.net/mindfloating/article/details/39473807