hbase:60010/master-status
hbase:60010/zk.jsp

btrace
http://qa.blog.163.com/blog/static/19014700220142257572460
http://blog.csdn.net/wilsonpeng3/article/details/52576253
http://stacktrace.cn/?p=4


http://www.mspring.org/article/1229   jmc
http://www.icoolxue.com/blog/show/9
chmod 600 jmxremote.password 
-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=8998 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=true -Djava.rmi.server.hostname=qdapp01.atsmart.io -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.password.file=/data/software/jdk/jre/lib/management/jmxremote.password -Dcom.sun.management.jmxremote.access.file=/data/software/jdk/jre/lib/management/jmxremote.access

如何检查连接状态
使用netstat:  netstat -tan | awk '{print $6}' | sort | uniq -c
或使用ss:  ss -s
http://www.oschina.net/translate/optimising-nginx-node-js-and-networking-for-heavy-workloads
proxy_set_header   Connection "";
proxy_http_version 1.1;

http://bboniao.com/jvm/2014-05/housemd.html   housemd
sudo -s -u tomcat /data/software/jdk/bin/jcmd 28764 help
http://noahlz.roughdraft.io/865cc30e0fd93ad48369-troubleshooting-production-jvms-with-jcmd
http://itindex.net/detail/38172-housemd-btrace-java
housemd>  trace -d -s DeviceController+

http://xiaobaoqiu.github.io/blog/2016/02/03/strace/ strace用来跟踪进程执行时的系统调用和所接收的信号
http://xiaobaoqiu.github.io/blog/2015/08/27/zai-xian-zhen-duan-gong-ju/ 常用包括几个诊断工具包括,这里做一个简单的介绍:  1.BTrace  2.HouseMD  3.Greys-Anatomy


http://www.infoq.com/cn/articles/Easily-Create-Java-Agents-with-ByteBuddy  通过使用Byte Buddy，便捷地创建Java Agent
https://yq.aliyun.com/articles/7569?spm=5176.blog5837.yqblogcon1.14.5HIQZZ  Btrace详细指南
https://github.com/aragozin/jvm-tools
https://yq.aliyun.com/articles/2390   Greys Java在线问题诊断工具 , Greys的原理和Btrace一样，依赖了JDK6+提供的Instumentation特性，所以必须要求目标的JDK环境是JDK6及其以上的版本。
http://dbaplus.cn/news-21-173-1.html  听阿里巴巴JVM工程师为你分析常见Java故障案例
http://www.tuicool.com/articles/fABfMvQ  javOSize:新一代java分析工具
https://yq.aliyun.com/articles/56?spm=5176.100240.searchblog.88.1KrXg6  Java调试那点事
简单来说，就是虚拟机默认起了一个线程（没错，就是jstack时看到Signal Dispatcher这货），专门接受处理进程间singal通知，当他收到SIGQUIT时，就会启动一个新的socket监听线程（就是jstack看到的Attach Listener线程）来接收命令，Attach Listener就是一个agent实现，他能处理很多dump命令，更重要的是他能再加载其他agent，比如jdwp agent。
jstack分析哪些线程阻塞了，阻塞在哪里
jstat看看FullGC频率
jmap看看有没有内存泄露
http://www.open-open.com/lib/view/open1381564920177.html

http://www.csdn.net/article/2014-11-20/2822750-5-JDK-To   每个Java开发者都应该知道的5个JDK工具
jmap -dump:format=b,file=heap.bin 3344
jhat heap.bin
在浏览器中输入：http://localhost:7000/后便会出来堆转储的详细情况：
还可以在http://localhost:7000/histo/查看堆内存柱状图。
目前，JRockit Mission Control在标准版Java SE中已经可以使用。Java Mission Control（JMC）与Java Flight Recorder一起工作，适用于HotSpot JVM，用来记录核心数据和事件。

http://dbaplus.cn/news-21-173-1.html   听阿里巴巴JVM工程师为你分析常见Java故障案例
http://xstarcd.github.io/wiki/Java/JVM_GC.html  JVM gc参数设置与分析
http://www.importnew.com/15722.html  在运行时开启GC日志
java -XX:+PrintFlagsFinal -version|grep manageable  这些flag可通过JDK management interface（-XX:+PrintFlagsFinal）动态修改。
jinfo -flag +PrintGCDetails 12278  
jinfo -flag +PrintGC 12278

jvm
http://xstarcd.github.io/wiki/Java/JVM_Heap_Non-heap.html    -XX:ReservedCodeCacheSize=128m
https://blog.codecentric.de/en/2012/07/useful-jvm-flags-part-4-heap-tuning/  -XX:+UseCodeCacheFlushing  -XX:+CMSPermGenSweepingEnabled  -XX:+CMSClassUnloadingEnabled
http://longtask.com/review/2014/06/07/java-permgen-outofmemory/
http://wiki.jikexueyuan.com/project/jvm-parameter/all.html    java -server -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+PrintFlagsFinal Benchmark
http://blog.csdn.net/redhat456/article/details/7360249        java -XX:+UnlockDiagnosticVMOptions -XX:+PrintFlagsFinal -version  
http://0opslab.com/2016/01/16/JVM%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/  


https://github.com/ColZer/DigAndBuried/blob/master/system/java-memory.md  进程分析之JAVA内存
http://www.infoq.com/cn/articles/Visualizing-Java-Garbage-Collection
https://github.com/chewiebug/GCViewer
http://www.ibm.com/developerworks/java/jdk/tools/gcmv/#download
http://www.pingan.im/201407/java-performance-tuning/   Java性能问题分析及调优总结
http://www.ateam-oracle.com/valuable-tools-for-diagnostics-gathering-and-troubleshooting/ 

在最近的64位JVM中，默认的栈大小是1024KB。如果服务器收到大量请求，或者handleRequest方法执行很慢，服务器可能因为创建了大量线程而崩溃。例如有1000个并行的请求，创建出来的1000个线程需要使用1GB的JVM内存作为线程栈空间。
由于线程栈大小引发的内存问题，可以通过-Xss开关来调整栈大小。缩小线程栈大小之后，可以减少每个线程的开销，但是可能会引发栈溢出（StackOverflowErrors）。对于一般应用程序而言，默认的1024KB过于富裕，调小为256KB或者512KB可能更为合适。Java允许的最小值是160KB。


http://blog.csdn.net/qyongkang/article/details/6090497   btrace
http://blog.csdn.net/qyongkang/article/details/6091931
http://mgoann.iteye.com/blog/1409667

http://techblog.youdao.com/?p=961
http://www.javacodegeeks.com/2012/06/introduction-to-btrace-for-java.html
http://www.infoq.com/articles/java-profiling-with-open-source
http://www.taobaotest.com/blogs/1601
http://mgoann.iteye.com/blog/1409667
jmap -dump:live 以及 jmap -histo:live都会触发Full GC，即使加上JVM参数-XX:+DisableExplicitGC也不影响结果

http://m.blog.csdn.net/blog/pentiumchen/43713801  
http://bluedavy.me/?p=185  btrace
http://bluedavy.me/?p=300
http://bluedavy.me/?p=445
import static com.sun.btrace.BTraceUtils.*;
import com.sun.btrace.annotations.*;
@BTrace public class Trace{
   @OnMethod(
       clazz="java.lang.ClassNotFoundException",
       method="<init>"
   )
   public static void traceExecute(){
        jstack(); 
   }
}

 @OnMethod(
       clazz="java.lang.Thread",
       method="start"
   )

通过在启动参数上增加-XX:+TraceClassLoading，重启后在日志里看看此class是在哪load的
在gc log是记录的情况下（-Xloggc:），可通过gc log看看，如果没打开gc log，可通过jstat -gcutil来查看
top -H查看线程的cpu消耗状况
先统计下目前的线程数(例如ps -eLf | grep java -c)，然后可以看看ulimit -u的限制值是多少
常见的有可能是用了Executors.newCachedThreadPool这种来创建了一个没限制大小的线程池。
启动参数上增加-XX:+HeapDumpOnOutOfMemoryError
Native OOM有很大概率是由于错误使用Deflater/Inflater造成的，所以在碰到这类现象时，可以先用btrace跟进下看看使用了Deflater/Inflater的有没有显式去调用end方法；另外一种常见的原因是使用Direct ByteBuffer的场景（例如NIO框架等），如使用了Direct ByteBuffer的对象是比较长存活的
-XX:MaxDirectMemorySize=500m来实现当Direct ByteBuffer使用到500m后主动触发fgc来回收

http://itindex.net/detail/50536-java.util.zip.deflater-jvm-crash
http://run-wang.iteye.com/blog/1326763     10 个非常重要的 HotSpot JVM 参数
java启动参数中已经配置内存溢出时导出日志文件-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/export/Logs/xxx.dump和jvm crash的日志输出路径-XX:ErrorFile=/export/Logs/xxx.log
锁的状况，可通过jstack -l来查看

-XX:+PrintGCTimeStamps
-XX:+PrintGCDetails
-XX:+TraceClassLoading
-XX:+TraceClassUnloading
-XX:+PrintGCTimeStamps
-XX:+PrintGCDetails
-verbose:gc
-Xloggc:gc.log